var tipuesearch = {"pages":[{"text":"FPL FPL F ortran P arameter L ist License What is FPL? FPL is pure fortran 2003 library that can manage the parameters of your program from a single point. FPL is an extendible container (dictionary) of <Key, Value> pairs, where the Key is a character string and the Value can be, by the default, of the following data types: Integer (kinds 1, 2, 4, 8) Real (kinds 4, 8) Logical String Value can be a scalar or an array of any dimension. FPL stores copies of the passed data by assignment. FPL is based in Teuchos::ParameterList of the Trilinos project. How to get FPL git clone --recursive https://github.com/victorsndvg/FPL.git Compilation FPL compile with GNU Fortran compiler 5.1 (and newer versions) and Intel Fortran compiler 15.0.1 (and newer versions). Note: Due to an issue with IBM XLF 14.0.1 Fortran compiler, if you want to use this compiler use the branch XLF_workaround FPL uses CMake as a portable compilation system. The easiest way to compile FPL under Linux is: $ cd FPL\n$ mkdir build\n$ cd build\n$ cmake ../\n$ make To compile FPL under Windows use de equivalent commands Getting started with FPL :warning: FPL cannot handle non-allocated variables while calling Set(Key, Value) or Get(Key, Value) procedures.\n:warning: To succesfull get a stored value into your target variable, data type and shape of both variables must agree. Using FPL in your program USE FPL type ( ParameterList_t ) :: My_List call FPL_Init () call My_List % Init () ... [ Program body ] call My_List % Free () call FPL_Finalize () Setting parameters FPLError = My_List % Set ( Key = 'Max Iters' , Value = 1500 ) FPLError = My_List % Set ( Key = 'Tolerance' , Value = 1.e-10 ) FPLError = My_List % Set ( Key = 'Solver' , Value = 'GMRES' ) Getting parameters integer :: MaxIters FPLError = My_List % Get ( Key = 'Max Iters' , Value = MaxIters ) Getting parameters as strings character ( len = :), allocatable :: MaxItersString FPLError = My_List % GetAsString ( Key = 'Max Iters' , String = MaxItersString ) Check if you can assign a parameter to your variable Check if the target variable has the same type and shape as the stored variable :bangbang: integer :: MaxIters if ( My_List % isAssignable ( Key = 'Max Iters' , Value = MaxIters )) then FPLError = My_List % Get ( Key = 'Max Iters' , Value = MaxIters ) endif Deleting parameters call My_List % Del ( Key = 'Max Iters' ) Checking if a parameter is present logical :: solver_defined solver_defined = My_List % isPresent ( Key = 'Solver' ) Checking if a parameter is of the expected data type logical :: has_same_type real :: Tolerance has_same_type = My_List % isOfDataType ( Key = 'Tolerance' , Mold = Tolerance ) Checking the shape of a parameter logical :: has_same_type integer , allocatable :: Shape (:) FPLError = My_List % GetShape ( Key = 'Tolerance' , Shape = Shape ) Working with parameter sublists Every parameter list can recursively store parameter sublists. type ( ParameterList_t ), pointer :: Prec_List Prec_List => My_List % NewSubList ( Key = 'Preconditioner' ) call Prec_List % Set ( Key = 'Type' , Value = 'ILU' ) call Prec_List % Set ( Key = 'Drop Tolerance' , Value = 1.e-3 ) Checking if it is a parameter sublist logical :: prec_defined prec_defined = My_List % isSubList ( Key = 'Preconditioner' ) Print (recursive) the content of a parameter list call My_List % Print () Iterate on a ParameterList ParameterList also includes a derived type that works like an iterator to go through all stored parameters without asking for the key. ParameterList_Iterator interface is almost the same than ParameterList interface plus some procedures like HasFinished() and Next() to manage the advance of the iterator. The example below iterates on a ParameterList containing integer vectors and getting the stored values. type ( ParameterListIterator_t ) :: Iterator integer , allocatable :: array (:) integer , allocatable :: shape (:) Iterator = Parameters % GetIterator () do while (. not . Iterator % HasFinished ()) if ( Iterator % GetDimensions () /= 1 ) stop - 1 if ( Iterator % GetShape ( Shape = shape ) /= 0 ) stop - 1 if (. not . Iterator % IsOfDataType ( Mold = array )) stop - 1 if ( allocated ( array )) deallocate ( array ) allocate ( array ( shape ( 1 ))) if ( Iterator % Get ( array ) /= 0 ) stop - 1 print * , '  Key = ' // Iterator % GetKey () print * , '  Bytes = ' , Iterator % DataSizeInBytes () print * , '  Dimensions = ' , Iterator % GetDimensions () print * , '  Value = ' , array ) call Iterator % Next () enddo Developer Info VÃ­ctor Sande Veiga Scientific software developer","tags":"","loc":"index.html","title":" FPL "},{"text":"This File Depends On sourcefile~~parameterlist.f90~~EfferentGraph sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlistf90EfferentGraph = svgPanZoom('#sourcefileparameterlistf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~parameterlist.f90~~AfferentGraph sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ParameterList Source Code ParameterList.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module ParameterList USE iso_fortran_env , only : OUTPUT_UNIT USE ErrorMessages USE PENF USE ParameterEntryDictionary USE ParameterRootEntry USE ParameterEntry USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper USE DimensionsWrapper0D USE DimensionsWrapper1D USE DimensionsWrapper2D USE DimensionsWrapper3D USE DimensionsWrapper4D USE DimensionsWrapper5D USE DimensionsWrapper6D USE DimensionsWrapper7D implicit none private save type :: ParameterList_t private type ( ParameterEntryDictionary_t ) :: Dictionary contains private procedure , non_overridable :: ParameterList_Set0D procedure , non_overridable :: ParameterList_Set1D procedure , non_overridable :: ParameterList_Set2D procedure , non_overridable :: ParameterList_Set3D procedure , non_overridable :: ParameterList_Set4D procedure , non_overridable :: ParameterList_Set5D procedure , non_overridable :: ParameterList_Set6D procedure , non_overridable :: ParameterList_Set7D procedure , non_overridable :: ParameterList_Get0D procedure , non_overridable :: ParameterList_Get1D procedure , non_overridable :: ParameterList_Get2D procedure , non_overridable :: ParameterList_Get3D procedure , non_overridable :: ParameterList_Get4D procedure , non_overridable :: ParameterList_Get5D procedure , non_overridable :: ParameterList_Get6D procedure , non_overridable :: ParameterList_Get7D procedure , non_overridable :: ParameterList_GetPointer0D procedure , non_overridable :: ParameterList_GetPointer1D procedure , non_overridable :: ParameterList_GetPointer2D procedure , non_overridable :: ParameterList_GetPointer3D procedure , non_overridable :: ParameterList_GetPointer4D procedure , non_overridable :: ParameterList_GetPointer5D procedure , non_overridable :: ParameterList_GetPointer6D procedure , non_overridable :: ParameterList_GetPointer7D procedure , non_overridable :: ParameterList_IsOfDataType0D procedure , non_overridable :: ParameterList_IsOfDataType1D procedure , non_overridable :: ParameterList_IsOfDataType2D procedure , non_overridable :: ParameterList_IsOfDataType3D procedure , non_overridable :: ParameterList_IsOfDataType4D procedure , non_overridable :: ParameterList_IsOfDataType5D procedure , non_overridable :: ParameterList_IsOfDataType6D procedure , non_overridable :: ParameterList_IsOfDataType7D procedure , non_overridable :: ParameterList_isAssignable0D procedure , non_overridable :: ParameterList_isAssignable1D procedure , non_overridable :: ParameterList_isAssignable2D procedure , non_overridable :: ParameterList_isAssignable3D procedure , non_overridable :: ParameterList_isAssignable4D procedure , non_overridable :: ParameterList_isAssignable5D procedure , non_overridable :: ParameterList_isAssignable6D procedure , non_overridable :: ParameterList_isAssignable7D generic , public :: Set => ParameterList_Set0D , & ParameterList_Set1D , & ParameterList_Set2D , & ParameterList_Set3D , & ParameterList_Set4D , & ParameterList_Set5D , & ParameterList_Set6D , & ParameterList_Set7D generic , public :: Get => ParameterList_Get0D , & ParameterList_Get1D , & ParameterList_Get2D , & ParameterList_Get3D , & ParameterList_Get4D , & ParameterList_Get5D , & ParameterList_Get6D , & ParameterList_Get7D generic , public :: GetPointer => ParameterList_GetPointer0D , & ParameterList_GetPointer1D , & ParameterList_GetPointer2D , & ParameterList_GetPointer3D , & ParameterList_GetPointer4D , & ParameterList_GetPointer5D , & ParameterList_GetPointer6D , & ParameterList_GetPointer7D generic , public :: isOfDataType => ParameterList_IsOfDataType0D , & ParameterList_IsOfDataType1D , & ParameterList_IsOfDataType2D , & ParameterList_IsOfDataType3D , & ParameterList_IsOfDataType4D , & ParameterList_IsOfDataType5D , & ParameterList_IsOfDataType6D , & ParameterList_IsOfDataType7D generic , public :: isAssignable => ParameterList_isAssignable0D , & ParameterList_isAssignable1D , & ParameterList_isAssignable2D , & ParameterList_isAssignable3D , & ParameterList_isAssignable4D , & ParameterList_isAssignable5D , & ParameterList_isAssignable6D , & ParameterList_isAssignable7D procedure , non_overridable , public :: DataSizeInBytes => ParameterList_DataSizeInBytes procedure , non_overridable , public :: Del => ParameterList_RemoveEntry procedure , non_overridable , public :: Init => ParameterList_Init procedure , non_overridable , public :: GetShape => ParameterList_GetShape procedure , non_overridable , public :: GetDimensions => ParameterList_GetDimensions procedure , non_overridable , public :: NewSubList => ParameterList_NewSubList procedure , non_overridable , public :: GetSubList => ParameterList_GetSubList procedure , non_overridable , public :: isPresent => ParameterList_isPresent procedure , non_overridable , public :: isSubList => ParameterList_isSubList procedure , non_overridable , public :: GetAsString => ParameterList_GetAsString procedure , non_overridable , public :: Free => ParameterList_Free procedure , non_overridable , public :: Print => ParameterList_Print procedure , non_overridable , public :: Length => ParameterList_Length procedure , non_overridable , public :: GetIterator => ParameterList_GetIterator final :: ParameterList_Finalize end type ParameterList_t type :: ParameterListIterator_t private type ( ParameterRootEntry_t ), pointer :: DataBase (:) => NULL () type ( EntryListIterator_t ) :: EntryListIterator integer ( I4P ) :: Index = 0 integer ( I4P ) :: UpperBound = 0 contains private procedure , non_overridable :: ParameterListIterator_Assignment procedure , non_overridable :: ParameterListIterator_Get0D procedure , non_overridable :: ParameterListIterator_Get1D procedure , non_overridable :: ParameterListIterator_Get2D procedure , non_overridable :: ParameterListIterator_Get3D procedure , non_overridable :: ParameterListIterator_Get4D procedure , non_overridable :: ParameterListIterator_Get5D procedure , non_overridable :: ParameterListIterator_Get6D procedure , non_overridable :: ParameterListIterator_Get7D procedure , non_overridable :: ParameterListIterator_isOfDataType0D procedure , non_overridable :: ParameterListIterator_isOfDataType1D procedure , non_overridable :: ParameterListIterator_isOfDataType2D procedure , non_overridable :: ParameterListIterator_isOfDataType3D procedure , non_overridable :: ParameterListIterator_isOfDataType4D procedure , non_overridable :: ParameterListIterator_isOfDataType5D procedure , non_overridable :: ParameterListIterator_isOfDataType6D procedure , non_overridable :: ParameterListIterator_isOfDataType7D procedure , non_overridable :: ParameterListIterator_isAssignable0D procedure , non_overridable :: ParameterListIterator_isAssignable1D procedure , non_overridable :: ParameterListIterator_isAssignable2D procedure , non_overridable :: ParameterListIterator_isAssignable3D procedure , non_overridable :: ParameterListIterator_isAssignable4D procedure , non_overridable :: ParameterListIterator_isAssignable5D procedure , non_overridable :: ParameterListIterator_isAssignable6D procedure , non_overridable :: ParameterListIterator_isAssignable7D procedure , non_overridable :: GetEntry => ParameterListIterator_GetEntry procedure , non_overridable :: GetIndex => ParameterListIterator_GetIndex procedure , non_overridable :: PointToValue => ParameterListIterator_PointToValue procedure , non_overridable :: NextNotEmptyListIterator => ParameterListIterator_NextNotEmptyListIterator procedure , public , non_overridable :: GetKey => ParameterListIterator_GetKey procedure , public , non_overridable :: Init => ParameterListIterator_Init procedure , public , non_overridable :: Begin => ParameterListIterator_Begin procedure , public , non_overridable :: End => ParameterListIterator_End procedure , public , non_overridable :: Next => ParameterListIterator_Next procedure , public , non_overridable :: HasFinished => ParameterListIterator_HasFinished procedure , public , non_overridable :: GetShape => ParameterListIterator_GetShape procedure , public , non_overridable :: GetDimensions => ParameterListIterator_GetDimensions procedure , public , non_overridable :: DataSizeInBytes => ParameterListIterator_DataSizeInBytes procedure , public , non_overridable :: GetSubList => ParameterListIterator_GetSubList procedure , public , non_overridable :: isSubList => ParameterListIterator_isSubList procedure , public , non_overridable :: toString => ParameterListIterator_toString procedure , public , non_overridable :: Print => ParameterListIterator_Print procedure , public , non_overridable :: Free => ParameterListIterator_Free generic , public :: Get => ParameterListIterator_Get0D , & ParameterListIterator_Get1D , & ParameterListIterator_Get2D , & ParameterListIterator_Get3D , & ParameterListIterator_Get4D , & ParameterListIterator_Get5D , & ParameterListIterator_Get6D , & ParameterListIterator_Get7D generic , public :: isOfDataType => ParameterListIterator_IsOfDataType0D , & ParameterListIterator_IsOfDataType1D , & ParameterListIterator_IsOfDataType2D , & ParameterListIterator_IsOfDataType3D , & ParameterListIterator_IsOfDataType4D , & ParameterListIterator_IsOfDataType5D , & ParameterListIterator_IsOfDataType6D , & ParameterListIterator_IsOfDataType7D generic , public :: isAssignable => ParameterListIterator_isAssignable0D , & ParameterListIterator_isAssignable1D , & ParameterListIterator_isAssignable2D , & ParameterListIterator_isAssignable3D , & ParameterListIterator_isAssignable4D , & ParameterListIterator_isAssignable5D , & ParameterListIterator_isAssignable6D , & ParameterListIterator_isAssignable7D generic , public :: Assignment ( = ) => ParameterListIterator_Assignment final :: ParameterListIterator_Final end type public :: ParameterList_t public :: ParameterListIterator_t contains !--------------------------------------------------------------------- !< Parameter List Procedures !--------------------------------------------------------------------- subroutine ParameterList_Init ( this , Size ) !----------------------------------------------------------------- !< Initialize the dictionary !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List integer ( I4P ), optional , intent ( IN ) :: Size !< Dictionary Size !----------------------------------------------------------------- call this % Free () if ( present ( Size )) then call this % Dictionary % Init ( Size = Size ) else call this % Dictionary % Init () endif end subroutine ParameterList_Init function ParameterList_GetShape ( this , Key , Shape ) result ( FPLError ) !----------------------------------------------------------------- !< Return an allocatable array with the shape of the contained value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key integer ( I4P ), allocatable , intent ( INOUT ) :: Shape (:) !< Shape of the stored value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) call Wrapper % GetShape ( Shape ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Unknown Wrapper. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetShape function ParameterList_GetDimensions ( this , Key ) result ( Dimensions ) !----------------------------------------------------------------- !< Return an integer with the dimensions of the contained value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key integer ( I4P ) :: Dimensions !< Dimensions of the stored value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess Dimensions = 0 nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) Dimensions = Wrapper % GetDimensions () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Unknown Wrapper. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetDimensions subroutine ParameterList_Free ( this ) !----------------------------------------------------------------- !< Free the dictionary !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List !----------------------------------------------------------------- call this % Dictionary % Free () end subroutine ParameterList_Free subroutine ParameterList_Finalize ( this ) !----------------------------------------------------------------- !< Destructor procedure !----------------------------------------------------------------- type ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List !----------------------------------------------------------------- call this % Free () end subroutine ParameterList_Finalize function ParameterList_NewSubList ( this , Key , Size ) result ( SubListPointer ) !----------------------------------------------------------------- !< Set a Key/Value pair into the dictionary !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key integer ( I4P ), optional , intent ( IN ) :: Size !< Sublist Size class ( * ), pointer :: Sublist !< New Sublist class ( ParameterList_t ), pointer :: SublistPointer !< New Sublist pointer !----------------------------------------------------------------- allocate ( ParameterList_t :: SubList ) call this % Dictionary % Set ( Key = Key , Value = Sublist ) select type ( SubList ) class is ( ParameterList_t ) SublistPointer => SubList if ( present ( Size )) then call Sublist % Init ( Size = Size ) else call Sublist % Init ( Size = Size ) endif end select end function ParameterList_NewSubList function ParameterList_GetSublist ( this , Key , Sublist ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( ParameterList_t ), pointer , intent ( INOUT ) :: Sublist !< Wrapper class ( * ), pointer :: Value !< Returned pointer to value integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Value ) call this % Dictionary % GetPointer ( Key = Key , Value = Value ) if ( associated ( Value )) then select type ( Value ) class is ( ParameterList_t ) SubList => Value class Default FPLerror = FPLSublistError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Is not a sublist.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLSublistError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetSubList function ParameterList_Set0D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the Dictionary !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value !< Unlimited polymorphic Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set0D function ParameterList_Set1D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:) !< Unlimited polymorphic 1D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set1D function ParameterList_Set2D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:) !< Unlimited polymorphic 2D array value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set2D function ParameterList_Set3D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:,:) !< Unlimited Polimorphic 3D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set3D function ParameterList_Set4D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:,:,:) !< Unlimited Polymorphic 4D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set4D function ParameterList_Set5D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:,:,:,:) !< Unlimited Polymorphic 5D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set5D function ParameterList_Set6D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) !< Unlimited Polymorphic 5D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set6D function ParameterList_Set7D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) !< Unlimited Polymorphic 7D array Value class ( WrapperFactory_t ), pointer :: WrapperFactory !< WrapperFactory class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( WrapperFactory ) nullify ( Wrapper ) WrapperFactory => TheWrapperFactoryList % GetFactory ( Value = Value ) if ( associated ( WrapperFactory )) then Wrapper => WrapperFactory % Wrap ( Value = Value ) if ( associated ( Wrapper )) then call this % Dictionary % Set ( Key = Key , Value = Wrapper ) else FPLerror = FPLWrapperError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Nonexistent wrapper. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Setting [Key=\"' // Key // '\"]: Unsupported data type. Not added to the list.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Set7D function ParameterList_Get0D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a scalar Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper0D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get0D function ParameterList_Get1D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a vector Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper1D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get1D function ParameterList_Get2D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 2D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper2D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get2D function ParameterList_Get3D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 3D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper3D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get3D function ParameterList_Get4D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 4D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper4D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get4D function ParameterList_Get5D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 5D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !< Returned value class ( * ), pointer :: Node !< Pointer to a Parameter List class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper5D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get5D function ParameterList_Get6D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 6D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper6D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get6D function ParameterList_Get7D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a 7D array Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper7D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_Get7D function ParameterList_GetPointer0D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper0D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer0D function ParameterList_GetPointer1D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper1D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer1D function ParameterList_GetPointer2D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper2D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer2D function ParameterList_GetPointer3D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper3D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer3D function ParameterList_GetPointer4D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:,:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper4D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer4D function ParameterList_GetPointer5D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:,:,:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper5D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer5D function ParameterList_GetPointer6D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:,:,:,:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper6D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer6D function ParameterList_GetPointer7D ( this , Key , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !< Returned pointer to value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper7D_t ) Value => Wrapper % GetPointer () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetPointer7D function ParameterList_isPresent ( this , Key ) result ( isPresent ) !----------------------------------------------------------------- !< Check if a Key is present at the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key logical :: isPresent !< Boolean flag to check if a Key is present !----------------------------------------------------------------- isPresent = this % Dictionary % IsPresent ( Key = Key ) end function ParameterList_isPresent function ParameterList_isSubList ( this , Key ) result ( isSubList ) !----------------------------------------------------------------- !< Check if a Key is a SubList !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer :: SubListPointer !< Pointer to a SubList logical :: isSubList !< Check if is a SubList !----------------------------------------------------------------- isSubList = . false . nullify ( SubListPointer ) call this % Dictionary % GetPointer ( Key = Key , Value = SubListPointer ) if ( associated ( SubListPointer )) then select type ( SubListPointer ) class is ( ParameterList_t ) isSubList = . true . end select endif end function ParameterList_isSubList function ParameterList_DataSizeInBytes ( this , Key ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the data size in bytes of the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: DataSizeInBytes !< Size in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) DataSizeInBytes = Wrapper % DataSizeInBytes () end select endif end function ParameterList_DataSizeInBytes function ParameterList_isOfDataType0D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ) class is ( ParameterList_t ) select type ( Mold ) class is ( ParameterList_t ) isOfDataType = . true . end select end select endif end function ParameterList_isOfDataType0D function ParameterList_isOfDataType1D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 )) end select endif end function ParameterList_isOfDataType1D function ParameterList_isOfDataType2D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 )) end select endif end function ParameterList_isOfDataType2D function ParameterList_isOfDataType3D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 )) end select end function ParameterList_isOfDataType3D function ParameterList_isOfDataType4D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 )) end select endif end function ParameterList_isOfDataType4D function ParameterList_isOfDataType5D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterList_isOfDataType5D function ParameterList_isOfDataType6D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterList_isOfDataType6D function ParameterList_isOfDataType7D ( this , Key , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false .; nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterList_isOfDataType7D function ParameterList_isAssignable0D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value !< Value to compare with the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper0D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value )) Assignable = . true . end select endif end function ParameterList_isAssignable0D function ParameterList_isAssignable1D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :) !< Value to check against with the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper1D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable1D function ParameterList_isAssignable2D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) !< Value to check against with the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper2D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable2D function ParameterList_isAssignable3D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) !< Value to check against with the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper3D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable3D function ParameterList_isAssignable4D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) !< Value to check against the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper4D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable4D function ParameterList_isAssignable5D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) !< Value to check against the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper5D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable5D function ParameterList_isAssignable6D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Value to check against the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper6D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable6D function ParameterList_isAssignable7D ( this , Key , Value ) result ( Assignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Value to check against the stored variable logical :: Assignable !< Boolean flag to check compatibility class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- Assignable = . false . nullify ( Wrapper ) ! Check if present call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper7D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) Assignable = . true . endif end select endif end function ParameterList_isAssignable7D subroutine ParameterList_RemoveEntry ( this , Key ) !----------------------------------------------------------------- !< Remove an Entry given a Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( INOUT ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key !----------------------------------------------------------------- call this % Dictionary % Del ( Key = Key ) end subroutine ParameterList_RemoveEntry function ParameterList_Length ( this ) result ( Length ) !----------------------------------------------------------------- !< Return the number of ParameterListEntries contained in the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List integer ( I4P ) :: Length !< Number of parameters in database !----------------------------------------------------------------- Length = this % Dictionary % Length () end function ParameterList_Length function ParameterList_GetIterator ( this ) result ( Iterator ) !----------------------------------------------------------------- !< Return a pointer to a Parameters Iterator !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List Entry Container Type type ( ParameterListIterator_t ) :: Iterator !< Parameter List iterator !----------------------------------------------------------------- call Iterator % Init ( DataBase = this % Dictionary % GetDataBase ()) end function ParameterList_GetIterator function ParameterList_GetAsString ( this , Key , String , Separator ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a scalar Value given the Key !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key character ( len = :), allocatable , intent ( INOUT ) :: String !< Returned value as string character ( len = 1 ), optional , intent ( IN ) :: Separator !< Array values separator class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) call this % Dictionary % GetPointer ( Key = Key , Value = Wrapper ) if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) String = Wrapper % toString ( Separator = Separator ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Unknown Wrapper. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // Key // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterList_GetAsString recursive subroutine ParameterList_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the content of the DataBase !----------------------------------------------------------------- class ( ParameterList_t ), intent ( IN ) :: this !< Linked List integer ( I4P ), optional , intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: unitd !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. type ( ParameterListIterator_t ) :: Iterator !< Dictionary Iterator class ( * ), pointer :: Value !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix unitd = OUTPUT_UNIT ; if ( present ( unit )) unitd = unit Iterator = this % GetIterator () do while (. not . Iterator % HasFinished ()) Nullify ( Value ) Value => Iterator % PointToValue () if ( associated ( Value )) then select type ( Value ) class is ( DimensionsWrapper_t ) call Value % Print ( unit = unitd , & prefix = prefd // & '[' // trim ( str ( no_sign = . true ., n = Iterator % GetIndex ())) // ']' // & ' Key = ' // Iterator % GetKey () // ',' , & iostat = iostatd , & iomsg = iomsgd ) type is ( ParameterList_t ) write ( unit = unitd , fmt = '(A)' ) prefd // & '[' // trim ( str ( no_sign = . true ., n = Iterator % GetIndex ())) // ']' // & ' Key = ' // Iterator % GetKey () // ', Data Type = ParameterList' call Value % Print ( unit = unitd , prefix = prefd // '[' // trim ( str ( no_sign = . true ., n = Iterator % GetIndex ())) // '] ' , iostat = iostatd , iomsg = iomsgd ) class DEFAULT write ( unit = unitd , fmt = '(A)' ) prefd // & '[' // trim ( str ( no_sign = . true ., n = Iterator % GetIndex ())) // ']' // & ' Key = ' // Iterator % GetKey () // ', Data Type = Unknown Data Type!' end select endif call Iterator % Next () enddo if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine ParameterList_Print !--------------------------------------------------------------------- !< Parameter List Iterator Procedures !--------------------------------------------------------------------- subroutine ParameterListIterator_Assignment ( this , ParameterListIterator ) !----------------------------------------------------------------- !< Dictionary iterator Assignment !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Output Dictionary iterator type ( ParameterListIterator_t ), intent ( IN ) :: ParameterListIterator ! Input Dictionary iterator !----------------------------------------------------------------- this % DataBase ( 0 :) => ParameterListIterator % DataBase this % EntryListIterator = ParameterListIterator % EntryListIterator this % Index = ParameterListIterator % Index this % UpperBound = ParameterListIterator % UpperBound end subroutine ParameterListIterator_Assignment subroutine ParameterListIterator_Free ( this ) !----------------------------------------------------------------- !< Free the dictionary iterator !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator !----------------------------------------------------------------- this % Index = 0 this % UpperBound = 0 nullify ( this % DataBase ) call this % EntryListIterator % Free () end subroutine ParameterListIterator_Free subroutine ParameterListIterator_Final ( this ) !----------------------------------------------------------------- !< Free the dictionary iterator !----------------------------------------------------------------- type ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator !----------------------------------------------------------------- call this % Free () end subroutine ParameterListIterator_Final subroutine ParameterListIterator_Init ( this , DataBase ) !----------------------------------------------------------------- !< Associate the iterator with a dictionary and rewind !< to the first position !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator type ( ParameterRootEntry_t ), target , intent ( IN ) :: DataBase (:) ! Entries database !----------------------------------------------------------------- call this % Free () this % DataBase ( 0 :) => DataBase (:) this % Index = - 1 this % UpperBound = size ( this % DataBase ) call this % Next () end subroutine ParameterListIterator_Init subroutine ParameterListIterator_Begin ( this ) !----------------------------------------------------------------- !< Rewind the iterator to the first dictionary position !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator type ( ParameterRootEntry_t ), pointer :: DataBase (:) ! Entries database !----------------------------------------------------------------- DataBase => this % DataBase call this % Init ( DataBase ) end subroutine ParameterListIterator_Begin subroutine ParameterListIterator_End ( this ) !----------------------------------------------------------------- !< Fast forward to the last dictionary position (HasFinished = .true.) !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator !----------------------------------------------------------------- this % Index = this % UpperBound call this % EntryListIterator % Free () end subroutine ParameterListIterator_End subroutine ParameterListIterator_NextNotEmptyListIterator ( this ) !----------------------------------------------------------------- !< The iterator points to the next associated entry !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator !----------------------------------------------------------------- call this % EntryListIterator % Free () this % Index = this % Index + 1 do while ( this % Index < this % UpperBound ) if ( this % DataBase ( this % Index )% HasRoot ()) then this % EntryListIterator = this % Database ( this % Index )% GetIterator () exit endif this % Index = this % Index + 1 enddo end subroutine ParameterListIterator_NextNotEmptyListIterator subroutine ParameterListIterator_Next ( this ) !----------------------------------------------------------------- !< The iterator points to the next associated entry !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator !----------------------------------------------------------------- if (. not . this % HasFinished ()) then if (. not . this % EntryListIterator % HasFinished ()) then call this % EntryListIterator % Next () else call this % NextNotEmptyListIterator () endif endif end subroutine ParameterListIterator_Next function ParameterListIterator_GetEntry ( this ) result ( CurrentEntry ) !----------------------------------------------------------------- !< Return the current Entry !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this ! Dictionary iterator type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- nullify ( CurrentEntry ) CurrentEntry => this % EntryListIterator % GetEntry () if (. not . associated ( CurrentEntry )) then FPLerror = FPLParameterListIteratorError call msg % Error ( txt = 'Current entry not associated. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_GetEntry function ParameterListIterator_PointToValue ( this ) result ( Value ) !----------------------------------------------------------------- !< Return a pointer to the value stored in the current Entry !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this ! Dictionary iterator class ( * ), pointer :: Value ! Unlimited polymorphic pointer type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry !----------------------------------------------------------------- nullify ( CurrentEntry ) nullify ( Value ) CurrentEntry => this % GetEntry () if ( associated ( CurrentEntry )) Value => CurrentEntry % PointToValue () end function ParameterListIterator_PointToValue function ParameterListIterator_GetKey ( this ) result ( Key ) !----------------------------------------------------------------- !< Return the Key of the current Entry !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this ! Dictionary iterator character ( len = :), allocatable :: Key ! Key type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry !----------------------------------------------------------------- nullify ( CurrentEntry ) CurrentEntry => this % GetEntry () if ( associated ( CurrentEntry )) Key = CurrentEntry % GetKey () end function ParameterListIterator_GetKey function ParameterListIterator_GetIndex ( this ) result ( CurrentIndex ) !----------------------------------------------------------------- !< Return the current Index !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this ! Dictionary iterator integer ( I4P ) :: CurrentIndex ! Current index !----------------------------------------------------------------- CurrentIndex = this % Index end function ParameterListIterator_GetIndex function ParameterListIterator_GetShape ( this , Shape ) result ( FPLError ) !----------------------------------------------------------------- !< Return an allocatable array with the shape of the contained value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator integer ( I4P ), allocatable , intent ( INOUT ) :: Shape (:) !< Shape of the stored value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) call Wrapper % GetShape ( Shape ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Unknown Wrapper. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_GetShape function ParameterListIterator_GetDimensions ( this ) result ( Dimensions ) !----------------------------------------------------------------- !< Return an allocatable array with the shape of the contained value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator integer ( I4P ) :: Dimensions !< Dimensions of the stored value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess Dimensions = 0 nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) Dimensions = Wrapper % GetDimensions () class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Unknown Wrapper. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Shape was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_GetDimensions function ParameterListIterator_Get0D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a scalar Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper0D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get0D function ParameterListIterator_Get1D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a vector Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper1D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get1D function ParameterListIterator_Get2D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper2D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get2D function ParameterListIterator_Get3D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:,:) !< Returned value type ( ParameterEntry_t ), pointer :: CurrentEntry !< Current entry class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper3D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get3D function ParameterListIterator_Get4D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !< Returned value class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper4D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get4D function ParameterListIterator_Get5D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !< Returned value type ( ParameterEntry_t ), pointer :: CurrentEntry !< Current entry class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper5D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get5D function ParameterListIterator_Get6D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !< Returned value type ( ParameterEntry_t ), pointer :: CurrentEntry !< Current entry class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper6D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get6D function ParameterListIterator_Get7D ( this , Value ) result ( FPLerror ) !----------------------------------------------------------------- !< Return an array Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !< Returned value type ( ParameterEntry_t ), pointer :: CurrentEntry !< Current entry class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper7D_t ) call Wrapper % Get ( Value = Value ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Dimensions do not match. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_Get7D function ParameterListIterator_GetSublist ( this , Sublist ) result ( FPLerror ) !----------------------------------------------------------------- !< Return a Unlimited polymorphic pointer to a Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List type ( ParameterList_t ), pointer , intent ( INOUT ) :: Sublist !< Wrapper class ( * ), pointer :: Value !< Returned pointer to value integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Value ) nullify ( Sublist ) Value => this % PointToValue () if ( associated ( Value )) then select type ( Value ) class is ( ParameterList_t ) SubList => Value class Default FPLerror = FPLSublistError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Is not a sublist.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLSublistError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Sublist was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_GetSubList function ParameterListIterator_isSubList ( this ) result ( isSubList ) !----------------------------------------------------------------- !< Check if a Key is a SubList !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), pointer :: SubList !< Sublist pointer logical :: isSubList !< Check if is a SubList !----------------------------------------------------------------- isSubList = . false . nullify ( Sublist ) SubList => this % PointToValue () if ( associated ( Sublist )) then select type ( Sublist ) class is ( ParameterList_t ) isSubList = . true . end select endif end function ParameterListIterator_isSubList function ParameterListIterator_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the data size in bytes of the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator type ( ParameterEntry_t ), pointer :: CurrentEntry !< Current entry class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: DataSizeInBytes !< Size in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) DataSizeInBytes = Wrapper % DataSizeInBytes () end select endif end function ParameterListIterator_DataSizeInBytes function ParameterListIterator_isOfDataType0D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ) end select endif end function ParameterListIterator_isOfDataType0D function ParameterListIterator_isOfDataType1D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 )) end select endif end function ParameterListIterator_isOfDataType1D function ParameterListIterator_isOfDataType2D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType2D function ParameterListIterator_isOfDataType3D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType3D function ParameterListIterator_isOfDataType4D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType4D function ParameterListIterator_isOfDataType5D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType5D function ParameterListIterator_isOfDataType6D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType6D function ParameterListIterator_isOfDataType7D ( this , Mold ) result ( IsOfDataType ) !----------------------------------------------------------------- !< Check if the data type of Mold agrees with the value associated with Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Mold ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Mold class ( * ), pointer :: Wrapper !< Wrapper logical :: isOfDataType !< Check if has the same type !----------------------------------------------------------------- isOfDataType = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) isOfDataType = Wrapper % isOfDataType ( Mold = Mold ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) end select endif end function ParameterListIterator_isOfDataType7D function ParameterListIterator_isAssignable0D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper0D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value )) isAssignable = . true . end select endif end function ParameterListIterator_isAssignable0D function ParameterListIterator_isAssignable1D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper1D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable1D function ParameterListIterator_isAssignable2D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper2D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable2D function ParameterListIterator_isAssignable3D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper3D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable3D function ParameterListIterator_isAssignable4D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper4D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable4D function ParameterListIterator_isAssignable5D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper5D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable5D function ParameterListIterator_isAssignable6D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper6D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable6D function ParameterListIterator_isAssignable7D ( this , Value ) result ( isAssignable ) !----------------------------------------------------------------- !< Check if a stored variable is Assignable to Value !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Value class ( * ), pointer :: Wrapper !< Wrapper logical :: isAssignable !< Check if is assignable integer ( I4P ), allocatable :: ValueShape (:) !< Shape of the stored value !----------------------------------------------------------------- isAssignable = . false . nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper7D_t ) ! Check same data type if ( Wrapper % isOfDataType ( Mold = Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then call Wrapper % GetShape ( ValueShape ) ! Check right shape if ( all ( ValueShape == shape ( Value ))) isAssignable = . true . endif end select endif end function ParameterListIterator_isAssignable7D function ParameterListIterator_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return a scalar Value given the Key !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter List Iterator character ( len = 1 ), optional , intent ( IN ) :: Separator !< Array values separator character ( len = :), allocatable :: String !< Returned value as string class ( * ), pointer :: Wrapper !< Wrapper integer ( I4P ) :: FPLerror !< Error flag !----------------------------------------------------------------- FPLerror = FPLSuccess nullify ( Wrapper ) Wrapper => this % PointToValue () if ( associated ( Wrapper )) then select type ( Wrapper ) class is ( DimensionsWrapper_t ) String = Wrapper % toString ( Separator ) class Default FPLerror = FPLWrapperError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Unknown Wrapper. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) end select else FPLerror = FPLWrapperFactoryError call msg % Error ( txt = 'Getting [Key=\"' // this % GetKey () // '\"]: Not present. Value was not modified.' , & file = __ FILE__ , line = __ LINE__ ) endif end function ParameterListIterator_toString recursive subroutine ParameterListIterator_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the content of the DataBase !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( IN ) :: this !< Parameter Iterator integer ( I4P ), optional , intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: unitd !< Logic unit. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. class ( * ), pointer :: Value !< Unlimited polymorphic value !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix unitd = OUTPUT_UNIT ; if ( present ( unit )) unitd = unit nullify ( Value ) Value => this % PointToValue () if ( associated ( Value )) then select type ( Value ) class is ( DimensionsWrapper_t ) call Value % Print ( unit = unitd , & prefix = prefd // & '[' // trim ( str ( no_sign = . true ., n = this % GetIndex ())) // ']' // & ' Key = ' // this % GetKey () // ',' , & iostat = iostatd , & iomsg = iomsgd ) end select endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine ParameterListIterator_Print function ParameterListIterator_HasFinished ( this ) result ( HasFinished ) !----------------------------------------------------------------- !< Check if Iterator has reached the end of the dictionary !----------------------------------------------------------------- class ( ParameterListIterator_t ), intent ( INOUT ) :: this ! Dictionary iterator logical :: HasFinished !----------------------------------------------------------------- HasFinished = . false . if ( this % Index == this % UpperBound ) HasFinished = . true . end function ParameterListIterator_HasFinished end module ParameterList","tags":"","loc":"sourcefile/parameterlist.f90.html","title":"ParameterList.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterentry.f90~~EfferentGraph sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~parameterentry.f90~~AfferentGraph sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefileparameterentryf90AfferentGraph = svgPanZoom('#sourcefileparameterentryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ParameterEntry Source Code ParameterEntry.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter Entry) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module ParameterEntry USE PENF USE DimensionsWrapper implicit none private type :: EntryListIterator_t private type ( ParameterEntry_t ), pointer :: CurrentEntry => NULL () contains private procedure , non_overridable :: EntryListIterator_Assignment procedure , public , non_overridable :: Init => EntryListIterator_Init procedure , public , non_overridable :: Next => EntryListIterator_Next procedure , public , non_overridable :: HasFinished => EntryListIterator_HasFinished procedure , public , non_overridable :: GetEntry => EntryListIterator_GetEntry procedure , public , non_overridable :: GetKey => EntryListIterator_GetKey procedure , public , non_overridable :: PointToValue => EntryListIterator_PointToValue procedure , public , non_overridable :: Free => EntryListIterator_Free generic , public :: Assignment ( = ) => EntryListIterator_Assignment final :: EntryListIterator_Final end type type :: ParameterEntry_t private character ( len = :), allocatable :: Key class ( * ), pointer :: Value => NULL () class ( ParameterEntry_t ), pointer :: Next => NULL () contains private procedure , non_overridable , public :: Free => ParameterEntry_Free procedure , non_overridable , public :: Print => ParameterEntry_Print procedure , non_overridable , public :: HasNext => ParameterEntry_HasNext procedure , non_overridable , public :: SetNext => ParameterEntry_SetNext procedure , non_overridable , public :: GetNext => ParameterEntry_GetNext procedure , non_overridable , public :: NullifyNext => ParameterEntry_NullifyNext procedure , non_overridable , public :: HasKey => ParameterEntry_HasKey procedure , non_overridable , public :: SetKey => ParameterEntry_SetKey procedure , non_overridable , public :: GetKey => ParameterEntry_GetKey procedure , non_overridable , public :: DeallocateKey => ParameterEntry_DeallocateKey procedure , non_overridable , public :: HasValue => ParameterEntry_HasValue procedure , non_overridable , public :: SetValue => ParameterEntry_SetValue procedure , non_overridable , public :: GetValue => ParameterEntry_GetValue procedure , non_overridable , public :: DeallocateValue => ParameterEntry_DeallocateValue procedure , non_overridable , public :: PointToValue => ParameterEntry_PointToValue procedure , non_overridable , public :: GetIterator => ParameterEntry_GetIterator final :: ParameterEntry_Finalize end type ParameterEntry_t public :: ParameterEntry_t public :: EntryListIterator_t contains function ParameterEntry_HasNext ( this ) result ( hasNext ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry logical :: hasNext !< Check if Next is associated !----------------------------------------------------------------- hasNext = associated ( this % Next ) end function ParameterEntry_HasNext subroutine ParameterEntry_SetNext ( this , Next ) !----------------------------------------------------------------- !< Set the pointer to the Next node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry class ( ParameterEntry_t ), pointer , intent ( IN ) :: Next !< Pointer to Next !----------------------------------------------------------------- this % Next => Next end subroutine ParameterEntry_SetNext function ParameterEntry_GetNext ( this ) result ( Next ) !----------------------------------------------------------------- !< Return a pointer to the Next node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry class ( ParameterEntry_t ), pointer :: Next !< Pointer to Next !----------------------------------------------------------------- nullify ( Next ) if ( this % HasNext ()) Next => this % Next end function ParameterEntry_GetNext subroutine ParameterEntry_NullifyNext ( this ) !----------------------------------------------------------------- !< Nullify Next !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry !----------------------------------------------------------------- nullify ( this % Next ) end subroutine ParameterEntry_NullifyNext function ParameterEntry_HasKey ( this ) result ( hasKey ) !----------------------------------------------------------------- !< Check if Key is allocated for the current Node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry logical :: hasKey !< Check if Key is associated !----------------------------------------------------------------- hasKey = allocated ( this % Key ) end function ParameterEntry_HasKey subroutine ParameterEntry_SetKey ( this , Key ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry character ( len =* ), intent ( IN ) :: Key !< Key !----------------------------------------------------------------- this % Key = Key end subroutine ParameterEntry_SetKey function ParameterEntry_GetKey ( this ) result ( Key ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry character ( len = :), allocatable :: Key !< Key !----------------------------------------------------------------- Key = this % Key end function ParameterEntry_GetKey subroutine ParameterEntry_DeallocateKey ( this ) !----------------------------------------------------------------- !< Deallocate Key if allocated !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry !----------------------------------------------------------------- if ( this % HasKey ()) deallocate ( this % Key ) end subroutine ParameterEntry_DeallocateKey subroutine ParameterEntry_Free ( this ) !----------------------------------------------------------------- !< Free the Entry !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry !----------------------------------------------------------------- call this % DeallocateKey () call this % DeallocateValue () call this % NullifyNext () end subroutine ParameterEntry_Free function ParameterEntry_HasValue ( this ) result ( hasValue ) !----------------------------------------------------------------- !< Check if Value is allocated for the current Node !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry logical :: hasValue !< Check if Value is allocated !----------------------------------------------------------------- hasValue = associated ( this % Value ) end function ParameterEntry_HasValue subroutine ParameterEntry_SetValue ( this , Value ) !----------------------------------------------------------------- !< Set a concrete Wrapper !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry class ( * ), pointer , intent ( IN ) :: Value !< Concrete Wrapper !----------------------------------------------------------------- if ( this % HasValue ()) deallocate ( this % Value ) this % Value => Value end subroutine ParameterEntry_SetValue subroutine ParameterEntry_GetValue ( this , Value ) !----------------------------------------------------------------- !< Return a concrete WrapperFactory !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry class ( * ), allocatable , intent ( OUT ) :: Value !< Concrete Wrapper !----------------------------------------------------------------- if ( this % HasValue ()) allocate ( Value , source = this % Value ) end subroutine ParameterEntry_GetValue function ParameterEntry_PointToValue ( this ) result ( Value ) !----------------------------------------------------------------- !< Return a pointer to a concrete WrapperFactory !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry class ( * ), pointer :: Value !< Concrete Wrapper !----------------------------------------------------------------- Value => this % Value end function ParameterEntry_PointToValue subroutine ParameterEntry_DeallocateValue ( this ) !----------------------------------------------------------------- !< Deallocate Key if allocated !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry !----------------------------------------------------------------- if ( this % HasValue ()) deallocate ( this % Value ) end subroutine ParameterEntry_DeallocateValue subroutine ParameterEntry_Finalize ( this ) !----------------------------------------------------------------- !< Finalize procedure !----------------------------------------------------------------- type ( ParameterEntry_t ), intent ( INOUT ) :: this !< Parameter Entry !----------------------------------------------------------------- call this % Free () end subroutine ParameterEntry_Finalize function ParameterEntry_GetIterator ( this ) result ( Iterator ) !----------------------------------------------------------------- !< Free the list !----------------------------------------------------------------- class ( ParameterEntry_t ), target , intent ( INOUT ) :: this !< Parameter Entry type ( EntryListIterator_t ) :: Iterator !< List iterator !----------------------------------------------------------------- call Iterator % Init ( Entry = this ) end function ParameterEntry_GetIterator subroutine ParameterEntry_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the keys/value pair contained in the Parameter Entry !----------------------------------------------------------------- class ( ParameterEntry_t ), intent ( IN ) :: this !< Parameter Entry integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- iostatd = 0 ; iomsgd = '' ; prefd = '' ; if ( present ( prefix )) prefd = prefix if ( this % HasKey ()) then write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Key = \"' // this % GetKey () // '\", ' select type ( Wrapper => this % Value ) class is ( DimensionsWrapper_t ) call Wrapper % Print ( unit = unit ) class Default write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) ' is a Parameter SubList' end select endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine ParameterEntry_Print !--------------------------------------------------------------------- !< Entry List Iterator Procedures !--------------------------------------------------------------------- subroutine EntryListIterator_Assignment ( this , ListIterator ) !----------------------------------------------------------------- !< Assignment operator !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( INOUT ) :: this ! Output List iterator type ( EntryListIterator_t ), intent ( IN ) :: ListIterator ! Input List iterator !----------------------------------------------------------------- this % CurrentEntry => ListIterator % CurrentEntry end subroutine EntryListIterator_Assignment subroutine EntryListIterator_Free ( this ) !----------------------------------------------------------------- !< Free the List iterator !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( INOUT ) :: this ! List iterator !----------------------------------------------------------------- nullify ( this % CurrentEntry ) end subroutine EntryListIterator_Free subroutine EntryListIterator_Final ( this ) !----------------------------------------------------------------- !< Free the List iterator !----------------------------------------------------------------- type ( EntryListIterator_t ), intent ( INOUT ) :: this ! List iterator !----------------------------------------------------------------- call this % Free () end subroutine EntryListIterator_Final subroutine EntryListIterator_Init ( this , Entry ) !----------------------------------------------------------------- !< Associate the iterator with an entry !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( INOUT ) :: this ! List iterator type ( ParameterEntry_t ), target , intent ( IN ) :: Entry ! List entry !----------------------------------------------------------------- call this % Free () this % CurrentEntry => Entry end subroutine EntryListIterator_Init subroutine EntryListIterator_Next ( this ) !----------------------------------------------------------------- !< The iterator points to the next associated entry !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( INOUT ) :: this ! List iterator !----------------------------------------------------------------- if (. not . this % HasFinished ()) this % CurrentEntry => this % CurrentEntry % GetNext () end subroutine EntryListIterator_Next function EntryListIterator_GetEntry ( this ) result ( CurrentEntry ) !----------------------------------------------------------------- !< Return the current Entry !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( IN ) :: this ! List iterator type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry !----------------------------------------------------------------- nullify ( CurrentEntry ) CurrentEntry => this % CurrentEntry end function EntryListIterator_GetEntry function EntryListIterator_GetKey ( this ) result ( Key ) !----------------------------------------------------------------- !< Return the current Key !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( IN ) :: this ! List iterator type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry character ( len = :), allocatable :: Key ! Entry Key !----------------------------------------------------------------- if ( associated ( this % CurrentEntry )) then if ( this % CurrentEntry % HasKey ()) Key = this % CurrentEntry % GetKey () endif end function EntryListIterator_GetKey function EntryListIterator_PointToValue ( this ) result ( Value ) !----------------------------------------------------------------- !< Return the current Value !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( IN ) :: this ! List iterator type ( ParameterEntry_t ), pointer :: CurrentEntry ! Current entry class ( * ), pointer :: Value ! Entry Value !----------------------------------------------------------------- nullify ( Value ) if ( associated ( this % CurrentEntry )) then if ( this % CurrentEntry % HasValue ()) Value => this % CurrentEntry % PointToValue () endif end function EntryListIterator_PointToValue function EntryListIterator_HasFinished ( this ) result ( HasFinished ) !----------------------------------------------------------------- !< Check if Iterator has reached the end of the dictionary !----------------------------------------------------------------- class ( EntryListIterator_t ), intent ( IN ) :: this ! List iterator logical :: HasFinished ! Check if has reached the end of the list !----------------------------------------------------------------- HasFinished = . false . if (. not . associated ( this % CurrentEntry )) then HasFinished = . true . elseif (. not . this % CurrentEntry % HasNext ()) then HasFinished = . true . endif end function EntryListIterator_HasFinished end module ParameterEntry","tags":"","loc":"sourcefile/parameterentry.f90.html","title":"ParameterEntry.f90 â FPL"},{"text":"This File Depends On sourcefile~~fpl.f90~~EfferentGraph sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilefplf90EfferentGraph = svgPanZoom('#sourcefilefplf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~fpl.f90~~AfferentGraph sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FPL Source Code FPL.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module FPL USE ParameterList USE WrapperFactoryListSingleton public :: ParameterList_t , ParameterListIterator_t contains subroutine FPL_Init () !----------------------------------------------------------------- !< Initialize FPL !----------------------------------------------------------------- call TheWrapperFactoryList_Init () end subroutine FPL_Init subroutine FPL_Finalize () !----------------------------------------------------------------- !< Finalize FPL !----------------------------------------------------------------- call TheWrapperFactoryList % Free () end subroutine FPL_Finalize end module FPL","tags":"","loc":"sourcefile/fpl.f90.html","title":"FPL.f90 â FPL"},{"text":"Files Dependent On This One sourcefile~~errormessages.f90~~AfferentGraph sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~errormessages.f90->sourcefile~circlewrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~errormessages.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefileerrormessagesf90AfferentGraph = svgPanZoom('#sourcefileerrormessagesf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ErrorMessages Source Code ErrorMessages.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module ErrorMessages USE iso_fortran_env , only : OUTPUT_UNIT , ERROR_UNIT USE PENF , only : I4P , str implicit none private integer ( I4P ), public , parameter :: FPLSuccess = 0 integer ( I4P ), public , parameter :: FPLWrapperFactoryError = - 1 integer ( I4P ), public , parameter :: FPLWrapperError = - 2 integer ( I4P ), public , parameter :: FPLSublistError = - 3 integer ( I4P ), public , parameter :: FPLParameterListIteratorError = - 4 type :: MessageHandler_t private character ( len = 5 ) :: prefix = '[FPL]' contains procedure , non_overridable :: Print => MessageHandler_Print procedure , non_overridable :: Warn => MessageHandler_Warn procedure , non_overridable :: Error => MessageHandler_Error end type type ( MessageHandler_t ) :: msg public :: msg contains subroutine MessageHandler_Print ( this , txt , unit , iostat , iomsg ) !----------------------------------------------------------------- !< Print a txt message preceding for prefix !----------------------------------------------------------------- class ( MessageHandler_t ), intent ( IN ) :: this !< Message handler character ( len =* ), intent ( IN ) :: txt !< Text to print integer ( I4P ), optional , intent ( IN ) :: unit !< Unit where to print integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. integer ( I4P ) :: iostatd !< Real IO error. integer ( I4P ) :: u !< Real unit character ( 500 ) :: iomsgd !< Real IO error message. !----------------------------------------------------------------- u = OUTPUT_UNIT ; if ( present ( unit )) u = unit ; iostatd = 0 ; iomsgd = '' write ( unit = u , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) this % Prefix // ' ' // txt if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine subroutine MessageHandler_Warn ( this , txt , unit , file , line , iostat , iomsg ) !----------------------------------------------------------------- !< Warn a with txt message preceding for WARNING! !----------------------------------------------------------------- class ( MessageHandler_t ), intent ( IN ) :: this !< Message handler character ( len =* ), intent ( IN ) :: txt !< Text to print integer ( I4P ), optional , intent ( IN ) :: unit !< Unit where to print character ( * ), optional , intent ( IN ) :: file !< Source file integer ( I4P ), optional , intent ( IN ) :: line !< Number of line in source file integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: loc !< Warning location string integer ( I4P ) :: iostatd !< Real IO error. integer ( I4P ) :: u !< Real unit character ( 500 ) :: iomsgd !< Real IO error message. !----------------------------------------------------------------- u = ERROR_UNIT ; if ( present ( unit )) u = unit ; iostatd = 0 ; iomsgd = '' ; loc = '' if ( present ( file ) . and . present ( line )) & loc = '(' // file // ':' // trim ( str ( no_sign = . true ., n = line )) // ') ' call this % Print ( 'WARNING! ' // trim ( adjustl ( loc // txt )), unit = u , iostat = iostatd , iomsg = iomsgd ) if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine subroutine MessageHandler_Error ( this , txt , unit , file , line , iostat , iomsg ) !----------------------------------------------------------------- !< Print a txt message preceding for ERROR! !----------------------------------------------------------------- class ( MessageHandler_t ), intent ( IN ) :: this !< Message handler character ( len =* ), intent ( IN ) :: txt !< Text to print integer ( I4P ), optional , intent ( IN ) :: unit !< Unit where to print character ( * ), optional , intent ( IN ) :: file !< Source file integer ( I4P ), optional , intent ( IN ) :: line !< Number of line in source file integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: loc !< Error location string integer ( I4P ) :: iostatd !< Real IO error. integer ( I4P ) :: u !< Real unit character ( 500 ) :: iomsgd !< Real IO error message. !----------------------------------------------------------------- u = ERROR_UNIT ; if ( present ( unit )) u = unit ; iostatd = 0 ; iomsgd = '' loc = '' if ( present ( file ) . and . present ( line )) & loc = '(' // file // ':' // trim ( str ( no_sign = . true ., n = line )) // ') ' call this % Print ( 'ERROR! ' // trim ( adjustl ( loc // txt )), unit = u , iostat = iostatd , iomsg = iomsgd ) if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine end module","tags":"","loc":"sourcefile/errormessages.f90.html","title":"ErrorMessages.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterentrydictionary.f90~~EfferentGraph sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~parameterentrydictionary.f90~~AfferentGraph sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ParameterEntryDictionary Source Code ParameterEntryDictionary.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- !----------------------------------------------------------------- ! ParameterEntryDictionary is a datatype containing a Database ! array of ParameterListEntries made to store diferent Entries ! depending on the hash of its Key. ! ! This work takes as a starting point the previou work of ! Stefano Zaghi (@szaghi, https://github.com/szaghi). ! ! You can find the original source at: ! https://github.com/szaghi/OFF/blob/95691ca15e6d68128ba016e40df74e42123f1c54/src/Data_Type_Hash_Table.f90 !----------------------------------------------------------------- module ParameterEntryDictionary USE ParameterEntry USE ParameterRootEntry USE PENF , only : I4P , str implicit None private integer ( I4P ), parameter :: DefaultDataBaseSize = 100_I4P type :: ParameterEntryDictionary_t private type ( ParameterRootEntry_t ), allocatable :: DataBase (:) integer ( I4P ) :: Size = 0_I4P contains private procedure , non_overridable :: Hash => ParameterEntryDictionary_Hash procedure , non_overridable , public :: Init => ParameterEntryDictionary_Init procedure , non_overridable , public :: Set => ParameterEntryDictionary_Set procedure , non_overridable , public :: Get => ParameterEntryDictionary_Get procedure , non_overridable , public :: GetPointer => ParameterEntryDictionary_GetPointer procedure , non_overridable , public :: GetDatabase => ParameterEntryDictionary_GetDataBase procedure , non_overridable , public :: Del => ParameterEntryDictionary_Delete procedure , non_overridable , public :: IsPresent => ParameterEntryDictionary_IsPresent procedure , non_overridable , public :: Length => ParameterEntryDictionary_Length procedure , non_overridable , public :: Print => ParameterEntryDictionary_Print procedure , non_overridable , public :: Free => ParameterEntryDictionary_Free final :: ParameterEntryDictionary_Finalize end type public :: ParameterEntryDictionary_t contains function ParameterEntryDictionary_Hash ( this , Key ) result ( Hash ) !----------------------------------------------------------------- !< String hash function !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key integer ( I4P ) :: Hash !< Hash code character , dimension ( len ( Key )) :: CharArray !< Character array containing the Key integer ( I4P ) :: CharIterator !< Char iterator index !----------------------------------------------------------------- forall ( CharIterator = 1 : LEN ( Key )) CharArray ( CharIterator ) = Key ( CharIterator : CharIterator ) end forall Hash = MOD ( SUM ( ICHAR ( CharArray )), this % Size ) end function ParameterEntryDictionary_Hash subroutine ParameterEntryDictionary_Init ( this , Size ) !----------------------------------------------------------------- !< Allocate the database with a given Szie of DefaultDataBaseSize !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( INOUT ) :: this !< Parameter Entry Dictionary integer ( I4P ), optional , intent ( IN ) :: Size !< DataBase Size !----------------------------------------------------------------- call this % Free () if ( present ( Size )) then this % Size = Size else this % Size = DefaultDataBaseSize endif allocate ( this % DataBase ( 0 : this % Size - 1 )) end subroutine ParameterEntryDictionary_Init function ParameterEntryDictionary_isPresent ( this , Key ) result ( isPresent ) !----------------------------------------------------------------- !< Check if a Key is present in the DataBase !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key logical :: isPresent !< Boolean flag to check if a Key is present !----------------------------------------------------------------- isPresent = this % DataBase ( this % Hash ( Key = Key ))% isPresent ( Key = Key ) end function ParameterEntryDictionary_isPresent subroutine ParameterEntryDictionary_Set ( this , Key , Value ) !----------------------------------------------------------------- !< Set a Key/Value pair into the DataBase !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( INOUT ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( IN ) :: Value !< Value !----------------------------------------------------------------- call this % DataBase ( this % Hash ( Key = Key ))% AddEntry ( Key = Key , Value = Value ) end subroutine ParameterEntryDictionary_Set subroutine ParameterEntryDictionary_Get ( this , Key , Value ) !----------------------------------------------------------------- !< Return a Value given the Key !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), allocatable , intent ( INOUT ) :: Value !< Returned value class ( ParameterEntry_t ), pointer :: Entry !< Pointer to a Parameter List !----------------------------------------------------------------- Entry => this % DataBase ( this % Hash ( Key = Key ))% GetEntry ( Key = Key ) if ( associated ( Entry )) call Entry % GetValue ( Value = Value ) end subroutine ParameterEntryDictionary_Get subroutine ParameterEntryDictionary_GetPointer ( this , Key , Value ) !----------------------------------------------------------------- !< Return a Value given the Key !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key class ( * ), pointer , intent ( INOUT ) :: Value !< Returned value class ( ParameterEntry_t ), pointer :: Entry !< Pointer to a Parameter List integer ( I4P ) :: Hash !< Hash code corresponding to Key !----------------------------------------------------------------- Entry => this % DataBase ( this % Hash ( Key = Key ))% GetEntry ( Key = Key ) if ( associated ( Entry )) Value => Entry % PointToValue () end subroutine ParameterEntryDictionary_GetPointer function ParameterEntryDictionary_GetDataBase ( this ) result ( Database ) !----------------------------------------------------------------- !< Return a pointer to a Dictionary Database !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), target , intent ( IN ) :: this !< Parameter Entry Dictionary type ( ParameterRootEntry_t ), pointer :: Database (:) !< Dictionary Database !----------------------------------------------------------------- DataBase => this % Database end function ParameterEntryDictionary_GetDataBase subroutine ParameterEntryDictionary_Delete ( this , Key ) !----------------------------------------------------------------- !< Remove an Entry given a Key !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( INOUT ) :: this !< Parameter Entry Dictionary character ( len =* ), intent ( IN ) :: Key !< String Key !----------------------------------------------------------------- call this % DataBase ( this % Hash ( Key = Key ))% RemoveEntry ( Key = Key ) end subroutine ParameterEntryDictionary_Delete function ParameterEntryDictionary_Length ( this ) result ( Length ) !----------------------------------------------------------------- !< Return the number of ParameterListEntries contained in the DataBase !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Parameter Entry Dictionary integer ( I4P ) :: Length !< Number of parameters in database integer ( I4P ) :: DBIterator !< Database Iterator index !----------------------------------------------------------------- Length = 0 if ( allocated ( this % DataBase )) THEN do DBIterator = lbound ( this % DataBase , dim = 1 ), ubound ( this % DataBase , dim = 1 ) Length = Length + this % DataBase ( DBIterator )% Length () enddo endif end function ParameterEntryDictionary_Length subroutine ParameterentryDictionary_Free ( this ) !----------------------------------------------------------------- !< Free ParameterListEntries and the DataBase !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( INOUT ) :: this !< Parameter Entry Dictionary integer ( I4P ) :: DBIterator !< Database Iterator index !----------------------------------------------------------------- if ( allocated ( this % DataBase )) THEN do DBIterator = lbound ( this % DataBase , dim = 1 ), ubound ( this % DataBase , dim = 1 ) call this % DataBase ( DBIterator )% Free () enddo deallocate ( this % DataBase ) endif this % Size = 0_I4P end subroutine ParameterEntryDictionary_Free subroutine ParameterEntryDictionary_Finalize ( this ) !----------------------------------------------------------------- !< Destructor procedure !----------------------------------------------------------------- type ( ParameterEntryDictionary_t ), intent ( INOUT ) :: this !< Parameter Entry Dictionary !----------------------------------------------------------------- call this % Free () end subroutine ParameterEntryDictionary_Finalize subroutine ParameterEntryDictionary_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the content of the DataBase !----------------------------------------------------------------- class ( ParameterEntryDictionary_t ), intent ( IN ) :: this !< Linked List integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. integer ( I4P ) :: DBIter !< Database iterator !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix if ( allocated ( this % DataBase )) then do DBIter = lbound ( this % DataBase , dim = 1 ), ubound ( this % DataBase , dim = 1 ) call this % DataBase ( DBIter )% Print ( unit = unit , & prefix = prefd // '  [' // trim ( str ( no_sign = . true ., n = DBIter )) // '] ' , & iostat = iostatd , iomsg = iomsgd ) enddo endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine ParameterEntryDictionary_Print end module ParameterEntryDictionary","tags":"","loc":"sourcefile/parameterentrydictionary.f90.html","title":"ParameterEntryDictionary.f90 â FPL"},{"text":"Files Dependent On This One sourcefile~~fpl_utils.f90~~AfferentGraph sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilefpl_utilsf90AfferentGraph = svgPanZoom('#sourcefilefpl_utilsf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules FPL_Utils Source Code FPL_utils.f90 Source Code module FPL_Utils USE PENF , only : I1P , I4P contains elemental function byte_size_logical ( l ) result ( bytes ) !----------------------------------------------------------------- !< Procedure for computing the number of bytes of a logical variable. !----------------------------------------------------------------- logical , intent ( IN ) :: l !< Character variable whose number of bits must be computed. integer ( I4P ) :: bytes !< Number of bits of l. integer ( I1P ) :: mold ( 1 ) !< \"Molding\" dummy variable for bits counting. !----------------------------------------------------------------- bytes = size ( transfer ( l , mold ), dim = 1 , kind = I1P ) return end function byte_size_logical end module FPL_Utils","tags":"","loc":"sourcefile/fpl_utils.f90.html","title":"FPL_utils.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterrootentry.f90~~EfferentGraph sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~parameterrootentry.f90~~AfferentGraph sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefileparameterrootentryf90AfferentGraph = svgPanZoom('#sourcefileparameterrootentryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules ParameterRootEntry Source Code ParameterRootEntry.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module ParameterRootEntry USE ParameterEntry USE PENF , only : I4P , str implicit none private type :: ParameterRootEntry_t private type ( ParameterEntry_t ), pointer :: Root => null () contains private procedure , non_overridable :: Init => ParameterRootEntry_Init procedure , non_overridable , public :: HasRoot => ParameterRootEntry_HasRoot procedure , non_overridable :: SetRoot => ParameterRootEntry_SetRoot procedure , non_overridable , public :: GetRoot => ParameterRootEntry_GetRoot procedure , non_overridable :: NullifyRoot => ParameterRootEntry_NullifyRoot procedure , non_overridable :: DeallocateRoot => ParameterRootEntry_DeallocateRoot procedure , non_overridable , public :: GetEntry => ParameterRootEntry_GetEntry procedure , non_overridable , public :: GetPreviousEntry => ParameterRootEntry_GetPreviousEntry procedure , non_overridable , public :: Print => ParameterRootEntry_Print procedure , non_overridable , public :: isPresent => ParameterRootEntry_isPresent procedure , non_overridable , public :: Length => ParameterRootEntry_Length procedure , non_overridable , public :: RemoveEntry => ParameterRootEntry_RemoveEntry procedure , non_overridable , public :: AddEntry => ParameterRootEntry_AddEntry procedure , non_overridable , public :: GetIterator => ParameterRootEntry_GetIterator procedure , non_overridable , public :: Free => ParameterRootEntry_Free final :: ParameterRootEntry_Finalize end type public :: ParameterRootEntry_T contains subroutine ParameterRootEntry_SetRoot ( this , Root ) !----------------------------------------------------------------- !< Set the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry class ( ParameterEntry_t ), pointer , intent ( IN ) :: Root !< Parameter Entry correspoing to the head of the list !----------------------------------------------------------------- this % Root => Root end subroutine ParameterRootEntry_SetRoot function ParameterRootEntry_GetRoot ( this ) result ( Root ) !----------------------------------------------------------------- !< Return a pointer to the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry class ( ParameterEntry_t ), pointer :: Root !< Parameter Entry correspoing to the head of the list !----------------------------------------------------------------- Root => this % Root end function ParameterRootEntry_GetRoot function ParameterRootEntry_HasRoot ( this ) result ( HasRoot ) !----------------------------------------------------------------- !< Return a pointer to the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry logical :: hasRoot !< Check if Root is associated !----------------------------------------------------------------- hasRoot = associated ( this % GetRoot ()) end function ParameterRootEntry_HasRoot subroutine ParameterRootEntry_NullifyRoot ( this ) !----------------------------------------------------------------- !< Set the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry !----------------------------------------------------------------- nullify ( this % Root ) end subroutine ParameterRootEntry_NullifyRoot subroutine ParameterRootEntry_DeallocateRoot ( this ) !----------------------------------------------------------------- !< Set the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry !----------------------------------------------------------------- if ( this % HasRoot ()) then call this % Root % Free () deallocate ( this % Root ) endif end subroutine ParameterRootEntry_DeallocateRoot subroutine ParameterRootEntry_Init ( this , Key , Value ) !----------------------------------------------------------------- !< Initialize the Root of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry character ( len =* ), intent ( IN ) :: Key !< Key (unique) of the current node. class ( * ), pointer , intent ( IN ) :: Value !< Parameter Entry Value !----------------------------------------------------------------- if (. not . this % HasRoot ()) allocate ( ParameterEntry_t :: this % Root ) call this % Root % SetKey ( Key = Key ) call this % Root % SetValue ( Value = Value ) end subroutine ParameterRootEntry_Init function ParameterRootEntry_IsPresent ( this , Key ) result ( isPresent ) !----------------------------------------------------------------- !< Check if a Key is present in the List !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry character ( len =* ), intent ( IN ) :: Key !< String Key logical :: isPresent !< Boolean flag to check if a Key is present !----------------------------------------------------------------- isPresent = associated ( this % GetEntry ( Key )) end function ParameterRootEntry_IsPresent subroutine ParameterRootEntry_AddEntry ( this , Key , Value ) !----------------------------------------------------------------- !< Add a new Node if key does not Exist !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry character ( len =* ), intent ( IN ) :: Key !< Key (unique) of the current node. class ( * ), pointer , intent ( IN ) :: Value !< Parameter Entry Value class ( ParameterEntry_t ), pointer :: NextEntry !< Parameter Entry class ( ParameterEntry_t ), pointer :: NewEntry !< New Parameter Entry character ( len = :), allocatable :: NextEntryKey !< Key of the NextEntry !----------------------------------------------------------------- if (. not . this % HasRoot ()) then call this % Init ( Key = Key , Value = Value ) else NextEntry => this % GetRoot () do while ( associated ( NextEntry )) NExtEntryKey = NextEntry % GetKey () if ( NextEntryKey /= Key ) then if (. not . NextEntry % hasNext ()) then ! I reached the end of the list allocate ( ParameterEntry_t :: NewEntry ) call NewEntry % SetKey ( Key = Key ) call NewEntry % SetValue ( Value = Value ) call NextEntry % SetNext ( NExt = NewEntry ) exit else NextEntry => NextEntry % GetNext () endif else call NextEntry % SetValue ( Value = Value ) exit endif enddo if ( allocated ( NextEntryKey )) deallocate ( NextEntryKey ) endif end subroutine ParameterRootEntry_AddEntry subroutine ParameterRootEntry_RemoveEntry ( this , Key ) !----------------------------------------------------------------- !< Remove an Entry given a Key !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry character ( len =* ), intent ( IN ) :: Key !< String Key character ( len = :), allocatable :: CurrentEntryKey !< Current Entry Key class ( ParameterEntry_t ), pointer :: PreviousEntry !< The Previous Entry of a given key class ( ParameterEntry_t ), pointer :: CurrentEntry !< Entry of a given key class ( ParameterEntry_t ), pointer :: NextEntry !< The Next Entry of a given key !----------------------------------------------------------------- if ( this % HasRoot ()) then CurrentEntry => this % GetRoot () CurrentEntryKey = CurrentEntry % GetKey () if ( CurrentEntryKey == Key ) then NextEntry => CurrentEntry % GetNext () call CurrentEntry % DeallocateKey () call CurrentEntry % DeallocateValue () call CurrentEntry % NullifyNext () deallocate ( CurrentEntry ) call this % NullifyRoot () if ( allocated ( CurrentEntryKey )) deallocate ( CurrentEntryKey ) else PreviousEntry => this % GetPreviousEntry ( Key = Key ) if ( associated ( PreviousEntry )) then CurrentEntry => PreviousEntry % GetNext () NextEntry => CurrentEntry % GetNext () call CurrentEntry % DeallocateKey () call CurrentEntry % DeallocateValue () call CurrentEntry % NullifyNext () deallocate ( CurrentEntry ) call PreviousEntry % NullifyNext () if ( associated ( NextEntry )) call PreviousEntry % SetNext ( Next = NextEntry ) endif endif if ( associated ( NextEntry )) call this % SetRoot ( Root = NextEntry ) endif end subroutine ParameterRootEntry_RemoveEntry function ParameterRootEntry_GetEntry ( this , Key ) result ( Entry ) !----------------------------------------------------------------- !< Return a pointer to a ParameterEntry given a Key !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry character ( len =* ), intent ( IN ) :: Key !< String Key class ( ParameterEntry_t ), pointer :: Entry !< Parameter Entry character ( len = :), allocatable :: EntryKey !< Entry Key !----------------------------------------------------------------- Entry => this % GetRoot () do while ( associated ( Entry )) EntryKey = Entry % GetKey () if ( EntryKey == Key ) exit Entry => Entry % GetNext () enddo if ( allocated ( EntryKey )) deallocate ( EntryKey ) end function ParameterrootEntry_GetEntry function ParameterRootEntry_GetPreviousEntry ( this , Key ) result ( PreviousEntry ) !----------------------------------------------------------------- !< Return a pointer to the provious node of a Parameter List given a Key !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter List character ( len =* ), intent ( IN ) :: Key !< String Key class ( ParameterEntry_t ), pointer :: PreviousEntry !< Parameter List Entry class ( ParameterEntry_t ), pointer :: NextEntry !< Parameter List Next Entry character ( len = :), allocatable :: NExtEntryKey !< NextEntry Key !----------------------------------------------------------------- PreviousEntry => this % GetRoot () do while ( associated ( PreviousEntry )) if ( PreviousEntry % HasNext ()) then NextEntry => PreviousEntry % GetNext () NextEntryKey = NextEntry % GetKey () if ( NextEntryKey == Key ) then exit else PreviousEntry => NextEntry endif else nullify ( PreviousEntry ) exit endif enddo if ( allocated ( NextEntryKey )) deallocate ( NextEntryKey ) end function ParameterRootEntry_GetPreviousEntry function ParameterRootEntry_Length ( this ) result ( Length ) !----------------------------------------------------------------- !< Return the length of the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry integer ( I4P ) :: Length !< Length of the list type ( ParameterEntry_t ), pointer :: NextEntry !< Next Parameter Entry !----------------------------------------------------------------- Length = 0 NextEntry => this % GetRoot () do while ( associated ( NextEntry )) Length = Length + 1 NextEntry => NextEntry % GetNext () enddo nullify ( NextEntry ) end function ParameterRootEntry_Length subroutine ParameterRootEntry_Free ( this ) !----------------------------------------------------------------- !< Free the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry class ( ParameterEntry_t ), pointer :: Current !< Current Parameter List Node class ( ParameterEntry_t ), pointer :: Next !< Next Parameter List Node !----------------------------------------------------------------- do while ( this % HasRoot ()) Next => this % Root % GetNext () call this % Root % Free () call this % DeallocateRoot () call this % SetRoot ( Root = Next ) enddo end subroutine ParameterRootEntry_Free function ParameterRootEntry_GetIterator ( this ) result ( Iterator ) !----------------------------------------------------------------- !< Free the list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter Root Entry type ( EntryListIterator_t ) :: Iterator !< List iterator !----------------------------------------------------------------- call Iterator % Init ( Entry = this % Root ) end function ParameterRootEntry_GetIterator subroutine ParameterRootEntry_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the keys/value pair contained in the parameter list !----------------------------------------------------------------- class ( ParameterRootEntry_t ), intent ( IN ) :: this !< Parameter Root Entry integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. class ( ParameterEntry_t ), pointer :: NextEntry !< Pointer for scanning the list. !----------------------------------------------------------------- iostatd = 0 ; iomsgd = '' ; prefd = '' ; if ( present ( prefix )) prefd = prefix if ( this % HasRoot ()) then NextEntry => this % GetRoot () do while ( associated ( NextEntry )) call NextEntry % Print ( unit = unit , prefix = prefix , iostat = iostatd , iomsg = iomsgd ) NextEntry => NextEntry % GetNext () enddo endif if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine ParameterRootEntry_Print subroutine ParameterRootEntry_Finalize ( this ) !----------------------------------------------------------------- !< Finalize procedure !----------------------------------------------------------------- type ( ParameterRootEntry_t ), intent ( INOUT ) :: this !< Parameter List !----------------------------------------------------------------- call this % Free () end subroutine ParameterRootEntry_Finalize end module ParameterRootEntry","tags":"","loc":"sourcefile/parameterrootentry.f90.html","title":"ParameterRootEntry.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist.f90~~EfferentGraph sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~wrapperfactorylist.f90~~AfferentGraph sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilewrapperfactorylistf90AfferentGraph = svgPanZoom('#sourcefilewrapperfactorylistf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules WrapperFactoryList Source Code WrapperFactoryList.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module WrapperFactoryList USE PENF , only : I4P USE WrapperFactory implicit none private type , public :: WrapperFactoryList_t private character ( len = :), allocatable :: Key class ( WrapperFactory_t ), pointer :: Value => null () class ( WrapperFactoryList_t ), public , pointer :: Next => null () contains private procedure , non_overridable , public :: HasNext => WrapperFactoryList_HasNext procedure , non_overridable , public :: SetNext => WrapperFactoryList_SetNext procedure , non_overridable , public :: GetNext => WrapperFactoryList_GetNext procedure , non_overridable , public :: NullifyNext => WrapperFactoryList_NullifyNext procedure , non_overridable , public :: HasKey => WrapperFactoryList_HasKey procedure , non_overridable , public :: SetKey => WrapperFactoryList_SetKey procedure , non_overridable , public :: GetKey => WrapperFactoryList_GetKey procedure , non_overridable , public :: DeallocateKey => WrapperFactoryList_DeallocateKey procedure , non_overridable , public :: HasValue => WrapperFactoryList_HasValue procedure , non_overridable , public :: SetValue => WrapperFactoryList_SetValue procedure , non_overridable , public :: GetValue => WrapperFactoryList_GetValue procedure , non_overridable , public :: Free => WrapperFactoryList_Free procedure , non_overridable , public :: AddWrapperFactory => WrapperFactoryList_AddWrapperFactory procedure , non_overridable , public :: Print => WrapperFactoryList_Print procedure , non_overridable :: WrapperFactoryList_GetFactory0D procedure , non_overridable :: WrapperFactoryList_GetFactory1D procedure , non_overridable :: WrapperFactoryList_GetFactory2D procedure , non_overridable :: WrapperFactoryList_GetFactory3D procedure , non_overridable :: WrapperFactoryList_GetFactory4D procedure , non_overridable :: WrapperFactoryList_GetFactory5D procedure , non_overridable :: WrapperFactoryList_GetFactory6D procedure , non_overridable :: WrapperFactoryList_GetFactory7D generic , public :: GetFactory => WrapperFactoryList_GetFactory0D , & WrapperFactoryList_GetFactory1D , & WrapperFactoryList_GetFactory2D , & WrapperFactoryList_GetFactory3D , & WrapperFactoryList_GetFactory4D , & WrapperFactoryList_GetFactory5D , & WrapperFactoryList_GetFactory6D , & WrapperFactoryList_GetFactory7D final :: WrapperFactoryList_Finalize end type WrapperFactoryList_t contains function WrapperFactoryList_HasNext ( this ) result ( hasNext ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List logical :: hasNext !< Check if Next is associated !----------------------------------------------------------------- hasNext = associated ( this % Next ) end function WrapperFactoryList_HasNext subroutine WrapperFactoryList_SetNext ( this , Next ) !----------------------------------------------------------------- !< Set the pointer to the Next node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List class ( WrapperFactoryList_t ), target , intent ( IN ) :: Next !< Pointer to Next !----------------------------------------------------------------- this % Next => Next end subroutine WrapperFactoryList_SetNext function WrapperFactoryList_GetNext ( this ) result ( Next ) !----------------------------------------------------------------- !< Return a pointer to the Next node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( WrapperFactoryList_t ), pointer :: Next !< Pointer to Next !----------------------------------------------------------------- nullify ( Next ) if ( this % HasNext ()) Next => this % Next end function WrapperFactoryList_GetNext subroutine WrapperFactoryList_NullifyNext ( this ) !----------------------------------------------------------------- !< Nullify Next !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List !----------------------------------------------------------------- nullify ( this % Next ) end subroutine WrapperFactoryList_NullifyNext function WrapperFactoryList_HasKey ( this ) result ( hasKey ) !----------------------------------------------------------------- !< Check if Key is allocated for the current Node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List logical :: hasKey !< Check if Key is associated !----------------------------------------------------------------- hasKey = allocated ( this % Key ) end function WrapperFactoryList_HasKey subroutine WrapperFactoryList_SetKey ( this , Key ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List character ( len =* ), intent ( IN ) :: Key !< Key !----------------------------------------------------------------- if ( this % HasKey ()) deallocate ( this % Key ) allocate ( this % Key , source = Key ) end subroutine WrapperFactoryList_SetKey function WrapperFactoryList_GetKey ( this ) result ( Key ) !----------------------------------------------------------------- !< Check if Next is associated for the current Node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List character ( len = :), allocatable :: Key !< Key !----------------------------------------------------------------- !if(this%HasKey()) allocate ( Key , source = this % Key ) end function WrapperFactoryList_GetKey subroutine WrapperFactoryList_DeallocateKey ( this ) !----------------------------------------------------------------- !< Deallocate Key if allocated !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List !----------------------------------------------------------------- if ( this % HasKey ()) deallocate ( this % Key ) end subroutine WrapperFactoryList_DeallocateKey function WrapperFactoryList_HasValue ( this ) result ( hasValue ) !----------------------------------------------------------------- !< Check if Value is allocated for the current Node !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List logical :: hasValue !< Check if Value is allocated !----------------------------------------------------------------- hasValue = associated ( this % Value ) end function WrapperFactoryList_HasValue subroutine WrapperFactoryList_SetValue ( this , Value ) !----------------------------------------------------------------- !< Return a concrete WrapperFactory !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List class ( WrapperFactory_t ), target , intent ( IN ) :: Value !< Concrete WrapperFactory !----------------------------------------------------------------- this % Value => Value end subroutine WrapperFactoryList_SetValue subroutine WrapperFactoryList_GetValue ( this , Value ) !----------------------------------------------------------------- !< Return a concrete WrapperFactory !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( WrapperFactory_t ), pointer , intent ( OUT ) :: Value !< Concrete WrapperFactory pointer !----------------------------------------------------------------- nullify ( Value ) if ( this % HasValue ()) Value => this % Value end subroutine WrapperFactoryList_GetValue recursive subroutine WrapperFactoryList_Free ( this ) !----------------------------------------------------------------- !< Free the list !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List class ( WrapperFactoryList_t ), pointer :: Next !< Wrapper Factory List Node !----------------------------------------------------------------- if ( this % HasNext ()) then Next => this % GetNext () call Next % Free () deallocate ( Next ) nullify ( Next ) endif if ( this % HasKey ()) deallocate ( this % Key ) nullify ( this % Next ) nullify ( this % Value ) end subroutine WrapperFactoryList_Free recursive subroutine WrapperFactoryList_Finalize ( this ) !----------------------------------------------------------------- !< Finalize procedure !----------------------------------------------------------------- type ( WrapperFactoryList_t ), intent ( INOUT ) :: this !< Wrapper Factory List !----------------------------------------------------------------- call this % Free () end subroutine WrapperFactoryList_Finalize recursive subroutine WrapperFactoryList_AddWrapperFactory ( this , Key , WrapperFactory ) !----------------------------------------------------------------- !< Add a new Node if key does not Exist !----------------------------------------------------------------- class ( WrapperFactoryList_T ), intent ( INOUT ) :: this !< Wrapper Factory List character ( len =* ), intent ( IN ) :: Key !< Key (unique) of the current node. class ( WrapperFactory_t ), target , intent ( IN ) :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- if ( this % HasKey ()) then if ( this % GetKey () /= Key ) then if (. not . this % hasNext ()) then allocate ( WrapperFactoryList_t :: this % Next ) select type ( Next => this % Next ) type is ( WrapperFactoryList_t ) call Next % AddWrapperFactory ( Key = Key , WrapperFactory = WrapperFactory ) end select else select type ( Next => this % Next ) type is ( WrapperFactoryList_t ) call Next % AddWrapperFactory ( Key = Key , WrapperFactory = WrapperFactory ) end select endif else call this % SetValue ( Value = WrapperFactory ) endif else call this % SetKey ( Key = Key ) call this % SetValue ( Value = WrapperFactory ) endif end subroutine WrapperFactoryList_AddWrapperFactory recursive function WrapperFactoryList_GetFactory0D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value )) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory0D recursive function WrapperFactoryList_GetFactory1D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory1D recursive function WrapperFactoryList_GetFactory2D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory2D recursive function WrapperFactoryList_GetFactory3D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory3D recursive function WrapperFactoryList_GetFactory4D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 , 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory4D recursive function WrapperFactoryList_GetFactory5D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 , 1 , 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory5D recursive function WrapperFactoryList_GetFactory6D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory6D recursive function WrapperFactoryList_GetFactory7D ( this , Value ) result ( WrapperFactory ) !----------------------------------------------------------------- !< Return a WrapperFactory given a value !----------------------------------------------------------------- class ( WrapperFactoryList_t ), intent ( IN ) :: this !< Wrapper Factory List class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) !< Polymorphic Mold class ( WrapperFactory_t ), pointer :: WrapperFactory !< Wrapper Factory !----------------------------------------------------------------- nullify ( WrapperFactory ) if ( this % HasKey () . and . this % HasValue ()) then if ( this % Value % HasSameType ( Value = Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then WrapperFactory => this % Value elseif ( this % HasNext ()) then select type ( Next => this % Next ) type is ( WrapperFactoryList_T ) WrapperFactory => Next % GetFactory ( Value = Value ) end select endif endif end function WrapperFactoryList_GetFactory7D subroutine WrapperFactoryList_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print the keys contained in the list !----------------------------------------------------------------- class ( WrapperFactoryList_t ), target , intent ( IN ) :: this !< Wrapper Factory List integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. class ( WrapperFactoryList_T ), pointer :: Node !< Pointer for scanning the list. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix Node => this write ( * , fmt = '(A)' ) prefd // ' WRAPPER FACTORY LIST KEYS:' do while ( Node % HasKey ()) write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // '   Key = ' // Node % GetKey () if ( Node % HasNExt ()) then Node => Node % GetNext () else exit endif enddo if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine WrapperFactoryList_Print end module WrapperFactoryList","tags":"","loc":"sourcefile/wrapperfactorylist.f90.html","title":"WrapperFactoryList.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylistsingleton.f90~~EfferentGraph sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylistsingletonf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylistsingletonf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~wrapperfactorylistsingleton.f90~~AfferentGraph sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilewrapperfactorylistsingletonf90AfferentGraph = svgPanZoom('#sourcefilewrapperfactorylistsingletonf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules WrapperFactoryListSingleton Source Code WrapperFactoryListSingleton.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module WrapperFactoryListSingleton USE WrapperFactoryList USE DLCAWrapperFactory USE I1PWrapperFactory USE I2PWrapperFactory USE I4PWrapperFactory USE I8PWrapperFactory USE LWrapperFactory USE R4PWrapperFactory USE R8PWrapperFactory implicit none private type ( WrapperFactoryList_t ) :: TheWrapperFactoryList public :: TheWrapperFactoryList public :: TheWrapperFactoryList_Init contains subroutine TheWrapperFactoryList_Init () !----------------------------------------------------------------- !< Set the dimensions of the Value contained in the wrapper !----------------------------------------------------------------- ! Add some Wrapper Factories to the list call TheWrapperFactoryList % AddWrapperFactory ( key = 'I1P' , WrapperFactory = WrapperFactoryI1P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I2P' , WrapperFactory = WrapperFactoryI2P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I4P' , WrapperFactory = WrapperFactoryI4P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I8P' , WrapperFactory = WrapperFactoryI8P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'R4P' , WrapperFactory = WrapperFactoryR4P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'R8P' , WrapperFactory = WrapperFactoryR8P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'L' , WrapperFactory = WrapperFactoryL ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'DLCA' , WrapperFactory = WrapperFactoryDLCA ) end subroutine TheWrapperFactoryList_Init end module WrapperFactoryListSingleton","tags":"","loc":"sourcefile/wrapperfactorylistsingleton.f90.html","title":"WrapperFactoryListSingleton.f90 â FPL"},{"text":"Files Dependent On This One sourcefile~~dimensionswrapper.f90~~AfferentGraph sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~circlewrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 var pansourcefiledimensionswrapperf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapperf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper Source Code DimensionsWrapper.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper USE PENF , only : I1P , I4P , str implicit none private type , abstract :: DimensionsWrapper_t private integer ( I1P ) :: Dimensions = - 1 contains private procedure , public :: SetDimensions => DimensionsWrapper_SetDimensions procedure , public :: GetDimensions => DimensionsWrapper_GetDimensions procedure , public :: Print => DimensionsWrapper_Print procedure ( DimensionsWrapper_isOfDataType ), public , deferred :: isOfDataType procedure ( DimensionsWrapper_DataSizeInBytes ), public , deferred :: DataSizeInBytes procedure ( DimensionsWrapper_Free ), public , deferred :: Free procedure ( DimensionsWrapper_GetShape ), public , deferred :: GetShape procedure ( DimensionsWrapper_toString ), public , deferred :: toString end type abstract interface subroutine DimensionsWrapper_Free ( this ) import DimensionsWrapper_t class ( DimensionsWrapper_t ), intent ( INOUT ) :: this end subroutine function DimensionsWrapper_isOfDataType ( this , Mold ) result ( isOfDataType ) import DimensionsWrapper_t class ( DimensionsWrapper_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Mold logical :: isOfDataType end function function DimensionsWrapper_DataSizeInBytes ( this ) result ( DataSizeInBytes ) import DimensionsWrapper_t import I4P class ( DimensionsWrapper_t ), intent ( IN ) :: this integer ( I4P ) :: DataSizeInBytes end function subroutine DimensionsWrapper_GetShape ( this , ValueShape ) import DimensionsWrapper_t import I4P class ( DimensionsWrapper_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) end subroutine function DimensionsWrapper_toString ( this , Separator ) result ( String ) import DimensionsWrapper_t import I4P class ( DimensionsWrapper_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String end function end interface public :: DimensionsWrapper_t contains subroutine DimensionsWrapper_SetDimensions ( this , Dimensions ) !----------------------------------------------------------------- !< Set the dimensions of the Value contained in the wrapper !----------------------------------------------------------------- class ( DimensionsWrapper_t ), intent ( INOUT ) :: this integer ( I1P ), intent ( IN ) :: Dimensions !----------------------------------------------------------------- this % Dimensions = Dimensions end subroutine function DimensionsWrapper_GetDimensions ( this ) result ( Dimensions ) !----------------------------------------------------------------- !< Get the dimensions of the Value contained in the wrapper !----------------------------------------------------------------- class ( DimensionsWrapper_t ), intent ( IN ) :: this !----------------------------------------------------------------- integer ( I1P ) :: Dimensions Dimensions = this % Dimensions end function subroutine DimensionsWrapper_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Generic Wrapper Print !----------------------------------------------------------------- class ( DimensionsWrapper_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = -, ' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper_Print end module DimensionsWrapper","tags":"","loc":"sourcefile/dimensionswrapper.f90.html","title":"DimensionsWrapper.f90 â FPL"},{"text":"This File Depends On sourcefile~~i1pwrapperfactory.f90~~EfferentGraph sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 var pansourcefilei1pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefilei1pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~i1pwrapperfactory.f90~~AfferentGraph sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilei1pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilei1pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules I1PWrapperFactory Source Code I1PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module I1PWrapperFactory USE WrapperFactory USE PENF , only : I1P USE DimensionsWrapper USE DimensionsWrapper0D_I1P USE DimensionsWrapper1D_I1P USE DimensionsWrapper2D_I1P USE DimensionsWrapper3D_I1P USE DimensionsWrapper4D_I1P USE DimensionsWrapper5D_I1P USE DimensionsWrapper6D_I1P USE DimensionsWrapper7D_I1P implicit none private type , extends ( WrapperFactory_t ) :: I1PWrapperFactory_t private contains procedure :: Wrap0D => I1PWrapperFactory_Wrap0D procedure :: Wrap1D => I1PWrapperFactory_Wrap1D procedure :: Wrap2D => I1PWrapperFactory_Wrap2D procedure :: Wrap3D => I1PWrapperFactory_Wrap3D procedure :: Wrap4D => I1PWrapperFactory_Wrap4D procedure :: Wrap5D => I1PWrapperFactory_Wrap5D procedure :: Wrap6D => I1PWrapperFactory_Wrap6D procedure :: Wrap7D => I1PWrapperFactory_Wrap7D procedure :: UnWrap0D => I1PWrapperFactory_UnWrap0D procedure :: UnWrap1D => I1PWrapperFactory_UnWrap1D procedure :: UnWrap2D => I1PWrapperFactory_UnWrap2D procedure :: UnWrap3D => I1PWrapperFactory_UnWrap3D procedure :: UnWrap4D => I1PWrapperFactory_UnWrap4D procedure :: UnWrap5D => I1PWrapperFactory_UnWrap5D procedure :: UnWrap6D => I1PWrapperFactory_UnWrap6D procedure :: UnWrap7D => I1PWrapperFactory_UnWrap7D procedure , public :: hasSameType => I1PWrapperFactory_hasSameType end type type ( I1PWrapperFactory_t ), public :: WrapperFactoryI1P contains function I1PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( integer ( I1P )) hasSameType = . true . end select end function I1PWrapperFactory_hasSameType function I1PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 0D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap0D function I1PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 1D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap1D function I1PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 2D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap2D function I1PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 3D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap3D function I1PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 4D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap4D function I1PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 5D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap5D function I1PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 6D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap6D function I1PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I1P 7D Wrapper !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_I1P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_I1P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I1PWrapperFactory_Wrap7D subroutine I1PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 0D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 1D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 2D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 3D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 4D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 5D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 6D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I1PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I1P 7D Wrapped Value !----------------------------------------------------------------- class ( I1PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_I1P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module I1PWrapperFactory","tags":"","loc":"sourcefile/i1pwrapperfactory.f90.html","title":"I1PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~r8pwrapperfactory.f90~~EfferentGraph sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 var pansourcefiler8pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefiler8pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~r8pwrapperfactory.f90~~AfferentGraph sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiler8pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefiler8pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules R8PWrapperFactory Source Code R8PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module R8PWrapperFactory USE WrapperFactory USE PENF , only : I1P , R8P USE DimensionsWrapper USE DimensionsWrapper0D_R8P USE DimensionsWrapper1D_R8P USE DimensionsWrapper2D_R8P USE DimensionsWrapper3D_R8P USE DimensionsWrapper4D_R8P USE DimensionsWrapper5D_R8P USE DimensionsWrapper6D_R8P USE DimensionsWrapper7D_R8P implicit none private type , extends ( WrapperFactory_t ) :: R8PWrapperFactory_t private contains procedure :: Wrap0D => R8PWrapperFactory_Wrap0D procedure :: Wrap1D => R8PWrapperFactory_Wrap1D procedure :: Wrap2D => R8PWrapperFactory_Wrap2D procedure :: Wrap3D => R8PWrapperFactory_Wrap3D procedure :: Wrap4D => R8PWrapperFactory_Wrap4D procedure :: Wrap5D => R8PWrapperFactory_Wrap5D procedure :: Wrap6D => R8PWrapperFactory_Wrap6D procedure :: Wrap7D => R8PWrapperFactory_Wrap7D procedure :: UnWrap0D => R8PWrapperFactory_UnWrap0D procedure :: UnWrap1D => R8PWrapperFactory_UnWrap1D procedure :: UnWrap2D => R8PWrapperFactory_UnWrap2D procedure :: UnWrap3D => R8PWrapperFactory_UnWrap3D procedure :: UnWrap4D => R8PWrapperFactory_UnWrap4D procedure :: UnWrap5D => R8PWrapperFactory_UnWrap5D procedure :: UnWrap6D => R8PWrapperFactory_UnWrap6D procedure :: UnWrap7D => R8PWrapperFactory_UnWrap7D procedure , public :: hasSameType => R8PWrapperFactory_hasSameType end type type ( R8PWrapperFactory_t ), public :: WrapperFactoryR8P contains function R8PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( real ( R8P )) hasSameType = . true . end select end function R8PWrapperFactory_hasSameType function R8PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 0D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap0D function R8PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 1D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap1D function R8PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 2D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap2D function R8PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 3D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap3D function R8PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 4D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap4D function R8PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 5D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap5D function R8PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 6D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap6D function R8PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R8P 7D Wrapper !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_R8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_R8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R8PWrapperFactory_Wrap7D subroutine R8PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 0D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 1D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 2D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 3D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 4D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 5D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 6D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R8PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R8P 7D Wrapped Value !----------------------------------------------------------------- class ( R8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_R8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module R8PWrapperFactory","tags":"","loc":"sourcefile/r8pwrapperfactory.f90.html","title":"R8PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~i8pwrapperfactory.f90~~EfferentGraph sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 var pansourcefilei8pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefilei8pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~i8pwrapperfactory.f90~~AfferentGraph sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilei8pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilei8pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules I8PWrapperFactory Source Code I8PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module I8PWrapperFactory USE WrapperFactory USE PENF , only : I1P , I8P USE DimensionsWrapper USE DimensionsWrapper0D_I8P USE DimensionsWrapper1D_I8P USE DimensionsWrapper2D_I8P USE DimensionsWrapper3D_I8P USE DimensionsWrapper4D_I8P USE DimensionsWrapper5D_I8P USE DimensionsWrapper6D_I8P USE DimensionsWrapper7D_I8P implicit none private type , extends ( WrapperFactory_t ) :: I8PWrapperFactory_t private contains procedure :: Wrap0D => I8PWrapperFactory_Wrap0D procedure :: Wrap1D => I8PWrapperFactory_Wrap1D procedure :: Wrap2D => I8PWrapperFactory_Wrap2D procedure :: Wrap3D => I8PWrapperFactory_Wrap3D procedure :: Wrap4D => I8PWrapperFactory_Wrap4D procedure :: Wrap5D => I8PWrapperFactory_Wrap5D procedure :: Wrap6D => I8PWrapperFactory_Wrap6D procedure :: Wrap7D => I8PWrapperFactory_Wrap7D procedure :: UnWrap0D => I8PWrapperFactory_UnWrap0D procedure :: UnWrap1D => I8PWrapperFactory_UnWrap1D procedure :: UnWrap2D => I8PWrapperFactory_UnWrap2D procedure :: UnWrap3D => I8PWrapperFactory_UnWrap3D procedure :: UnWrap4D => I8PWrapperFactory_UnWrap4D procedure :: UnWrap5D => I8PWrapperFactory_UnWrap5D procedure :: UnWrap6D => I8PWrapperFactory_UnWrap6D procedure :: UnWrap7D => I8PWrapperFactory_UnWrap7D procedure , public :: hasSameType => I8PWrapperFactory_hasSameType end type type ( I8PWrapperFactory_t ), public :: WrapperFactoryI8P contains function I8PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( integer ( I8P )) hasSameType = . true . end select end function I8PWrapperFactory_hasSameType function I8PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 0D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap0D function I8PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 1D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap1D function I8PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 2D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap2D function I8PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 3D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap3D function I8PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 4D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap4D function I8PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 5D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap5D function I8PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 6D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap6D function I8PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I8P 7D Wrapper !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_I8P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_I8P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I8PWrapperFactory_Wrap7D subroutine I8PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 0D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 1D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 2D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 3D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 4D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 5D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 6D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I8PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I8P 7D Wrapped Value !----------------------------------------------------------------- class ( I8PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_I8P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module I8PWrapperFactory","tags":"","loc":"sourcefile/i8pwrapperfactory.f90.html","title":"I8PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~i2pwrapperfactory.f90~~EfferentGraph sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 var pansourcefilei2pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefilei2pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~i2pwrapperfactory.f90~~AfferentGraph sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilei2pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilei2pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules I2PWrapperFactory Source Code I2PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module I2PWrapperFactory USE WrapperFactory USE PENF , only : I1P , I2P USE DimensionsWrapper USE DimensionsWrapper0D_I2P USE DimensionsWrapper1D_I2P USE DimensionsWrapper2D_I2P USE DimensionsWrapper3D_I2P USE DimensionsWrapper4D_I2P USE DimensionsWrapper5D_I2P USE DimensionsWrapper6D_I2P USE DimensionsWrapper7D_I2P implicit none private type , extends ( WrapperFactory_t ) :: I2PWrapperFactory_t private contains procedure :: Wrap0D => I2PWrapperFactory_Wrap0D procedure :: Wrap1D => I2PWrapperFactory_Wrap1D procedure :: Wrap2D => I2PWrapperFactory_Wrap2D procedure :: Wrap3D => I2PWrapperFactory_Wrap3D procedure :: Wrap4D => I2PWrapperFactory_Wrap4D procedure :: Wrap5D => I2PWrapperFactory_Wrap5D procedure :: Wrap6D => I2PWrapperFactory_Wrap6D procedure :: Wrap7D => I2PWrapperFactory_Wrap7D procedure :: UnWrap0D => I2PWrapperFactory_UnWrap0D procedure :: UnWrap1D => I2PWrapperFactory_UnWrap1D procedure :: UnWrap2D => I2PWrapperFactory_UnWrap2D procedure :: UnWrap3D => I2PWrapperFactory_UnWrap3D procedure :: UnWrap4D => I2PWrapperFactory_UnWrap4D procedure :: UnWrap5D => I2PWrapperFactory_UnWrap5D procedure :: UnWrap6D => I2PWrapperFactory_UnWrap6D procedure :: UnWrap7D => I2PWrapperFactory_UnWrap7D procedure , public :: hasSameType => I2PWrapperFactory_hasSameType end type type ( I2PWrapperFactory_t ), public :: WrapperFactoryI2P contains function I2PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( integer ( I2P )) hasSameType = . true . end select end function I2PWrapperFactory_hasSameType function I2PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 0D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap0D function I2PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 1D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap1D function I2PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 2D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap2D function I2PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 3D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap3D function I2PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 4D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap4D function I2PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 5D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap5D function I2PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 6D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap6D function I2PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I2P 7D Wrapper !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_I2P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_I2P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I2PWrapperFactory_Wrap7D subroutine I2PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 0D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 1D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 2D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 3D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 4D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 5D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 6D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I2PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I2P 7D Wrapped Value !----------------------------------------------------------------- class ( I2PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_I2P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module I2PWrapperFactory","tags":"","loc":"sourcefile/i2pwrapperfactory.f90.html","title":"I2PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~lwrapperfactory.f90~~EfferentGraph sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilelwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefilelwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~lwrapperfactory.f90~~AfferentGraph sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilelwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilelwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules LWrapperFactory Source Code LWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module LWrapperFactory USE PENF , only : I1P USE WrapperFactory USE DimensionsWrapper USE DimensionsWrapper0D_L USE DimensionsWrapper1D_L USE DimensionsWrapper2D_L USE DimensionsWrapper3D_L USE DimensionsWrapper4D_L USE DimensionsWrapper5D_L USE DimensionsWrapper6D_L USE DimensionsWrapper7D_L implicit none private type , extends ( WrapperFactory_t ) :: LWrapperFactory_t private contains procedure :: Wrap0D => LWrapperFactory_Wrap0D procedure :: Wrap1D => LWrapperFactory_Wrap1D procedure :: Wrap2D => LWrapperFactory_Wrap2D procedure :: Wrap3D => LWrapperFactory_Wrap3D procedure :: Wrap4D => LWrapperFactory_Wrap4D procedure :: Wrap5D => LWrapperFactory_Wrap5D procedure :: Wrap6D => LWrapperFactory_Wrap6D procedure :: Wrap7D => LWrapperFactory_Wrap7D procedure :: UnWrap0D => LWrapperFactory_UnWrap0D procedure :: UnWrap1D => LWrapperFactory_UnWrap1D procedure :: UnWrap2D => LWrapperFactory_UnWrap2D procedure :: UnWrap3D => LWrapperFactory_UnWrap3D procedure :: UnWrap4D => LWrapperFactory_UnWrap4D procedure :: UnWrap5D => LWrapperFactory_UnWrap5D procedure :: UnWrap6D => LWrapperFactory_UnWrap6D procedure :: UnWrap7D => LWrapperFactory_UnWrap7D procedure , public :: hasSameType => LWrapperFactory_hasSameType end type type ( LWrapperFactory_t ), public :: WrapperFactoryL contains function LWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( logical ) hasSameType = . true . end select end function LWrapperFactory_hasSameType function LWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 0D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap0D function LWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 1D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap1D function LWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 2D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap2D function LWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 3D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap3D function LWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 4D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap4D function LWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 5D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap5D function LWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 6D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap6D function LWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create L 7D Wrapper !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_L_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_L_t ) call Wrapper % Set ( Value = Value ) end select endif end function LWrapperFactory_Wrap7D subroutine LWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 0D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 1D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 2D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 3D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 4D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 5D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 6D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine LWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the L 7D Wrapped Value !----------------------------------------------------------------- class ( LWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_L_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module LWrapperFactory","tags":"","loc":"sourcefile/lwrapperfactory.f90.html","title":"LWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~i4pwrapperfactory.f90~~EfferentGraph sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 var pansourcefilei4pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefilei4pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~i4pwrapperfactory.f90~~AfferentGraph sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilei4pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilei4pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules I4PWrapperFactory Source Code I4PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module I4PWrapperFactory USE WrapperFactory USE PENF , only : I1P , I4P USE DimensionsWrapper USE DimensionsWrapper0D_I4P USE DimensionsWrapper1D_I4P USE DimensionsWrapper2D_I4P USE DimensionsWrapper3D_I4P USE DimensionsWrapper4D_I4P USE DimensionsWrapper5D_I4P USE DimensionsWrapper6D_I4P USE DimensionsWrapper7D_I4P implicit none private type , extends ( WrapperFactory_t ) :: I4PWrapperFactory_t private contains procedure :: Wrap0D => I4PWrapperFactory_Wrap0D procedure :: Wrap1D => I4PWrapperFactory_Wrap1D procedure :: Wrap2D => I4PWrapperFactory_Wrap2D procedure :: Wrap3D => I4PWrapperFactory_Wrap3D procedure :: Wrap4D => I4PWrapperFactory_Wrap4D procedure :: Wrap5D => I4PWrapperFactory_Wrap5D procedure :: Wrap6D => I4PWrapperFactory_Wrap6D procedure :: Wrap7D => I4PWrapperFactory_Wrap7D procedure :: UnWrap0D => I4PWrapperFactory_UnWrap0D procedure :: UnWrap1D => I4PWrapperFactory_UnWrap1D procedure :: UnWrap2D => I4PWrapperFactory_UnWrap2D procedure :: UnWrap3D => I4PWrapperFactory_UnWrap3D procedure :: UnWrap4D => I4PWrapperFactory_UnWrap4D procedure :: UnWrap5D => I4PWrapperFactory_UnWrap5D procedure :: UnWrap6D => I4PWrapperFactory_UnWrap6D procedure :: UnWrap7D => I4PWrapperFactory_UnWrap7D procedure , public :: hasSameType => I4PWrapperFactory_hasSameType end type type ( I4PWrapperFactory_t ), public :: WrapperFactoryI4P contains function I4PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( integer ( I4P )) hasSameType = . true . end select end function I4PWrapperFactory_hasSameType function I4PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 0D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap0D function I4PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 1D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap1D function I4PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 2D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap2D function I4PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 3D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap3D function I4PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 4D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap4D function I4PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 5D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap5D function I4PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 6D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap6D function I4PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create I4P 7D Wrapper !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_I4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_I4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function I4PWrapperFactory_Wrap7D subroutine I4PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 0D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 1D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 2D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 3D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 4D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 5D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 6D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine I4PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the I4P 7D Wrapped Value !----------------------------------------------------------------- class ( I4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_I4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module I4PWrapperFactory","tags":"","loc":"sourcefile/i4pwrapperfactory.f90.html","title":"I4PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~r4pwrapperfactory.f90~~EfferentGraph sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 var pansourcefiler4pwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefiler4pwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~r4pwrapperfactory.f90~~AfferentGraph sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiler4pwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefiler4pwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules R4PWrapperFactory Source Code R4PWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module R4PWrapperFactory USE WrapperFactory USE PENF , only : I1P , R4P USE DimensionsWrapper USE DimensionsWrapper0D_R4P USE DimensionsWrapper1D_R4P USE DimensionsWrapper2D_R4P USE DimensionsWrapper3D_R4P USE DimensionsWrapper4D_R4P USE DimensionsWrapper5D_R4P USE DimensionsWrapper6D_R4P USE DimensionsWrapper7D_R4P implicit none private type , extends ( WrapperFactory_t ) :: R4PWrapperFactory_t private contains procedure :: Wrap0D => R4PWrapperFactory_Wrap0D procedure :: Wrap1D => R4PWrapperFactory_Wrap1D procedure :: Wrap2D => R4PWrapperFactory_Wrap2D procedure :: Wrap3D => R4PWrapperFactory_Wrap3D procedure :: Wrap4D => R4PWrapperFactory_Wrap4D procedure :: Wrap5D => R4PWrapperFactory_Wrap5D procedure :: Wrap6D => R4PWrapperFactory_Wrap6D procedure :: Wrap7D => R4PWrapperFactory_Wrap7D procedure :: UnWrap0D => R4PWrapperFactory_UnWrap0D procedure :: UnWrap1D => R4PWrapperFactory_UnWrap1D procedure :: UnWrap2D => R4PWrapperFactory_UnWrap2D procedure :: UnWrap3D => R4PWrapperFactory_UnWrap3D procedure :: UnWrap4D => R4PWrapperFactory_UnWrap4D procedure :: UnWrap5D => R4PWrapperFactory_UnWrap5D procedure :: UnWrap6D => R4PWrapperFactory_UnWrap6D procedure :: UnWrap7D => R4PWrapperFactory_UnWrap7D procedure , public :: hasSameType => R4PWrapperFactory_hasSameType end type type ( R4PWrapperFactory_t ), public :: WrapperFactoryR4P contains function R4PWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( real ( R4P )) hasSameType = . true . end select end function R4PWrapperFactory_hasSameType function R4PWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 0D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap0D function R4PWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 1D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap1D function R4PWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 2D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap2D function R4PWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 3D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap3D function R4PWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 4D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap4D function R4PWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 5D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap5D function R4PWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 6D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap6D function R4PWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create R4P 7D Wrapper !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_R4P_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_R4P_t ) call Wrapper % Set ( Value = Value ) end select endif end function R4PWrapperFactory_Wrap7D subroutine R4PWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 0D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 1D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 2D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 3D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 4D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 5D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 6D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine R4PWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the R4P 7D Wrapped Value !----------------------------------------------------------------- class ( R4PWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_R4P_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module R4PWrapperFactory","tags":"","loc":"sourcefile/r4pwrapperfactory.f90.html","title":"R4PWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactory.f90~~EfferentGraph sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~wrapperfactory.f90~~AfferentGraph sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~circlewrapperfactory.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefilewrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefilewrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules WrapperFactory Source Code WrapperFactory.f90 Source Code module WrapperFactory USE DimensionsWrapper implicit none private type , abstract :: WrapperFactory_t private contains private procedure ( WrapperFactory_Wrap0D ), deferred :: Wrap0D procedure ( WrapperFactory_Wrap1D ), deferred :: Wrap1D procedure ( WrapperFactory_Wrap2D ), deferred :: Wrap2D procedure ( WrapperFactory_Wrap3D ), deferred :: Wrap3D procedure ( WrapperFactory_Wrap4D ), deferred :: Wrap4D procedure ( WrapperFactory_Wrap5D ), deferred :: Wrap5D procedure ( WrapperFactory_Wrap6D ), deferred :: Wrap6D procedure ( WrapperFactory_Wrap7D ), deferred :: Wrap7D procedure ( WrapperFactory_hasSameType ), public , deferred :: hasSameType generic , public :: Wrap => Wrap0D , & Wrap1D , & Wrap2D , & Wrap3D , & Wrap4D , & Wrap5D , & Wrap6D , & Wrap7D end type abstract interface function WrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) import WrapperFactory_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType end function function WrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function function WrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) class ( DimensionsWrapper_t ), pointer :: Wrapper end function subroutine WrapperFactory_UnWrap0D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value end subroutine subroutine WrapperFactory_UnWrap1D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) end subroutine subroutine WrapperFactory_UnWrap2D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) end subroutine subroutine WrapperFactory_UnWrap3D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) end subroutine subroutine WrapperFactory_UnWrap4D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) end subroutine subroutine WrapperFactory_UnWrap5D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) end subroutine subroutine WrapperFactory_UnWrap6D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) end subroutine subroutine WrapperFactory_UnWrap7D ( this , Wrapper , Value ) import WrapperFactory_t import DimensionsWrapper_t class ( WrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) end subroutine end interface public :: WrapperFactory_t end module WrapperFactory","tags":"","loc":"sourcefile/wrapperfactory.f90.html","title":"WrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~dlacwrapperfactory.f90~~EfferentGraph sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 var pansourcefiledlacwrapperfactoryf90EfferentGraph = svgPanZoom('#sourcefiledlacwrapperfactoryf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dlacwrapperfactory.f90~~AfferentGraph sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledlacwrapperfactoryf90AfferentGraph = svgPanZoom('#sourcefiledlacwrapperfactoryf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DLCAWrapperFactory Source Code DLACWrapperFactory.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DLCAWrapperFactory USE PENF , only : I1P USE WrapperFactory USE DimensionsWrapper USE DimensionsWrapper0D_DLCA USE DimensionsWrapper1D_DLCA USE DimensionsWrapper2D_DLCA USE DimensionsWrapper3D_DLCA USE DimensionsWrapper4D_DLCA USE DimensionsWrapper5D_DLCA USE DimensionsWrapper6D_DLCA USE DimensionsWrapper7D_DLCA implicit none private type , extends ( WrapperFactory_t ) :: DLCAWrapperFactory_t private contains procedure :: Wrap0D => DLCAWrapperFactory_Wrap0D procedure :: Wrap1D => DLCAWrapperFactory_Wrap1D procedure :: Wrap2D => DLCAWrapperFactory_Wrap2D procedure :: Wrap3D => DLCAWrapperFactory_Wrap3D procedure :: Wrap4D => DLCAWrapperFactory_Wrap4D procedure :: Wrap5D => DLCAWrapperFactory_Wrap5D procedure :: Wrap6D => DLCAWrapperFactory_Wrap6D procedure :: Wrap7D => DLCAWrapperFactory_Wrap7D procedure :: UnWrap0D => DLCAWrapperFactory_UnWrap0D procedure :: UnWrap1D => DLCAWrapperFactory_UnWrap1D procedure :: UnWrap2D => DLCAWrapperFactory_UnWrap2D procedure :: UnWrap3D => DLCAWrapperFactory_UnWrap3D procedure :: UnWrap4D => DLCAWrapperFactory_UnWrap4D procedure :: UnWrap5D => DLCAWrapperFactory_UnWrap5D procedure :: UnWrap6D => DLCAWrapperFactory_UnWrap6D procedure :: UnWrap7D => DLCAWrapperFactory_UnWrap7D procedure , public :: hasSameType => DLCAWrapperFactory_hasSameType end type type ( DLCAWrapperFactory_t ), public :: WrapperFactoryDLCA contains function DLCAWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( character ( len =* )) hasSameType = . true . end select end function DLCAWrapperFactory_hasSameType function DLCAWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 0D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( DimensionsWrapper0D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper0D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap0D function DLCAWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 1D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 ))) then allocate ( DimensionsWrapper1D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 1_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper1D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap1D function DLCAWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 2D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 ))) then allocate ( DimensionsWrapper2D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 2_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper2D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap2D function DLCAWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 3D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 ))) then allocate ( DimensionsWrapper3D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 3_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper3D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap3D function DLCAWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 4D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper4D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 4_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper4D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap4D function DLCAWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 5D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper5D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 5_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper5D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap5D function DLCAWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 6D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper6D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 6_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper6D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap6D function DLCAWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create DLCA 7D Wrapper !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ))) then allocate ( DimensionsWrapper7D_DLCA_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 7_I1P ) select type ( Wrapper ) type is ( DimensionsWrapper7D_DLCA_t ) call Wrapper % Set ( Value = Value ) end select endif end function DLCAWrapperFactory_Wrap7D subroutine DLCAWrapperFactory_UnWrap0D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 0D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper0D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap1D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 1D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper1D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap2D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 2D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper2D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap3D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 3D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper3D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap4D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 4D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper4D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap5D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 5D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper5D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap6D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 6D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper6D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine subroutine DLCAWrapperFactory_UnWrap7D ( this , Wrapper , Value ) !----------------------------------------------------------------- !< Return the DLCA 7D Wrapped Value !----------------------------------------------------------------- class ( DLCAWrapperFactory_t ), intent ( IN ) :: this class ( DimensionsWrapper_t ), pointer , intent ( IN ) :: Wrapper class ( * ), intent ( INOUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- select type ( Wrapper ) type is ( DimensionsWrapper7D_DLCA_t ) call Wrapper % Get ( Value = Value ) end select end subroutine end module DLCAWrapperFactory","tags":"","loc":"sourcefile/dlacwrapperfactory.f90.html","title":"DLACWrapperFactory.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_I1P Source Code DimensionsWrapper1D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_I1P USE DimensionsWrapper1D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_I1P_t integer ( I1P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_I1P_Set procedure , public :: Get => DimensionsWrapper1D_I1P_Get procedure , public :: GetShape => DimensionsWrapper1D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_I1P_toString procedure , public :: Free => DimensionsWrapper1D_I1P_Free procedure , public :: Print => DimensionsWrapper1D_I1P_Print final :: DimensionsWrapper1D_I1P_Final end type public :: DimensionsWrapper1D_I1P_t contains subroutine DimensionsWrapper1D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_I1P_DataSizeInBytes function DimensionsWrapper1D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper1D_I1P_isOfDataType function DimensionsWrapper1D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_I1P_Print end module DimensionsWrapper1D_I1P","tags":"","loc":"sourcefile/dimensionswrapper1d_i1p.f90.html","title":"DimensionsWrapper1D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_I2P Source Code DimensionsWrapper1D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_I2P USE DimensionsWrapper1D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_I2P_t integer ( I2P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_I2P_Set procedure , public :: Get => DimensionsWrapper1D_I2P_Get procedure , public :: GetShape => DimensionsWrapper1D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_I2P_toString procedure , public :: Free => DimensionsWrapper1D_I2P_Free procedure , public :: Print => DimensionsWrapper1D_I2P_Print final :: DimensionsWrapper1D_I2P_Final end type public :: DimensionsWrapper1D_I2P_t contains subroutine DimensionsWrapper1D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_I2P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_I2P_DataSizeInBytes function DimensionsWrapper1D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper1D_I2P_isOfDataType function DimensionsWrapper1D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_I2P_Print end module DimensionsWrapper1D_I2P","tags":"","loc":"sourcefile/dimensionswrapper1d_i2p.f90.html","title":"DimensionsWrapper1D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_I4P Source Code DimensionsWrapper1D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_I4P USE DimensionsWrapper1D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_I4P_t integer ( I4P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_I4P_Set procedure , public :: Get => DimensionsWrapper1D_I4P_Get procedure , public :: GetShape => DimensionsWrapper1D_I4P_GetShape procedure , public :: GetPolymorphic => DimensionsWrapper1D_I4P_GetPolymorphic procedure , public :: GetPointer => DimensionsWrapper1D_I4P_GetPointer procedure , public :: DataSizeInBytes => DimensionsWrapper1D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_I4P_toString procedure , public :: Free => DimensionsWrapper1D_I4P_Free procedure , public :: Print => DimensionsWrapper1D_I4P_Print final :: DimensionsWrapper1D_I4P_Final end type public :: DimensionsWrapper1D_I4P_t contains subroutine DimensionsWrapper1D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_I4P_DataSizeInBytes function DimensionsWrapper1D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper1D_I4P_isOfDataType function DimensionsWrapper1D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_I4P_Print end module DimensionsWrapper1D_I4P","tags":"","loc":"sourcefile/dimensionswrapper1d_i4p.f90.html","title":"DimensionsWrapper1D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_DLCA Source Code DimensionsWrapper1D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_DLCA USE DimensionsWrapper1D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_DLCA_t character ( len = :), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_DLCA_Set procedure , public :: Get => DimensionsWrapper1D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper1D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper1D_DLCA_toString procedure , public :: Free => DimensionsWrapper1D_DLCA_Free procedure , public :: Print => DimensionsWrapper1D_DLCA_Print final :: DimensionsWrapper1D_DLCA_Final end type public :: DimensionsWrapper1D_DLCA_t contains subroutine DimensionsWrapper1D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper1D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1)),source=this%Value) end subroutine subroutine DimensionsWrapper1D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_DLCA_DataSizeInBytes function DimensionsWrapper1D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper1D_DLCA_isOfDataType function DimensionsWrapper1D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value ) String = String // trim ( this % Value ( idx )) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper1D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_DLCA_Print end module DimensionsWrapper1D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper1d_dlca.f90.html","title":"DimensionsWrapper1D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_R4P Source Code DimensionsWrapper1D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_R4P USE DimensionsWrapper1D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_R4P_t real ( R4P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_R4P_Set procedure , public :: Get => DimensionsWrapper1D_R4P_Get procedure , public :: GetShape => DimensionsWrapper1D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_R4P_toString procedure , public :: Free => DimensionsWrapper1D_R4P_Free procedure , public :: Print => DimensionsWrapper1D_R4P_Print final :: DimensionsWrapper1D_R4P_Final end type public :: DimensionsWrapper1D_R4P_t contains subroutine DimensionsWrapper1D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_R4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_R4P_DataSizeInBytes function DimensionsWrapper1D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper1D_R4P_isOfDataType function DimensionsWrapper1D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_R4P_Print end module DimensionsWrapper1D_R4P","tags":"","loc":"sourcefile/dimensionswrapper1d_r4p.f90.html","title":"DimensionsWrapper1D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_R8P Source Code DimensionsWrapper1D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_R8P USE DimensionsWrapper1D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_R8P_t real ( R8P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_R8P_Set procedure , public :: Get => DimensionsWrapper1D_R8P_Get procedure , public :: GetShape => DimensionsWrapper1D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_R8P_toString procedure , public :: Free => DimensionsWrapper1D_R8P_Free procedure , public :: Print => DimensionsWrapper1D_R8P_Print final :: DimensionsWrapper1D_R8P_Final end type public :: DimensionsWrapper1D_R8P_t contains subroutine DimensionsWrapper1D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_R8P_DataSizeInBytes function DimensionsWrapper1D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper1D_R8P_isOfDataType function DimensionsWrapper1D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_R8P_Print end module DimensionsWrapper1D_R8P","tags":"","loc":"sourcefile/dimensionswrapper1d_r8p.f90.html","title":"DimensionsWrapper1D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_l.f90~~EfferentGraph sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_l.f90~~AfferentGraph sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_L Source Code DimensionsWrapper1D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_L USE DimensionsWrapper1D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_L_t logical , allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_L_Set procedure , public :: Get => DimensionsWrapper1D_L_Get procedure , public :: GetShape => DimensionsWrapper1D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_L_GetPolymorphic procedure , public :: isOfDataType => DimensionsWrapper1D_L_isOfDataType procedure , public :: DataSizeInBytes => DimensionsWrapper1D_L_DataSizeInBytes procedure , public :: toString => DimensionsWrapper1D_L_toString procedure , public :: Free => DimensionsWrapper1D_L_Free procedure , public :: Print => DimensionsWrapper1D_L_Print final :: DimensionsWrapper1D_L_Final end type public :: DimensionsWrapper1D_L_t contains subroutine DimensionsWrapper1D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_L_DataSizeInBytes function DimensionsWrapper1D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper1D_L_isOfDataType function DimensionsWrapper1D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value ) String = String // trim ( str ( n = this % Value ( idx ))) // Sep enddo endif end function subroutine DimensionsWrapper1D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_L_Print end module DimensionsWrapper1D_L","tags":"","loc":"sourcefile/dimensionswrapper1d_l.f90.html","title":"DimensionsWrapper1D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper1d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D_I8P Source Code DimensionsWrapper1D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D_I8P USE DimensionsWrapper1D USE PENF , only : i4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper1D_t ) :: DimensionsWrapper1D_I8P_t integer ( I8P ), allocatable :: Value (:) contains private procedure , public :: Set => DimensionsWrapper1D_I8P_Set procedure , public :: Get => DimensionsWrapper1D_I8P_Get procedure , public :: GetShape => DimensionsWrapper1D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper1D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper1D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper1D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper1D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper1D_I8P_toString procedure , public :: Print => DimensionsWrapper1D_I8P_Print procedure , public :: Free => DimensionsWrapper1D_I8P_Free final :: DimensionsWrapper1D_I8P_Final end type public :: DimensionsWrapper1D_I8P_t contains subroutine DimensionsWrapper1D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper1D !----------------------------------------------------------------- type ( DimensionsWrapper1D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper1D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 )), stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper1D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper1D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic W2apper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper1D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 )), source = this % Value ) end subroutine subroutine DimensionsWrapper1D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper1D !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper1D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 )) * size ( this % value ) end function DimensionsWrapper1D_I8P_DataSizeInBytes function DimensionsWrapper1D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 1D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper1D_I8P_isOfDataType function DimensionsWrapper1D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value , separator = Separator )) end function subroutine DimensionsWrapper1D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper1D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper1D_I8P_Print end module DimensionsWrapper1D_I8P","tags":"","loc":"sourcefile/dimensionswrapper1d_i8p.f90.html","title":"DimensionsWrapper1D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper1d.f90~~EfferentGraph sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper1d.f90~~AfferentGraph sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper1df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper1df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper1D Source Code DimensionsWrapper1D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper1D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper1D_t private contains procedure ( DimensionsWrapper1D_Set ), deferred :: Set procedure ( DimensionsWrapper1D_Get ), deferred :: Get procedure ( DimensionsWrapper1D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper1D_Set ( this , Value ) import DimensionsWrapper1D_t class ( DimensionsWrapper1D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:) end subroutine subroutine DimensionsWrapper1D_Get ( this , Value ) import DimensionsWrapper1D_t class ( DimensionsWrapper1D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:) end subroutine function DimensionsWrapper1D_GetPointer ( this ) result ( Value ) import DimensionsWrapper1D_t class ( DimensionsWrapper1D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:) end function subroutine DimensionsWrapper1D_GetPolymorphic ( this , Value ) import DimensionsWrapper1D_t class ( DimensionsWrapper1D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:) end subroutine end interface public :: DimensionsWrapper1D_t end module DimensionsWrapper1D","tags":"","loc":"sourcefile/dimensionswrapper1d.f90.html","title":"DimensionsWrapper1D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_R4P Source Code DimensionsWrapper2D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_R4P USE DimensionsWrapper2D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_R4P_t real ( R4P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_R4P_Set procedure , public :: Get => DimensionsWrapper2D_R4P_Get procedure , public :: GetShape => DimensionsWrapper2D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper2D_R4P_toString procedure , public :: Free => DimensionsWrapper2D_R4P_Free procedure , public :: Print => DimensionsWrapper2D_R4P_Print final :: DimensionsWrapper2D_R4P_Final end type public :: DimensionsWrapper2D_R4P_t contains subroutine DimensionsWrapper2D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_R4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_R4P_DataSizeInBytes function DimensionsWrapper2D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper2D_R4P_isOfDataType function DimensionsWrapper2D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_R4P_Print end module DimensionsWrapper2D_R4P","tags":"","loc":"sourcefile/dimensionswrapper2d_r4p.f90.html","title":"DimensionsWrapper2D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_I8P Source Code DimensionsWrapper2D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_I8P USE DimensionsWrapper2D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_I8P_t integer ( I8P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_I8P_Set procedure , public :: Get => DimensionsWrapper2D_I8P_Get procedure , public :: GetShape => DimensionsWrapper2D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper2D_I8P_toString procedure , public :: Free => DimensionsWrapper2D_I8P_Free procedure , public :: Print => DimensionsWrapper2D_I8P_Print final :: DimensionsWrapper2D_I8P_Final end type public :: DimensionsWrapper2D_I8P_t contains subroutine DimensionsWrapper2D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_I8P_DataSizeInBytes function DimensionsWrapper2D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper2D_I8P_isOfDataType function DimensionsWrapper2D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_I8P_Print end module DimensionsWrapper2D_I8P","tags":"","loc":"sourcefile/dimensionswrapper2d_i8p.f90.html","title":"DimensionsWrapper2D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_R8P Source Code DimensionsWrapper2D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_R8P USE DimensionsWrapper2D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_R8P_t real ( R8P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_R8P_Set procedure , public :: Get => DimensionsWrapper2D_R8P_Get procedure , public :: GetShape => DimensionsWrapper2D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper2D_R8P_toString procedure , public :: Free => DimensionsWrapper2D_R8P_Free procedure , public :: Print => DimensionsWrapper2D_R8P_Print final :: DimensionsWrapper2D_R8P_Final end type public :: DimensionsWrapper2D_R8P_t contains subroutine DimensionsWrapper2D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_R8P_DataSizeInBytes function DimensionsWrapper2D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper2D_R8P_isOfDataType function DimensionsWrapper2D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_R8P_Print end module DimensionsWrapper2D_R8P","tags":"","loc":"sourcefile/dimensionswrapper2d_r8p.f90.html","title":"DimensionsWrapper2D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_I1P Source Code DimensionsWrapper2D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_I1P USE DimensionsWrapper2D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_I1P_t integer ( I1P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_I1P_Set procedure , public :: Get => DimensionsWrapper2D_I1P_Get procedure , public :: GetShape => DimensionsWrapper2D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper2D_I1P_toString procedure , public :: Free => DimensionsWrapper2D_I1P_Free procedure , public :: Print => DimensionsWrapper2D_I1P_Print final :: DimensionsWrapper2D_I1P_Final end type public :: DimensionsWrapper2D_I1P_t contains subroutine DimensionsWrapper2D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_I1P_DataSizeInBytes function DimensionsWrapper2D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper2D_I1P_isOfDataType function DimensionsWrapper2D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_I1P_Print end module DimensionsWrapper2D_I1P","tags":"","loc":"sourcefile/dimensionswrapper2d_i1p.f90.html","title":"DimensionsWrapper2D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_DLCA Source Code DimensionsWrapper2D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_DLCA USE DimensionsWrapper2D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_DLCA_t character ( len = :), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_DLCA_Set procedure , public :: Get => DimensionsWrapper2D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper2D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper2D_DLCA_toString procedure , public :: Free => DimensionsWrapper2D_DLCA_Free procedure , public :: Print => DimensionsWrapper2D_DLCA_Print final :: DimensionsWrapper2D_DLCA_Final end type public :: DimensionsWrapper2D_DLCA_t contains subroutine DimensionsWrapper2D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper2D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper2D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_DLCA_DataSizeInBytes function DimensionsWrapper2D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper2D_DLCA_isOfDataType function DimensionsWrapper2D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 !----------------------------------------------------------------- String = '' Sep = '|' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 )) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_DLCA_Print end module DimensionsWrapper2D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper2d_dlca.f90.html","title":"DimensionsWrapper2D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d.f90~~EfferentGraph sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d.f90~~AfferentGraph sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper2df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D Source Code DimensionsWrapper2D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper2D_t private contains procedure ( DimensionsWrapper2D_Set ), deferred :: Set procedure ( DimensionsWrapper2D_Get ), deferred :: Get procedure ( DimensionsWrapper2D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper2D_Set ( this , Value ) import DimensionsWrapper2D_t class ( DimensionsWrapper2D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) end subroutine subroutine DimensionsWrapper2D_Get ( this , Value ) import DimensionsWrapper2D_t class ( DimensionsWrapper2D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) end subroutine function DimensionsWrapper2D_GetPointer ( this ) result ( Value ) import DimensionsWrapper2D_t class ( DimensionsWrapper2D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) end function subroutine DimensionsWrapper2D_GetPolymorphic ( this , Value ) import DimensionsWrapper2D_t class ( DimensionsWrapper2D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) end subroutine end interface public :: DimensionsWrapper2D_t end module DimensionsWrapper2D","tags":"","loc":"sourcefile/dimensionswrapper2d.f90.html","title":"DimensionsWrapper2D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_I4P Source Code DimensionsWrapper2D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_I4P USE DimensionsWrapper2D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_I4P_t integer ( I4P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_I4P_Set procedure , public :: Get => DimensionsWrapper2D_I4P_Get procedure , public :: GetShape => DimensionsWrapper2D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_I4P_DataSizeInBytes procedure , public :: toString => DimensionsWrapper2D_I4P_toString procedure , public :: isOfDataType => DimensionsWrapper2D_I4P_isOfDataType procedure , public :: Free => DimensionsWrapper2D_I4P_Free procedure , public :: Print => DimensionsWrapper2D_I4P_Print final :: DimensionsWrapper2D_I4P_Final end type public :: DimensionsWrapper2D_I4P_t contains subroutine DimensionsWrapper2D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_I4P_DataSizeInBytes function DimensionsWrapper2D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper2D_I4P_isOfDataType function DimensionsWrapper2D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_I4P_Print end module DimensionsWrapper2D_I4P","tags":"","loc":"sourcefile/dimensionswrapper2d_i4p.f90.html","title":"DimensionsWrapper2D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_l.f90~~EfferentGraph sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_l.f90~~AfferentGraph sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_L Source Code DimensionsWrapper2D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_L USE DimensionsWrapper2D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_L_t logical , allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_L_Set procedure , public :: Get => DimensionsWrapper2D_L_Get procedure , public :: GetShape => DimensionsWrapper2D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_L_isOfDataType procedure , public :: toString => DimensionsWrapper2D_L_toString procedure , public :: Free => DimensionsWrapper2D_L_Free procedure , public :: Print => DimensionsWrapper2D_L_Print final :: DimensionsWrapper2D_L_Final end type public :: DimensionsWrapper2D_L_t contains subroutine DimensionsWrapper2D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper2D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_L_DataSizeInBytes function DimensionsWrapper2D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper2D_L_isOfDataType function DimensionsWrapper2D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_L_Print end module DimensionsWrapper2D_L","tags":"","loc":"sourcefile/dimensionswrapper2d_l.f90.html","title":"DimensionsWrapper2D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper2d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper2d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper2d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper2d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper2D_I2P Source Code DimensionsWrapper2D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper2D_I2P USE DimensionsWrapper2D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper2D_t ) :: DimensionsWrapper2D_I2P_t integer ( I2P ), allocatable :: Value (:,:) contains private procedure , public :: Set => DimensionsWrapper2D_I2P_Set procedure , public :: Get => DimensionsWrapper2D_I2P_Get procedure , public :: GetShape => DimensionsWrapper2D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper2D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper2D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper2D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper2D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper2D_I2P_toString procedure , public :: Free => DimensionsWrapper2D_I2P_Free procedure , public :: Print => DimensionsWrapper2D_I2P_Print final :: DimensionsWrapper2D_I2P_Final end type public :: DimensionsWrapper2D_I2P_t contains subroutine DimensionsWrapper2D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper2D !----------------------------------------------------------------- type ( DimensionsWrapper2D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper2D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper2D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper2D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:) !----------------------------------------------------------------- Value => this % value end function subroutine DimensionsWrapper2D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 )), & source = this % Value ) end subroutine function DimensionsWrapper2D_I2P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of stored data !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D integer ( I4P ) :: DataSizeinBytes !< Size in bytes of the stored data !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 )) * size ( this % value ) end function DimensionsWrapper2D_I2P_DataSizeInBytes function DimensionsWrapper2D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 2D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper2D_I2P_isOfDataType subroutine DimensionsWrapper2D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper2D !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper2D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx ))) // Sep enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper2D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper2D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper2D_I2P_Print end module DimensionsWrapper2D_I2P","tags":"","loc":"sourcefile/dimensionswrapper2d_i2p.f90.html","title":"DimensionsWrapper2D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_R8P Source Code DimensionsWrapper5D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_R8P USE DimensionsWrapper5D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_R8P_t real ( R8P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_R8P_Set procedure , public :: Get => DimensionsWrapper5D_R8P_Get procedure , public :: GetShape => DimensionsWrapper5D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_R8P_toString procedure , public :: Print => DimensionsWrapper5D_R8P_Print procedure , public :: Free => DimensionsWrapper5D_R8P_Free final :: DimensionsWrapper5D_R8P_Final end type public :: DimensionsWrapper5D_R8P_t contains subroutine DimensionsWrapper5D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_R8P_DataSizeInBytes function DimensionsWrapper5D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper5D_R8P_isOfDataType function DimensionsWrapper5D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_R8P_Print end module DimensionsWrapper5D_R8P","tags":"","loc":"sourcefile/dimensionswrapper5d_r8p.f90.html","title":"DimensionsWrapper5D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_DLCA Source Code DimensionsWrapper5D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_DLCA USE DimensionsWrapper5D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_DLCA_t character ( len = :), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_DLCA_Set procedure , public :: Get => DimensionsWrapper5D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper5D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper5D_DLCA_toString procedure , public :: Print => DimensionsWrapper5D_DLCA_Print procedure , public :: Free => DimensionsWrapper5D_DLCA_Free final :: DimensionsWrapper5D_DLCA_Final end type public :: DimensionsWrapper5D_DLCA_t contains subroutine DimensionsWrapper5D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper5D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (DLCA)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2),  & !                       size(this%Value,dim=3),  & !                       size(this%Value,dim=4),  & !                       size(this%Value,dim=5)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper5D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_DLCA_DataSizeInBytes function DimensionsWrapper5D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper5D_DLCA_isOfDataType function DimensionsWrapper5D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 )) // Sep enddo enddo enddo enddo enddo String = String (: len ( String ) - 1 ) endif end function subroutine DimensionsWrapper5D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_DLCA_Print end module DimensionsWrapper5D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper5d_dlca.f90.html","title":"DimensionsWrapper5D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_I2P Source Code DimensionsWrapper5D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_I2P USE DimensionsWrapper5D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_I2P_t integer ( I2P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_I2P_Set procedure , public :: Get => DimensionsWrapper5D_I2P_Get procedure , public :: GetShape => DimensionsWrapper5D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_I2P_toString procedure , public :: Print => DimensionsWrapper5D_I2P_Print procedure , public :: Free => DimensionsWrapper5D_I2P_Free final :: DimensionsWrapper5D_I2P_Final end type public :: DimensionsWrapper5D_I2P_t contains subroutine DimensionsWrapper5D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_I2P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_I2P_DataSizeInBytes function DimensionsWrapper5D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper5D_I2P_isOfDataType function DimensionsWrapper5D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_I2P_Print end module DimensionsWrapper5D_I2P","tags":"","loc":"sourcefile/dimensionswrapper5d_i2p.f90.html","title":"DimensionsWrapper5D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d.f90~~EfferentGraph sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d.f90~~AfferentGraph sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper5df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D Source Code DimensionsWrapper5D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper5D_t private contains procedure ( DimensionsWrapper5D_Set ), deferred :: Set procedure ( DimensionsWrapper5D_Get ), deferred :: Get procedure ( DimensionsWrapper5D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper5D_Set ( this , Value ) import DimensionsWrapper5D_t class ( DimensionsWrapper5D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) end subroutine subroutine DimensionsWrapper5D_Get ( this , Value ) import DimensionsWrapper5D_t class ( DimensionsWrapper5D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) end subroutine function DimensionsWrapper5D_GetPointer ( this ) result ( Value ) import DimensionsWrapper5D_t class ( DimensionsWrapper5D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) end function subroutine DimensionsWrapper5D_GetPolymorphic ( this , Value ) import DimensionsWrapper5D_t class ( DimensionsWrapper5D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) end subroutine end interface public :: DimensionsWrapper5D_t end module DimensionsWrapper5D","tags":"","loc":"sourcefile/dimensionswrapper5d.f90.html","title":"DimensionsWrapper5D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_R4P Source Code DimensionsWrapper5D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_R4P USE DimensionsWrapper5D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_R4P_t real ( R4P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_R4P_Set procedure , public :: Get => DimensionsWrapper5D_R4P_Get procedure , public :: GetShape => DimensionsWrapper5D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_R4P_toString procedure , public :: Print => DimensionsWrapper5D_R4P_Print procedure , public :: Free => DimensionsWrapper5D_R4P_Free final :: DimensionsWrapper5D_R4P_Final end type public :: DimensionsWrapper5D_R4P_t contains subroutine DimensionsWrapper5D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_R4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_R4P_DataSizeInBytes function DimensionsWrapper5D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper5D_R4P_isOfDataType function DimensionsWrapper5D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_R4P_Print end module DimensionsWrapper5D_R4P","tags":"","loc":"sourcefile/dimensionswrapper5d_r4p.f90.html","title":"DimensionsWrapper5D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_I1P Source Code DimensionsWrapper5D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_I1P USE DimensionsWrapper5D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_I1P_t integer ( I1P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_I1P_Set procedure , public :: Get => DimensionsWrapper5D_I1P_Get procedure , public :: GetShape => DimensionsWrapper5D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_I1P_toString procedure , public :: Print => DimensionsWrapper5D_I1P_Print procedure , public :: Free => DimensionsWrapper5D_I1P_Free final :: DimensionsWrapper5D_I1P_Final end type public :: DimensionsWrapper5D_I1P_t contains subroutine DimensionsWrapper5D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_I1P_DataSizeInBytes function DimensionsWrapper5D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper5D_I1P_isOfDataType function DimensionsWrapper5D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_I1P_Print end module DimensionsWrapper5D_I1P","tags":"","loc":"sourcefile/dimensionswrapper5d_i1p.f90.html","title":"DimensionsWrapper5D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_I4P Source Code DimensionsWrapper5D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_I4P USE DimensionsWrapper5D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_I4P_t integer ( I4P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_I4P_Set procedure , public :: Get => DimensionsWrapper5D_I4P_Get procedure , public :: GetShape => DimensionsWrapper5D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_I4P_toString procedure , public :: Print => DimensionsWrapper5D_I4P_Print procedure , public :: Free => DimensionsWrapper5D_I4P_Free final :: DimensionsWrapper5D_I4P_Final end type public :: DimensionsWrapper5D_I4P_t contains subroutine DimensionsWrapper5D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & source = Value , stat = err ) if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_I4P_DataSizeInBytes function DimensionsWrapper5D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper5D_I4P_isOfDataType function DimensionsWrapper5D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_I4P_Print end module DimensionsWrapper5D_I4P","tags":"","loc":"sourcefile/dimensionswrapper5d_i4p.f90.html","title":"DimensionsWrapper5D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_l.f90~~EfferentGraph sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_l.f90~~AfferentGraph sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_L Source Code DimensionsWrapper5D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_L USE DimensionsWrapper5D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_L_t logical , allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_L_Set procedure , public :: Get => DimensionsWrapper5D_L_Get procedure , public :: GetShape => DimensionsWrapper5D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_L_isOfDataType procedure , public :: toString => DimensionsWrapper5D_L_toString procedure , public :: Print => DimensionsWrapper5D_L_Print procedure , public :: Free => DimensionsWrapper5D_L_Free final :: DimensionsWrapper5D_L_Final end type public :: DimensionsWrapper5D_L_t contains subroutine DimensionsWrapper5D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_L_DataSizeInBytes function DimensionsWrapper5D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper5D_L_isOfDataType function DimensionsWrapper5D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_L_Print end module DimensionsWrapper5D_L","tags":"","loc":"sourcefile/dimensionswrapper5d_l.f90.html","title":"DimensionsWrapper5D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper5d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper5d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper5d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper5d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper5D_I8P Source Code DimensionsWrapper5D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper5D_I8P USE DimensionsWrapper5D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper5D_t ) :: DimensionsWrapper5D_I8P_t integer ( I8P ), allocatable :: Value (:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper5D_I8P_Set procedure , public :: Get => DimensionsWrapper5D_I8P_Get procedure , public :: GetShape => DimensionsWrapper5D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper5D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper5D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper5D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper5D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper5D_I8P_toString procedure , public :: Print => DimensionsWrapper5D_I8P_Print procedure , public :: Free => DimensionsWrapper5D_I8P_Free final :: DimensionsWrapper5D_I8P_Final end type public :: DimensionsWrapper5D_I8P_t contains subroutine DimensionsWrapper5D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper5D !----------------------------------------------------------------- type ( DimensionsWrapper5D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper5D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper5D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper5D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper5D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper5D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper5D !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper5D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D integer ( I4P ) :: DataSizeInBytes !< Size of lthe stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper5D_I8P_DataSizeInBytes function DimensionsWrapper5D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 5D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper5D_I8P_isOfDataType function DimensionsWrapper5D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper5D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper5D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper5D_I8P_Print end module DimensionsWrapper5D_I8P","tags":"","loc":"sourcefile/dimensionswrapper5d_i8p.f90.html","title":"DimensionsWrapper5D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d.f90~~EfferentGraph sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d.f90~~AfferentGraph sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper7df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D Source Code DimensionsWrapper7D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper7D_t private contains procedure ( DimensionsWrapper7D_Set ), deferred :: Set procedure ( DimensionsWrapper7D_Get ), deferred :: Get procedure ( DimensionsWrapper7D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper7D_Set ( this , Value ) import DimensionsWrapper7D_t class ( DimensionsWrapper7D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) end subroutine subroutine DimensionsWrapper7D_Get ( this , Value ) import DimensionsWrapper7D_t class ( DimensionsWrapper7D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) end subroutine function DimensionsWrapper7D_GetPointer ( this ) result ( Value ) import DimensionsWrapper7D_t class ( DimensionsWrapper7D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) end function subroutine DimensionsWrapper7D_GetPolymorphic ( this , Value ) import DimensionsWrapper7D_t class ( DimensionsWrapper7D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) end subroutine end interface public :: DimensionsWrapper7D_t end module DimensionsWrapper7D","tags":"","loc":"sourcefile/dimensionswrapper7d.f90.html","title":"DimensionsWrapper7D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_DLCA Source Code DimensionsWrapper7D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_DLCA USE DimensionsWrapper7D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_DLCA_t character ( len = :), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_DLCA_Set procedure , public :: Get => DimensionsWrapper7D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper7D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper7D_DLCA_toString procedure , public :: Print => DimensionsWrapper7D_DLCA_Print procedure , public :: Free => DimensionsWrapper7D_DLCA_Free final :: DimensionsWrapper7D_DLCA_Final end type public :: DimensionsWrapper7D_DLCA_t contains subroutine DimensionsWrapper7D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper7D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2),  & !                       size(this%Value,dim=3),  & !                       size(this%Value,dim=4),  & !                       size(this%Value,dim=5),  & !                       size(this%Value,dim=6),  & !                       size(this%Value,dim=7)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper7D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: dAtaSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_DLCA_DataSizeInBytes function DimensionsWrapper7D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper7D_DLCA_isOfDataType function DimensionsWrapper7D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 , idx6 , idx7 )) // Sep enddo enddo enddo enddo enddo enddo enddo String = String (: len ( String ) - 1 ) endif end function subroutine DimensionsWrapper7D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_DLCA_Print end module DimensionsWrapper7D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper7d_dlca.f90.html","title":"DimensionsWrapper7D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_l.f90~~EfferentGraph sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_l.f90~~AfferentGraph sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_L Source Code DimensionsWrapper7D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_L USE DimensionsWrapper7D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_L_t logical , allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_L_Set procedure , public :: Get => DimensionsWrapper7D_L_Get procedure , public :: GetShape => DimensionsWrapper7D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_L_isOfDataType procedure , public :: toString => DimensionsWrapper7D_L_toString procedure , public :: Print => DimensionsWrapper7D_L_Print procedure , public :: Free => DimensionsWrapper7D_L_Free final :: DimensionsWrapper7D_L_Final end type public :: DimensionsWrapper7D_L_t contains subroutine DimensionsWrapper7D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_L_DataSizeInBytes function DimensionsWrapper7D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper7D_L_isOfDataType function DimensionsWrapper7D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_L_Print end module DimensionsWrapper7D_L","tags":"","loc":"sourcefile/dimensionswrapper7d_l.f90.html","title":"DimensionsWrapper7D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_I8P Source Code DimensionsWrapper7D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_I8P USE DimensionsWrapper7D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_I8P_t integer ( I8P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_I8P_Set procedure , public :: Get => DimensionsWrapper7D_I8P_Get procedure , public :: GetShape => DimensionsWrapper7D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_I8P_toString procedure , public :: Print => DimensionsWrapper7D_I8P_Print procedure , public :: Free => DimensionsWrapper7D_I8P_Free final :: DimensionsWrapper7D_I8P_Final end type public :: DimensionsWrapper7D_I8P_t contains subroutine DimensionsWrapper7D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_I8P_DataSizeInBytes function DimensionsWrapper7D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------        procedure, public :: toString       => DimensionsWrapper7D_R8P_toString------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper7D_I8P_isOfDataType function DimensionsWrapper7D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_I8P_Print end module DimensionsWrapper7D_I8P","tags":"","loc":"sourcefile/dimensionswrapper7d_i8p.f90.html","title":"DimensionsWrapper7D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_I2P Source Code DimensionsWrapper7D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_I2P USE DimensionsWrapper7D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_I2P_t integer ( I2P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_I2P_Set procedure , public :: Get => DimensionsWrapper7D_I2P_Get procedure , public :: GetShape => DimensionsWrapper7D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_I2P_toString procedure , public :: Print => DimensionsWrapper7D_I2P_Print procedure , public :: Free => DimensionsWrapper7D_I2P_Free final :: DimensionsWrapper7D_I2P_Final end type public :: DimensionsWrapper7D_I2P_t contains subroutine DimensionsWrapper7D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_i2p_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_i2p_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_i2p_DataSizeInBytes function DimensionsWrapper7D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper7D_I2P_isOfDataType function DimensionsWrapper7D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_I2P_Print end module DimensionsWrapper7D_I2P","tags":"","loc":"sourcefile/dimensionswrapper7d_i2p.f90.html","title":"DimensionsWrapper7D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_R8P Source Code DimensionsWrapper7D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_R8P USE DimensionsWrapper7D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_R8P_t real ( R8P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_R8P_Set procedure , public :: Get => DimensionsWrapper7D_R8P_Get procedure , public :: GetShape => DimensionsWrapper7D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_R8P_toString procedure , public :: Print => DimensionsWrapper7D_R8P_Print procedure , public :: Free => DimensionsWrapper7D_R8P_Free final :: DimensionsWrapper7D_R8P_Final end type public :: DimensionsWrapper7D_R8P_t contains subroutine DimensionsWrapper7D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & source = Value , stat = err ) if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_R8P_DataSizeInBytes function DimensionsWrapper7D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper7D_R8P_isOfDataType function DimensionsWrapper7D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_R8P_Print end module DimensionsWrapper7D_R8P","tags":"","loc":"sourcefile/dimensionswrapper7d_r8p.f90.html","title":"DimensionsWrapper7D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_I4P Source Code DimensionsWrapper7D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_I4P USE DimensionsWrapper7D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_I4P_t integer ( I4P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_I4P_Set procedure , public :: Get => DimensionsWrapper7D_I4P_Get procedure , public :: GetShape => DimensionsWrapper7D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_I4P_toString procedure , public :: Print => DimensionsWrapper7D_I4P_Print procedure , public :: Free => DimensionsWrapper7D_I4P_Free final :: DimensionsWrapper7D_I4P_Final end type public :: DimensionsWrapper7D_I4P_t contains subroutine DimensionsWrapper7D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_I4P_DataSizeInBytes function DimensionsWrapper7D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper7D_I4P_isOfDataType function DimensionsWrapper7D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_I4P_Print end module DimensionsWrapper7D_I4P","tags":"","loc":"sourcefile/dimensionswrapper7d_i4p.f90.html","title":"DimensionsWrapper7D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_R4P Source Code DimensionsWrapper7D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_R4P USE DimensionsWrapper7D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_R4P_t real ( R4P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_R4P_Set procedure , public :: Get => DimensionsWrapper7D_R4P_Get procedure , public :: GetShape => DimensionsWrapper7D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_R4P_toString procedure , public :: Print => DimensionsWrapper7D_R4P_Print procedure , public :: Free => DimensionsWrapper7D_R4P_Free final :: DimensionsWrapper7D_R4P_Final end type public :: DimensionsWrapper7D_R4P_t contains subroutine DimensionsWrapper7D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_R4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_R4P_DataSizeInBytes function DimensionsWrapper7D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper7D_R4P_isOfDataType function DimensionsWrapper7D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_R4P_Print end module DimensionsWrapper7D_R4P","tags":"","loc":"sourcefile/dimensionswrapper7d_r4p.f90.html","title":"DimensionsWrapper7D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper7d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper7d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper7d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper7d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper7D_I1P Source Code DimensionsWrapper7D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper7D_I1P USE DimensionsWrapper7D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper7D_t ) :: DimensionsWrapper7D_I1P_t integer ( I1P ), allocatable :: Value (:,:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper7D_I1P_Set procedure , public :: Get => DimensionsWrapper7D_I1P_Get procedure , public :: GetShape => DimensionsWrapper7D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper7D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper7D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper7D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper7D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper7D_I1P_toString procedure , public :: Print => DimensionsWrapper7D_I1P_Print procedure , public :: Free => DimensionsWrapper7D_I1P_Free final :: DimensionsWrapper7D_I1P_Final end type public :: DimensionsWrapper7D_I1P_t contains subroutine DimensionsWrapper7D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper7D !----------------------------------------------------------------- type ( DimensionsWrapper7D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper7D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 ), & size ( Value , dim = 7 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper7D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper7D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper7D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 ), & size ( this % Value , dim = 7 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper7D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper7D !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper7D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size of the data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper7D_I1P_DataSizeInBytes function DimensionsWrapper7D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 7D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper7D_I1P_isOfDataType function DimensionsWrapper7D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 , idx7 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx7 = 1 , size ( this % Value , 7 ) do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 , idx7 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper7D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper7D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper7D_I1P_Print end module DimensionsWrapper7D_I1P","tags":"","loc":"sourcefile/dimensionswrapper7d_i1p.f90.html","title":"DimensionsWrapper7D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_I8P Source Code DimensionsWrapper0D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_I8P USE DimensionsWrapper0D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_I8P_t integer ( I8P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_I8P_Set procedure , public :: Get => DimensionsWrapper0D_I8P_Get procedure , public :: GetShape => DimensionsWrapper0D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_I8P_toString procedure , public :: Free => DimensionsWrapper0D_I8P_Free procedure , public :: Print => DimensionsWrapper0D_I8P_Print final :: DimensionsWrapper0D_I8P_Final end type public :: DimensionsWrapper0D_I8P_t contains subroutine DimensionsWrapper0D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_I8P_DataSizeInBytes function DimensionsWrapper0D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper0D_I8P_isOfDataType function DimensionsWrapper0D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_I8P_Print end module DimensionsWrapper0D_I8P","tags":"","loc":"sourcefile/dimensionswrapper0d_i8p.f90.html","title":"DimensionsWrapper0D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d.f90~~EfferentGraph sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d.f90~~AfferentGraph sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~circlewrapper.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 var pansourcefiledimensionswrapper0df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D Source Code DimensionsWrapper0D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper0D_t private contains procedure ( DimensionsWrapper0D_Set ), deferred :: Set procedure ( DimensionsWrapper0D_Get ), deferred :: Get procedure ( DimensionsWrapper0D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper0D_Set ( this , Value ) import DimensionsWrapper0D_t class ( DimensionsWrapper0D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value end subroutine subroutine DimensionsWrapper0D_Get ( this , Value ) import DimensionsWrapper0D_t class ( DimensionsWrapper0D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value end subroutine function DimensionsWrapper0D_GetPointer ( this ) result ( Value ) import DimensionsWrapper0D_t class ( DimensionsWrapper0D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value end function subroutine DimensionsWrapper0D_GetPolymorphic ( this , Value ) import DimensionsWrapper0D_t class ( DimensionsWrapper0D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value end subroutine end interface public :: DimensionsWrapper0D_t end module DimensionsWrapper0D","tags":"","loc":"sourcefile/dimensionswrapper0d.f90.html","title":"DimensionsWrapper0D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_R8P Source Code DimensionsWrapper0D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_R8P USE DimensionsWrapper0D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_R8P_t real ( R8P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_R8P_Set procedure , public :: Get => DimensionsWrapper0D_R8P_Get procedure , public :: GetShape => DimensionsWrapper0D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_R8P_toString procedure , public :: Free => DimensionsWrapper0D_R8P_Free procedure , public :: Print => DimensionsWrapper0D_R8P_Print final :: DimensionsWrapper0D_R8P_Final end type public :: DimensionsWrapper0D_R8P_t contains subroutine DimensionsWrapper0D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_R8P_DataSizeInBytes function DimensionsWrapper0D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper0D_R8P_isOfDataType function DimensionsWrapper0D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_R8P_Print end module DimensionsWrapper0D_R8P","tags":"","loc":"sourcefile/dimensionswrapper0d_r8p.f90.html","title":"DimensionsWrapper0D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_DLCA Source Code DimensionsWrapper0D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_DLCA USE DimensionsWrapper0D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_DLCA_t character ( len = :), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_DLCA_Set procedure , public :: Get => DimensionsWrapper0D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper0D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper0D_DLCA_toString procedure , public :: Free => DimensionsWrapper0D_DLCA_Free procedure , public :: Print => DimensionsWrapper0D_DLCA_Print final :: DimensionsWrapper0D_DLCA_Final end type public :: DimensionsWrapper0D_DLCA_t contains subroutine DimensionsWrapper0D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) this % Value = Value class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine subroutine DimensionsWrapper0D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_DLCA_Print function DimensionsWrapper0D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_DLCA_DataSizeInBytes function DimensionsWrapper0D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( this % Value ) end function function DimensionsWrapper0D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper0D_DLCA_isOfDataType end module DimensionsWrapper0D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper0d_dlca.f90.html","title":"DimensionsWrapper0D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_l.f90~~EfferentGraph sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_l.f90~~AfferentGraph sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_L Source Code DimensionsWrapper0D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_L USE DimensionsWrapper0D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_L_t logical , allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_L_Set procedure , public :: Get => DimensionsWrapper0D_L_Get procedure , public :: GetShape => DimensionsWrapper0D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_L_isOfDataType procedure , public :: toString => DimensionsWrapper0D_L_toString procedure , public :: Free => DimensionsWrapper0D_L_Free procedure , public :: Print => DimensionsWrapper0D_L_Print final :: DimensionsWrapper0D_L_Final end type public :: DimensionsWrapper0D_L_t contains subroutine DimensionsWrapper0D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( logical ) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % Value ) end function DimensionsWrapper0D_L_DataSizeInBytes function DimensionsWrapper0D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper0D_L_isOfDataType function DimensionsWrapper0D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_L_Print end module DimensionsWrapper0D_L","tags":"","loc":"sourcefile/dimensionswrapper0d_l.f90.html","title":"DimensionsWrapper0D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_R4P Source Code DimensionsWrapper0D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_R4P USE DimensionsWrapper0D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_R4P_t real ( R4P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_R4P_Set procedure , public :: Get => DimensionsWrapper0D_R4P_Get procedure , public :: GetShape => DimensionsWrapper0D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_R4P_toString procedure , public :: Print => DimensionsWrapper0D_R4P_Print procedure , public :: Free => DimensionsWrapper0D_R4P_Free final :: DimensionsWrapper0D_R4P_Final end type public :: DimensionsWrapper0D_R4P_t contains subroutine DimensionsWrapper0D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_r4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_R4P_DataSizeInBytes function DimensionsWrapper0D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper0D_R4P_isOfDataType function DimensionsWrapper0D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_R4P_Print end module DimensionsWrapper0D_R4P","tags":"","loc":"sourcefile/dimensionswrapper0d_r4p.f90.html","title":"DimensionsWrapper0D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_I4P Source Code DimensionsWrapper0D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_I4P USE DimensionsWrapper0D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_I4P_t integer ( I4P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_I4P_Set procedure , public :: Get => DimensionsWrapper0D_I4P_Get procedure , public :: GetShape => DimensionsWrapper0D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_I4P_toString procedure , public :: Free => DimensionsWrapper0D_I4P_Free procedure , public :: Print => DimensionsWrapper0D_I4P_Print final :: DimensionsWrapper0D_I4P_Final end type public :: DimensionsWrapper0D_I4P_t contains subroutine DimensionsWrapper0D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_I4P_DataSizeInBytes function DimensionsWrapper0D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper0D_I4P_isOfDataType function DimensionsWrapper0D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_I4P_Print end module DimensionsWrapper0D_I4P","tags":"","loc":"sourcefile/dimensionswrapper0d_i4p.f90.html","title":"DimensionsWrapper0D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_I2P Source Code DimensionsWrapper0D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_I2P USE DimensionsWrapper0D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_I2P_t integer ( I2P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_I2P_Set procedure , public :: Get => DimensionsWrapper0D_I2P_Get procedure , public :: GetShape => DimensionsWrapper0D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_I2P_toString procedure , public :: Free => DimensionsWrapper0D_I2P_Free procedure , public :: Print => DimensionsWrapper0D_I2P_Print final :: DimensionsWrapper0D_I2P_Final end type public :: DimensionsWrapper0D_I2P_t contains subroutine DimensionsWrapper0D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_I2P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_I2P_DataSizeInBytes function DimensionsWrapper0D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper0D_I2P_isOfDataType function DimensionsWrapper0D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_I2P_Print end module DimensionsWrapper0D_I2P","tags":"","loc":"sourcefile/dimensionswrapper0d_i2p.f90.html","title":"DimensionsWrapper0D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper0d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper0d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper0d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper0d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper0D_I1P Source Code DimensionsWrapper0D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper0D_I1P USE DimensionsWrapper0D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper0D_t ) :: DimensionsWrapper0D_I1P_t integer ( I1P ), allocatable :: Value contains private procedure , public :: Set => DimensionsWrapper0D_I1P_Set procedure , public :: Get => DimensionsWrapper0D_I1P_Get procedure , public :: GetShape => DimensionsWrapper0D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper0D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper0D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper0D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper0D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper0D_I1P_toString procedure , public :: Free => DimensionsWrapper0D_I1P_Free procedure , public :: Print => DimensionsWrapper0D_I1P_Print final :: DimensionsWrapper0D_I1P_Final end type public :: DimensionsWrapper0D_I1P_t contains subroutine DimensionsWrapper0D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper0D !----------------------------------------------------------------- type ( DimensionsWrapper0D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper0D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper0D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper0D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper0D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value !----------------------------------------------------------------- allocate ( Value , source = this % Value ) end subroutine subroutine DimensionsWrapper0D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper0D !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper0D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored value !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % Value ) end function DimensionsWrapper0D_I1P_DataSizeInBytes function DimensionsWrapper0D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper0D_I1P_isOfDataType function DimensionsWrapper0D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) String = trim ( str ( n = this % Value )) end function subroutine DimensionsWrapper0D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper0D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper0D_I1P_Print end module DimensionsWrapper0D_I1P","tags":"","loc":"sourcefile/dimensionswrapper0d_i1p.f90.html","title":"DimensionsWrapper0D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_I2P Source Code DimensionsWrapper4D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_I2P USE DimensionsWrapper4D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_I2P_t integer ( I2P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_I2P_Set procedure , public :: Get => DimensionsWrapper4D_I2P_Get procedure , public :: GetShape => DimensionsWrapper4D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_I2P_toString procedure , public :: Print => DimensionsWrapper4D_I2P_Print procedure , public :: Free => DimensionsWrapper4D_I2P_Free final :: DimensionsWrapper4D_I2P_Final end type public :: DimensionsWrapper4D_I2P_t contains subroutine DimensionsWrapper4D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_I2P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_I2P_DataSizeInBytes function DimensionsWrapper4D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper4D_I2P_isOfDataType function DimensionsWrapper4D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_I2P_Print end module DimensionsWrapper4D_I2P","tags":"","loc":"sourcefile/dimensionswrapper4d_i2p.f90.html","title":"DimensionsWrapper4D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_R4P Source Code DimensionsWrapper4D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_R4P USE DimensionsWrapper4D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_R4P_t real ( R4P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_R4P_Set procedure , public :: Get => DimensionsWrapper4D_R4P_Get procedure , public :: GetShape => DimensionsWrapper4D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_R4P_toString procedure , public :: Free => DimensionsWrapper4D_R4P_Free procedure , public :: Print => DimensionsWrapper4D_R4P_Print final :: DimensionsWrapper4D_R4P_Final end type public :: DimensionsWrapper4D_R4P_t contains subroutine DimensionsWrapper4D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_R4P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_R4P_DataSizeInBytes function DimensionsWrapper4D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper4D_R4P_isOfDataType function DimensionsWrapper4D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_R4P_Print end module DimensionsWrapper4D_R4P","tags":"","loc":"sourcefile/dimensionswrapper4d_r4p.f90.html","title":"DimensionsWrapper4D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d.f90~~EfferentGraph sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d.f90~~AfferentGraph sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper4df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D Source Code DimensionsWrapper4D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper4D_t private contains procedure ( DimensionsWrapper4D_Set ), deferred :: Set procedure ( DimensionsWrapper4D_Get ), deferred :: Get procedure ( DimensionsWrapper4D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper4D_Set ( this , Value ) import DimensionsWrapper4D_t class ( DimensionsWrapper4D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) end subroutine subroutine DimensionsWrapper4D_Get ( this , Value ) import DimensionsWrapper4D_t class ( DimensionsWrapper4D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) end subroutine function DimensionsWrapper4D_GetPointer ( this ) result ( Value ) import DimensionsWrapper4D_t class ( DimensionsWrapper4D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) end function subroutine DimensionsWrapper4D_GetPolymorphic ( this , Value ) import DimensionsWrapper4D_t class ( DimensionsWrapper4D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) end subroutine end interface public :: DimensionsWrapper4D_t end module DimensionsWrapper4D","tags":"","loc":"sourcefile/dimensionswrapper4d.f90.html","title":"DimensionsWrapper4D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_I1P Source Code DimensionsWrapper4D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_I1P USE DimensionsWrapper4D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_I1P_t integer ( I1P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_I1P_Set procedure , public :: Get => DimensionsWrapper4D_I1P_Get procedure , public :: GetShape => DimensionsWrapper4D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_I1P_toString procedure , public :: Print => DimensionsWrapper4D_I1P_Print procedure , public :: Free => DimensionsWrapper4D_I1P_Free final :: DimensionsWrapper4D_I1P_Final end type public :: DimensionsWrapper4D_I1P_t contains subroutine DimensionsWrapper4D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_I1P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DAtaSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_I1P_DataSizeInBytes function DimensionsWrapper4D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper4D_I1P_isOfDataType function DimensionsWrapper4D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_I1P_Print end module DimensionsWrapper4D_I1P","tags":"","loc":"sourcefile/dimensionswrapper4d_i1p.f90.html","title":"DimensionsWrapper4D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_R8P Source Code DimensionsWrapper4D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_R8P USE DimensionsWrapper4D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_R8P_t real ( R8P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_R8P_Set procedure , public :: Get => DimensionsWrapper4D_R8P_Get procedure , public :: GetShape => DimensionsWrapper4D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_R8P_toString procedure , public :: Free => DimensionsWrapper4D_R8P_Free procedure , public :: Print => DimensionsWrapper4D_R8P_Print final :: DimensionsWrapper4D_R8P_Final end type public :: DimensionsWrapper4D_R8P_t contains subroutine DimensionsWrapper4D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_R8P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_R8P_DataSizeInBytes function DimensionsWrapper4D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper4D_R8P_isOfDataType function DimensionsWrapper4D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_R8P_Print end module DimensionsWrapper4D_R8P","tags":"","loc":"sourcefile/dimensionswrapper4d_r8p.f90.html","title":"DimensionsWrapper4D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_l.f90~~EfferentGraph sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_l.f90~~AfferentGraph sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_L Source Code DimensionsWrapper4D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_L USE DimensionsWrapper4D USE FPL_Utils USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_L_t logical , allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_L_Set procedure , public :: Get => DimensionsWrapper4D_L_Get procedure , public :: GetShape => DimensionsWrapper4D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_L_isOfDataType procedure , public :: toString => DimensionsWrapper4D_L_toString procedure , public :: Print => DimensionsWrapper4D_L_Print procedure , public :: Free => DimensionsWrapper4D_L_Free final :: DimensionsWrapper4D_L_Final end type public :: DimensionsWrapper4D_L_t contains subroutine DimensionsWrapper4D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_L_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_L_DataSizeInBytes function DimensionsWrapper4D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper4D_L_isOfDataType function DimensionsWrapper4D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_L_Print end module DimensionsWrapper4D_L","tags":"","loc":"sourcefile/dimensionswrapper4d_l.f90.html","title":"DimensionsWrapper4D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_DLCA Source Code DimensionsWrapper4D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_DLCA USE DimensionsWrapper4D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_DLCA_t character ( len = :), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_DLCA_Set procedure , public :: Get => DimensionsWrapper4D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper4D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper4D_DLCA_toString procedure , public :: Print => DimensionsWrapper4D_DLCA_Print procedure , public :: Free => DimensionsWrapper4D_DLCA_Free final :: DimensionsWrapper4D_DLCA_Final end type public :: DimensionsWrapper4D_DLCA_t contains subroutine DimensionsWrapper4D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper4D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2),  & !                       size(this%Value,dim=3),  & !                       size(this%Value,dim=4)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper4D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_DLCA_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DAtaSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_DLCA_DataSizeInBytes function DimensionsWrapper4D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper4D_DLCA_isOfDataType function DimensionsWrapper4D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 , idx3 , idx4 )) // Sep enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_DLCA_Print end module DimensionsWrapper4D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper4d_dlca.f90.html","title":"DimensionsWrapper4D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_I8P Source Code DimensionsWrapper4D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_I8P USE DimensionsWrapper4D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_I8P_t integer ( I8P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_I8P_Set procedure , public :: Get => DimensionsWrapper4D_I8P_Get procedure , public :: GetShape => DimensionsWrapper4D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_I8P_toString procedure , public :: Print => DimensionsWrapper4D_I8P_Print procedure , public :: Free => DimensionsWrapper4D_I8P_Free final :: DimensionsWrapper4D_I8P_Final end type public :: DimensionsWrapper4D_I8P_t contains subroutine DimensionsWrapper4D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_I8P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_I8P_DataSizeInBytes function DimensionsWrapper4D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper4D_I8P_isOfDataType function DimensionsWrapper4D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_I8P_Print end module DimensionsWrapper4D_I8P","tags":"","loc":"sourcefile/dimensionswrapper4d_i8p.f90.html","title":"DimensionsWrapper4D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper4d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper4d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper4d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper4d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper4D_I4P Source Code DimensionsWrapper4D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper4D_I4P USE DimensionsWrapper4D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper4D_t ) :: DimensionsWrapper4D_I4P_t integer ( I4P ), allocatable :: Value (:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper4D_I4P_Set procedure , public :: Get => DimensionsWrapper4D_I4P_Get procedure , public :: GetShape => DimensionsWrapper4D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper4D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper4D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper4D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper4D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper4D_I4P_toString procedure , public :: Print => DimensionsWrapper4D_I4P_Print procedure , public :: Free => DimensionsWrapper4D_I4P_Free final :: DimensionsWrapper4D_I4P_Final end type public :: DimensionsWrapper4D_I4P_t contains subroutine DimensionsWrapper4D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper4D !----------------------------------------------------------------- type ( DimensionsWrapper4D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper4D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper4D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper4D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper4D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper4D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper4D !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper4D_I4P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the data size of the stored value in bytes !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D integer ( I4P ) :: DataSizeInBytes !< Data size in bytes of the stored value !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper4D_I4P_DataSizeInBytes function DimensionsWrapper4D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 4D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper4D_I4P_isOfDataType function DimensionsWrapper4D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper4D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper4D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper4D_I4P_Print end module DimensionsWrapper4D_I4P","tags":"","loc":"sourcefile/dimensionswrapper4d_i4p.f90.html","title":"DimensionsWrapper4D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_I4P Source Code DimensionsWrapper6D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_I4P USE DimensionsWrapper6D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_I4P_t integer ( I4P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_I4P_Set procedure , public :: Get => DimensionsWrapper6D_I4P_Get procedure , public :: GetShape => DimensionsWrapper6D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_I4P_toString procedure , public :: Print => DimensionsWrapper6D_I4P_Print procedure , public :: Free => DimensionsWrapper6D_I4P_Free final :: DimensionsWrapper6D_I4P_Final end type public :: DimensionsWrapper6D_I4P_t contains subroutine DimensionsWrapper6D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_I4P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_I4P_DataSizeInBytes function DimensionsWrapper6D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper6D_I4P_isOfDataType function DimensionsWrapper6D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_I4P_Print end module DimensionsWrapper6D_I4P","tags":"","loc":"sourcefile/dimensionswrapper6d_i4p.f90.html","title":"DimensionsWrapper6D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_R4P Source Code DimensionsWrapper6D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_R4P USE DimensionsWrapper6D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_R4P_t real ( R4P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_R4P_Set procedure , public :: Get => DimensionsWrapper6D_R4P_Get procedure , public :: GetShape => DimensionsWrapper6D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_R4P_toString procedure , public :: Print => DimensionsWrapper6D_R4P_Print procedure , public :: Free => DimensionsWrapper6D_R4P_Free final :: DimensionsWrapper6D_R4P_Final end type public :: DimensionsWrapper6D_R4P_t contains subroutine DimensionsWrapper6D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_R4P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_R4P_DataSizeInBytes function DimensionsWrapper6D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper6D_R4P_isOfDataType function DimensionsWrapper6D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_R4P_Print end module DimensionsWrapper6D_R4P","tags":"","loc":"sourcefile/dimensionswrapper6d_r4p.f90.html","title":"DimensionsWrapper6D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_I1P Source Code DimensionsWrapper6D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_I1P USE DimensionsWrapper6D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_I1P_t integer ( I1P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_I1P_Set procedure , public :: Get => DimensionsWrapper6D_I1P_Get procedure , public :: GetShape => DimensionsWrapper6D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_I1P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_I1P_toString procedure , public :: Print => DimensionsWrapper6D_I1P_Print procedure , public :: Free => DimensionsWrapper6D_I1P_Free final :: DimensionsWrapper6D_I1P_Final end type public :: DimensionsWrapper6D_I1P_t contains subroutine DimensionsWrapper6D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_I1P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_I1P_DataSizeInBytes function DimensionsWrapper6D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper6D_I1P_isOfDataType function DimensionsWrapper6D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_I1P_Print end module DimensionsWrapper6D_I1P","tags":"","loc":"sourcefile/dimensionswrapper6d_i1p.f90.html","title":"DimensionsWrapper6D_I1P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_I2P Source Code DimensionsWrapper6D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_I2P USE DimensionsWrapper6D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_I2P_t integer ( I2P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_I2P_Set procedure , public :: Get => DimensionsWrapper6D_I2P_Get procedure , public :: GetShape => DimensionsWrapper6D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_I2P_toString procedure , public :: Print => DimensionsWrapper6D_I2P_Print procedure , public :: Free => DimensionsWrapper6D_I2P_Free final :: DimensionsWrapper6D_I2P_Final end type public :: DimensionsWrapper6D_I2P_t contains subroutine DimensionsWrapper6D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_I2P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_I2P_DataSizeInBytes function DimensionsWrapper6D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper6D_I2P_isOfDataType function DimensionsWrapper6D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_I2P_Print end module DimensionsWrapper6D_I2P","tags":"","loc":"sourcefile/dimensionswrapper6d_i2p.f90.html","title":"DimensionsWrapper6D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d.f90~~EfferentGraph sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d.f90~~AfferentGraph sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper6df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D Source Code DimensionsWrapper6D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper6D_t private contains procedure ( DimensionsWrapper6D_Set ), deferred :: Set procedure ( DimensionsWrapper6D_Get ), deferred :: Get procedure ( DimensionsWrapper6D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper6D_Set ( this , Value ) import DimensionsWrapper6D_t class ( DimensionsWrapper6D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) end subroutine subroutine DimensionsWrapper6D_Get ( this , Value ) import DimensionsWrapper6D_t class ( DimensionsWrapper6D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) end subroutine function DimensionsWrapper6D_GetPointer ( this ) result ( Value ) import DimensionsWrapper6D_t class ( DimensionsWrapper6D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) end function subroutine DimensionsWrapper6D_GetPolymorphic ( this , Value ) import DimensionsWrapper6D_t class ( DimensionsWrapper6D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) end subroutine end interface public :: DimensionsWrapper6D_t end module DimensionsWrapper6D","tags":"","loc":"sourcefile/dimensionswrapper6d.f90.html","title":"DimensionsWrapper6D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_R8P Source Code DimensionsWrapper6D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_R8P USE DimensionsWrapper6D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_R8P_t real ( R8P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_R8P_Set procedure , public :: Get => DimensionsWrapper6D_R8P_Get procedure , public :: GetShape => DimensionsWrapper6D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_R8P_toString procedure , public :: Print => DimensionsWrapper6D_R8P_Print procedure , public :: Free => DimensionsWrapper6D_R8P_Free final :: DimensionsWrapper6D_R8P_Final end type public :: DimensionsWrapper6D_R8P_t contains subroutine DimensionsWrapper6D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_R8P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_R8P_DataSizeInBytes function DimensionsWrapper6D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper6D_R8P_isOfDataType function DimensionsWrapper6D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_R8P_Print end module DimensionsWrapper6D_R8P","tags":"","loc":"sourcefile/dimensionswrapper6d_r8p.f90.html","title":"DimensionsWrapper6D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_DLCA Source Code DimensionsWrapper6D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_DLCA USE DimensionsWrapper6D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_DLCA_t character ( len = :), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_DLCA_Set procedure , public :: Get => DimensionsWrapper6D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper6D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper6D_DLCA_toString procedure , public :: Print => DimensionsWrapper6D_DLCA_Print procedure , public :: Free => DimensionsWrapper6D_DLCA_Free final :: DimensionsWrapper6D_DLCA_Final end type public :: DimensionsWrapper6D_DLCA_t contains subroutine DimensionsWrapper6D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper6D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (DLCA)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2),  & !                       size(this%Value,dim=3),  & !                       size(this%Value,dim=4),  & !                       size(this%Value,dim=5),  & !                       size(this%Value,dim=6)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper6D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_DLCA_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_DLCA_DataSizeInBytes function DimensionsWrapper6D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper6D_DLCA_isOfDataType function DimensionsWrapper6D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 , idx6 )) // Sep enddo enddo enddo enddo enddo enddo String = String (: len ( String ) - 1 ) endif end function subroutine DimensionsWrapper6D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_DLCA_Print end module DimensionsWrapper6D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper6d_dlca.f90.html","title":"DimensionsWrapper6D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_l.f90~~EfferentGraph sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_l.f90~~AfferentGraph sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_L Source Code DimensionsWrapper6D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_L USE DimensionsWrapper6D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_L_t logical , allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_L_Set procedure , public :: Get => DimensionsWrapper6D_L_Get procedure , public :: GetShape => DimensionsWrapper6D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_L_isOfDataType procedure , public :: toString => DimensionsWrapper6D_L_toString procedure , public :: Print => DimensionsWrapper6D_L_Print procedure , public :: Free => DimensionsWrapper6D_L_Free final :: DimensionsWrapper6D_L_Final end type public :: DimensionsWrapper6D_L_t contains subroutine DimensionsWrapper6D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_L_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_L_DataSizeInBytes function DimensionsWrapper6D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper6D_L_isOfDataType function DimensionsWrapper6D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_L_Print end module DimensionsWrapper6D_L","tags":"","loc":"sourcefile/dimensionswrapper6d_l.f90.html","title":"DimensionsWrapper6D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper6d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper6d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper6d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper6d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper6D_I8P Source Code DimensionsWrapper6D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper6D_I8P USE DimensionsWrapper6D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper6D_t ) :: DimensionsWrapper6D_I8P_t integer ( I8P ), allocatable :: Value (:,:,:,:,:,:) contains private procedure , public :: Set => DimensionsWrapper6D_I8P_Set procedure , public :: Get => DimensionsWrapper6D_I8P_Get procedure , public :: GetShape => DimensionsWrapper6D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper6D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper6D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper6D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper6D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper6D_I8P_toString procedure , public :: Print => DimensionsWrapper6D_I8P_Print procedure , public :: Free => DimensionsWrapper6D_I8P_Free final :: DimensionsWrapper6D_I8P_Final end type public :: DimensionsWrapper6D_I8P_t contains subroutine DimensionsWrapper6D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper6D !----------------------------------------------------------------- type ( DimensionsWrapper6D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper6D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:,:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 ), & size ( Value , dim = 4 ), & size ( Value , dim = 5 ), & size ( Value , dim = 6 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:,:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper6D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper6D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper6D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:,:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 ), & size ( this % Value , dim = 4 ), & size ( this % Value , dim = 5 ), & size ( this % Value , dim = 6 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper6D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper6D !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper6D_I8P_DataSizeInBytes ( this ) result ( DatasizeInBytes ) !----------------------------------------------------------------- !< Return the size of the stored data in bytes !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 , 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper6D_I8P_DataSizeInBytes function DimensionsWrapper6D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 6D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper6D_I8P_isOfDataType function DimensionsWrapper6D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 , idx4 , idx5 , idx6 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx6 = 1 , size ( this % Value , 6 ) do idx5 = 1 , size ( this % Value , 5 ) do idx4 = 1 , size ( this % Value , 4 ) do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 , idx4 , idx5 , idx6 ))) // Sep enddo enddo enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper6D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper6D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper6D_I8P_Print end module DimensionsWrapper6D_I8P","tags":"","loc":"sourcefile/dimensionswrapper6d_i8p.f90.html","title":"DimensionsWrapper6D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_r8p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_r8p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_r8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_r8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_R8P Source Code DimensionsWrapper3D_R8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_R8P USE DimensionsWrapper3D USE PENF , only : I4P , R8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_R8P_t real ( R8P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_R8P_Set procedure , public :: Get => DimensionsWrapper3D_R8P_Get procedure , public :: GetShape => DimensionsWrapper3D_R8P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_R8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_R8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_R8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_R8P_isOfDataType procedure , public :: toString => DimensionsWrapper3D_R8P_toString procedure , public :: Free => DimensionsWrapper3D_R8P_Free procedure , public :: Print => DimensionsWrapper3D_R8P_Print final :: DimensionsWrapper3D_R8P_Final end type public :: DimensionsWrapper3D_R8P_t contains subroutine DimensionsWrapper3D_R8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_R8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_R8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_R8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_R8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_R8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_R8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_R8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_R8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_R8P_DataSizeInBytes function DimensionsWrapper3D_R8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R8P )) isOfDataType = . true . end select end function DimensionsWrapper3D_R8P_isOfDataType function DimensionsWrapper3D_R8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_R8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_R8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_R8P_Print end module DimensionsWrapper3D_R8P","tags":"","loc":"sourcefile/dimensionswrapper3d_r8p.f90.html","title":"DimensionsWrapper3D_R8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_dlca.f90~~EfferentGraph sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_dlca.f90~~AfferentGraph sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_dlcaf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_dlcaf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_DLCA Source Code DimensionsWrapper3D_DLCA.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_DLCA USE DimensionsWrapper3D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_DLCA_t character ( len = :), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_DLCA_Set procedure , public :: Get => DimensionsWrapper3D_DLCA_Get procedure , public :: GetShape => DimensionsWrapper3D_DLCA_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_DLCA_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_DLCA_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_DLCA_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_DLCA_isOfDataType procedure , public :: toString => DimensionsWrapper3D_DLCA_toString procedure , public :: Free => DimensionsWrapper3D_DLCA_Free procedure , public :: Print => DimensionsWrapper3D_DLCA_Print final :: DimensionsWrapper3D_DLCA_Final end type public :: DimensionsWrapper3D_DLCA_t contains subroutine DimensionsWrapper3D_DLCA_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_DLCA_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_DLCA_Set ( this , Value ) !----------------------------------------------------------------- !< Set DLCA Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- #ifdef __GFORTRAN__ call msg % Warn ( txt = 'Setting value: Array of deferred length allocatable arrays not supported in Gfortran)' ,& file = __ FILE__ , line = __ LINE__ ) #else select type ( Value ) type is ( character ( len =* )) allocate ( character ( len = len ( Value )) :: & this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (character(*))' , & file = __ FILE__ , line = __ LINE__ ) end select #endif end subroutine subroutine DimensionsWrapper3D_DLCA_Get ( this , Value ) !----------------------------------------------------------------- !< Get deferred length character array Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( character ( len =* )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then if ( len ( Value ) >= len ( this % Value )) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Not enought length (' // & trim ( str ( no_sign = . true ., n = len ( Value ))) // '<' // & trim ( str ( no_sign = . true ., n = len ( this % Value ))) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (character(*))' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_DLCA_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_DLCA_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_DLCA_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- !        allocate(Value(size(this%Value,dim=1),  & !                       size(this%Value,dim=2),  & !                       size(this%Value,dim=3)), & !                       source=this%Value) end subroutine subroutine DimensionsWrapper3D_DLCA_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_DLCA_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = 0 if ( allocated ( this % value )) DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_DLCA_DataSizeInBytes function DimensionsWrapper3D_DLCA_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( character ( len =* )) isOfDataType = . true . end select end function DimensionsWrapper3D_DLCA_isOfDataType function DimensionsWrapper3D_DLCA_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( this % Value ( idx1 , idx2 , idx3 )) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_DLCA_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_DLCA_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = DLCA' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_DLCA_Print end module DimensionsWrapper3D_DLCA","tags":"","loc":"sourcefile/dimensionswrapper3d_dlca.f90.html","title":"DimensionsWrapper3D_DLCA.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_i8p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_i8p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_i8pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_i8pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_I8P Source Code DimensionsWrapper3D_I8P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_I8P USE DimensionsWrapper3D USE PENF , only : I4P , I8P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_I8P_t integer ( I8P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_I8P_Set procedure , public :: Get => DimensionsWrapper3D_I8P_Get procedure , public :: GetShape => DimensionsWrapper3D_I8P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_I8P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_I8P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_I8P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_I8P_isOfDataType procedure , public :: toString => DimensionsWrapper3D_I8P_toString procedure , public :: Free => DimensionsWrapper3D_I8P_Free procedure , public :: Print => DimensionsWrapper3D_I8P_Print final :: DimensionsWrapper3D_I8P_Final end type public :: DimensionsWrapper3D_I8P_t contains subroutine DimensionsWrapper3D_I8P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_I8P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_I8P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I8P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I8P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I8P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I8P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I8P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I8P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_I8P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_I8P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_I8P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_I8P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_I8P_DataSizeInBytes function DimensionsWrapper3D_I8P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I8P )) isOfDataType = . true . end select end function DimensionsWrapper3D_I8P_isOfDataType function DimensionsWrapper3D_I8P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_I8P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_I8P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I8P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_I8P_Print end module DimensionsWrapper3D_I8P","tags":"","loc":"sourcefile/dimensionswrapper3d_i8p.f90.html","title":"DimensionsWrapper3D_I8P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_r4p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_r4p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_r4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_r4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_R4P Source Code DimensionsWrapper3D_R4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_R4P USE DimensionsWrapper3D USE PENF , only : I4P , R4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_R4P_t real ( R4P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_R4P_Set procedure , public :: Get => DimensionsWrapper3D_R4P_Get procedure , public :: GetShape => DimensionsWrapper3D_R4P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_R4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_R4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_R4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_R4P_isOfDataType procedure , public :: toString => DimensionsWrapper3D_R4P_toString procedure , public :: Free => DimensionsWrapper3D_R4P_Free procedure , public :: Print => DimensionsWrapper3D_R4P_Print final :: DimensionsWrapper3D_R4P_Final end type public :: DimensionsWrapper3D_R4P_t contains subroutine DimensionsWrapper3D_R4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_R4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_R4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (R4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_R4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get R4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( real ( R4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (R4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_R4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_R4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_R4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_R4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_R4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_R4P_DataSizeInBytes function DimensionsWrapper3D_R4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( real ( R4P )) isOfDataType = . true . end select end function DimensionsWrapper3D_R4P_isOfDataType function DimensionsWrapper3D_R4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_R4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_R4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = R4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_R4P_Print end module DimensionsWrapper3D_R4P","tags":"","loc":"sourcefile/dimensionswrapper3d_r4p.f90.html","title":"DimensionsWrapper3D_R4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_i2p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_i2p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_i2pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_i2pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_I2P Source Code DimensionsWrapper3D_I2P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_I2P USE DimensionsWrapper3D USE PENF , only : I2P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_I2P_t integer ( I2P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_I2P_Set procedure , public :: Get => DimensionsWrapper3D_I2P_Get procedure , public :: GetShape => DimensionsWrapper3D_I2P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_I2P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_I2P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_I2P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_I2P_isOfDataType procedure , public :: toString => DimensionsWrapper3D_I2P_toString procedure , public :: Free => DimensionsWrapper3D_I2P_Free procedure , public :: Print => DimensionsWrapper3D_I2P_Print final :: DimensionsWrapper3D_I2P_Final end type public :: DimensionsWrapper3D_I2P_t contains subroutine DimensionsWrapper3D_I2P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_I2P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_I2P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I2P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I2P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I2P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I2P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I2P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I2P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_I2P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_I2P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_I2P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( INOUT ) :: this integer :: err = FPLSuccess !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_I2P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_I2P_DataSizeInBytes function DimensionsWrapper3D_I2P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I2P )) isOfDataType = . true . end select end function DimensionsWrapper3D_I2P_isOfDataType function DimensionsWrapper3D_I2P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_I2P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_I2P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I2P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_I2P_Print end module DimensionsWrapper3D_I2P","tags":"","loc":"sourcefile/dimensionswrapper3d_i2p.f90.html","title":"DimensionsWrapper3D_I2P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_l.f90~~EfferentGraph sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_l.f90~~AfferentGraph sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_lf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_lf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_L Source Code DimensionsWrapper3D_L.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_L USE DimensionsWrapper3D USE FPL_Utils USE PENF , only : I4P , str USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_L_t logical , allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_L_Set procedure , public :: Get => DimensionsWrapper3D_L_Get procedure , public :: GetShape => DimensionsWrapper3D_L_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_L_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_L_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_L_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_L_isOfDataType procedure , public :: toString => DimensionsWrapper3D_L_toString procedure , public :: Free => DimensionsWrapper3D_L_Free procedure , public :: Print => DimensionsWrapper3D_L_Print final :: DimensionsWrapper3D_L_Final end type public :: DimensionsWrapper3D_L_t contains subroutine DimensionsWrapper3D_L_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_L_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_L_Set ( this , Value ) !----------------------------------------------------------------- !< Set logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( logical ) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (logical)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_L_Get ( this , Value ) !----------------------------------------------------------------- !< Get logical Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( logical ) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (L)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_L_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_L_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_L_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_L_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_L_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size_logical ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_L_DataSizeInBytes function DimensionsWrapper3D_L_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( logical ) isOfDataType = . true . end select end function DimensionsWrapper3D_L_isOfDataType function DimensionsWrapper3D_L_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx1 , idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) do idx1 = 1 , size ( this % Value , 1 ) String = String // trim ( str ( n = this % Value ( idx1 , idx2 , idx3 ))) // Sep enddo enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_L_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_L_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = L' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_L_Print end module DimensionsWrapper3D_L","tags":"","loc":"sourcefile/dimensionswrapper3d_l.f90.html","title":"DimensionsWrapper3D_L.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d.f90~~EfferentGraph sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d.f90~~AfferentGraph sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 var pansourcefiledimensionswrapper3df90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3df90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D Source Code DimensionsWrapper3D.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D USE DimensionsWrapper implicit none private type , extends ( DimensionsWrapper_t ), abstract :: DimensionsWrapper3D_t private contains procedure ( DimensionsWrapper3D_Set ), deferred :: Set procedure ( DimensionsWrapper3D_Get ), deferred :: Get procedure ( DimensionsWrapper3D_GetPointer ), deferred :: GetPointer end type abstract interface subroutine DimensionsWrapper3D_Set ( this , Value ) import DimensionsWrapper3D_t class ( DimensionsWrapper3D_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) end subroutine subroutine DimensionsWrapper3D_Get ( this , Value ) import DimensionsWrapper3D_t class ( DimensionsWrapper3D_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) end subroutine function DimensionsWrapper3D_GetPointer ( this ) result ( Value ) import DimensionsWrapper3D_t class ( DimensionsWrapper3D_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) end function subroutine DimensionsWrapper3D_GetPolymorphic ( this , Value ) import DimensionsWrapper3D_t class ( DimensionsWrapper3D_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) end subroutine end interface public :: DimensionsWrapper3D_t end module DimensionsWrapper3D","tags":"","loc":"sourcefile/dimensionswrapper3d.f90.html","title":"DimensionsWrapper3D.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_i4p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_i4p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_i4pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_i4pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_I4P Source Code DimensionsWrapper3D_I4P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_I4P USE DimensionsWrapper3D USE PENF , only : I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_I4P_t integer ( I4P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_I4P_Set procedure , public :: Get => DimensionsWrapper3D_I4P_Get procedure , public :: GetShape => DimensionsWrapper3D_I4P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_I4P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_I4P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_I4P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_I4P_isOfDataType procedure , public :: toString => DimensionsWrapper3D_I4P_toString procedure , public :: Free => DimensionsWrapper3D_I4P_Free procedure , public :: Print => DimensionsWrapper3D_I4P_Print final :: DimensionsWrapper3D_I4P_Final end type public :: DimensionsWrapper3D_I4P_t contains subroutine DimensionsWrapper3D_I4P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_I4P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_I4P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I4P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I4P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I4P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I4P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I4P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I4P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_I4P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_I4P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_I4P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_I4P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_I4P_DataSizeInBytes function DimensionsWrapper3D_I4P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I4P )) isOfDataType = . true . end select end function DimensionsWrapper3D_I4P_isOfDataType function DimensionsWrapper3D_I4P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_I4P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_I4P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I4P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_I4P_Print end module DimensionsWrapper3D_I4P","tags":"","loc":"sourcefile/dimensionswrapper3d_i4p.f90.html","title":"DimensionsWrapper3D_I4P.f90 â FPL"},{"text":"This File Depends On sourcefile~~dimensionswrapper3d_i1p.f90~~EfferentGraph sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~dimensionswrapper3d_i1p.f90~~AfferentGraph sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 var pansourcefiledimensionswrapper3d_i1pf90AfferentGraph = svgPanZoom('#sourcefiledimensionswrapper3d_i1pf90AfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules DimensionsWrapper3D_I1P Source Code DimensionsWrapper3D_I1P.f90 Source Code !----------------------------------------------------------------- ! FPL (Fortran Parameter List) ! Copyright (c) 2015 Santiago Badia, Alberto F. MartÃ­n, ! Javier Principe and VÃ­ctor Sande. ! All rights reserved. ! ! This library is free software; you can redistribute it and/or ! modify it under the terms of the GNU Lesser General Public ! License as published by the Free Software Foundation; either ! version 3.0 of the License, or (at your option) any later version. ! ! This library is distributed in the hope that it will be useful, ! but WITHOUT ANY WARRANTY; without even the implied warranty of ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ! Lesser General Public License for more details. ! ! You should have received a copy of the GNU Lesser General Public ! License along with this library. !----------------------------------------------------------------- module DimensionsWrapper3D_I1P USE DimensionsWrapper3D USE PENF , only : I1P , I4P , str , byte_size USE ErrorMessages implicit none private type , extends ( DimensionsWrapper3D_t ) :: DimensionsWrapper3D_I1P_t integer ( I1P ), allocatable :: Value (:,:,:) contains private procedure , public :: Set => DimensionsWrapper3D_I1P_Set procedure , public :: Get => DimensionsWrapper3D_I1P_Get procedure , public :: GetShape => DimensionsWrapper3D_I1P_GetShape procedure , public :: GetPointer => DimensionsWrapper3D_I1P_GetPointer procedure , public :: GetPolymorphic => DimensionsWrapper3D_I1P_GetPolymorphic procedure , public :: DataSizeInBytes => DimensionsWrapper3D_I1P_DataSizeInBytes procedure , public :: isOfDataType => DimensionsWrapper3D_I1P_isOfDataType procedure , public :: Free => DimensionsWrapper3D_I1P_Free procedure , public :: toString => DimensionsWrapper3D_I1P_toString procedure , public :: Print => DimensionsWrapper3D_I1P_Print final :: DimensionsWrapper3D_I1P_Final end type public :: DimensionsWrapper3D_I1P_t contains subroutine DimensionsWrapper3D_I1P_Final ( this ) !----------------------------------------------------------------- !< Final procedure of DimensionsWrapper3D !----------------------------------------------------------------- type ( DimensionsWrapper3D_I1P_t ), intent ( INOUT ) :: this !----------------------------------------------------------------- call this % Free () end subroutine subroutine DimensionsWrapper3D_I1P_Set ( this , Value ) !----------------------------------------------------------------- !< Set I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value (:,:,:) integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) allocate ( this % Value ( size ( Value , dim = 1 ), & size ( Value , dim = 2 ), & size ( Value , dim = 3 )), & stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (I1P)' , & file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I1P_Get ( this , Value ) !----------------------------------------------------------------- !< Get I1P Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value (:,:,:) integer ( I4P ), allocatable :: ValueShape (:) !----------------------------------------------------------------- select type ( Value ) type is ( integer ( I1P )) call this % GetShape ( ValueShape ) if ( all ( ValueShape == shape ( Value ))) then Value = this % Value else call msg % Warn ( txt = 'Getting value: Wrong shape (' // & str ( no_sign = . true ., n = ValueShape ) // '/=' // & str ( no_sign = . true ., n = shape ( Value )) // ')' ,& file = __ FILE__ , line = __ LINE__ ) endif class Default call msg % Warn ( txt = 'Getting value: Expected data type (I1P)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine DimensionsWrapper3D_I1P_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Get Wrapper Value Shape !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( this % GetDimensions ())) ValueShape = shape ( this % Value , kind = I4P ) end subroutine function DimensionsWrapper3D_I1P_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value (:,:,:) !----------------------------------------------------------------- Value => this % Value end function subroutine DimensionsWrapper3D_I1P_GetPolymorphic ( this , Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic Wrapper Value !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this class ( * ), allocatable , intent ( OUT ) :: Value (:,:,:) !----------------------------------------------------------------- allocate ( Value ( size ( this % Value , dim = 1 ), & size ( this % Value , dim = 2 ), & size ( this % Value , dim = 3 )), & source = this % Value ) end subroutine subroutine DimensionsWrapper3D_I1P_Free ( this ) !----------------------------------------------------------------- !< Free a DimensionsWrapper3D !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function DimensionsWrapper3D_I1P_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Return the size in bytes of the stored data !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D integer ( I4P ) :: DataSizeInBytes !< Size of the stored data in bytes !---------------------------------s-------------------------------- DataSizeInBytes = byte_size ( this % value ( 1 , 1 , 1 )) * size ( this % value ) end function DimensionsWrapper3D_I1P_DataSizeInBytes function DimensionsWrapper3D_I1P_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this !< Dimensions wrapper 3D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( integer ( I1P )) isOfDataType = . true . end select end function DimensionsWrapper3D_I1P_isOfDataType function DimensionsWrapper3D_I1P_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Return the wrapper value as a string !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this character ( len = 1 ), optional , intent ( IN ) :: Separator character ( len = :), allocatable :: String character ( len = 1 ) :: Sep integer ( I4P ) :: idx2 , idx3 !----------------------------------------------------------------- String = '' Sep = ',' if ( allocated ( this % Value )) then if ( present ( Separator )) Sep = Separator do idx3 = 1 , size ( this % Value , 3 ) do idx2 = 1 , size ( this % Value , 2 ) String = String // trim ( str ( n = this % Value (:, idx2 , idx3 ))) // Sep enddo enddo String = trim ( adjustl ( String (: len ( String ) - 1 ))) endif end function subroutine DimensionsWrapper3D_I1P_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( DimensionsWrapper3D_I1P_t ), intent ( IN ) :: this !< DimensionsWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A,$)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = I1P' // & ', Dimensions = ' // trim ( str ( no_sign = . true ., n = this % GetDimensions ())) // & ', Bytes = ' // trim ( str ( no_sign = . true ., n = this % DataSizeInBytes ())) // & ', Value = ' write ( unit = unit , fmt =* , iostat = iostatd , iomsg = iomsgd ) this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine DimensionsWrapper3D_I1P_Print end module DimensionsWrapper3D_I1P","tags":"","loc":"sourcefile/dimensionswrapper3d_i1p.f90.html","title":"DimensionsWrapper3D_I1P.f90 â FPL"},{"text":"PENF's testing program. Programs compact_real Source Code compact_real.f90 Source Code !< PENF's testing program. program compact_real !----------------------------------------------------------------------------------------------------------------------------------- !< PENF's testing program. !----------------------------------------------------------------------------------------------------------------------------------- use penf use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- implicit none logical :: test_passed ( 3 ) !< List of passed tests. !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- call penf_init test_passed = . false . test_passed ( 1 ) = trim ( str ( n = 1._R8P , compact = . true .)) == '+0.1E+1' print \"(A,L1)\" , 'Compact 1.0: ' // trim ( str ( n = 1._R8P , compact = . true .)) // ', is correct? ' , test_passed ( 1 ) test_passed ( 2 ) = trim ( str ( n = 1._R4P / 3._R4P , compact = . true .)) == '+0.333333E+0' print \"(A,L1)\" , 'Compact 1.0/3.0: ' // trim ( str ( n = 1._R4P / 3._R4P , compact = . true .)) // ', is correct? ' , test_passed ( 2 ) test_passed ( 3 ) = trim ( str ( n = 1._R16P / 4._R16P , compact = . true .)) == '+0.25E+0' print \"(A,L1)\" , 'Compact 1.0/4.0: ' // trim ( str ( n = 1._R16P / 4._R16P , compact = . true .)) // ', is correct? ' , test_passed ( 3 ) write ( stdout , \"(A,L1)\" ) new_line ( 'a' ) // 'Are all tests passed? ' , all ( test_passed ) stop !----------------------------------------------------------------------------------------------------------------------------------- endprogram compact_real","tags":"","loc":"sourcefile/compact_real.f90.html","title":"compact_real.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_i4p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_i4p_test.f90 WrapperFactoryList_I4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i4p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_i4p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_i4p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_I4P_Test Source Code WrapperFactoryList_I4P_Test.f90 Source Code program WrapperFactoryList_I4P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I4P ) :: val0D = 9 integer ( I4P ) :: val1D ( - 1 : 1 ) = ( / 1 , 2 , 3 / ) integer ( I4P ) :: val2D ( 1 , 1 ) = 9 integer ( I4P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I4P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer :: i call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I4P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_i4p_test.f90.html","title":"WrapperFactoryList_I4P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_l_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_l_test.f90 WrapperFactoryList_L_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_l_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_l_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_l_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_Test Source Code WrapperFactoryList_L_Test.f90 Source Code program WrapperFactoryList_Test USE iso_fortran_env , only : OUTPUT_UNIT USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper logical :: val0D = . true . logical :: val1D ( 1 ) = . true . logical :: val2D ( 1 , 1 ) = . true . logical :: val3D ( 1 , 1 , 1 ) = . true . logical :: val4D ( 1 , 1 , 1 , 1 ) = . true . logical :: val5D ( 1 , 1 , 1 , 1 , 1 ) = . true . logical :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = . true . logical :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = . true . call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_Test","tags":"","loc":"sourcefile/wrapperfactorylist_l_test.f90.html","title":"WrapperFactoryList_L_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_test.f90~~EfferentGraph sourcefile~parameterlist_test.f90 ParameterList_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P , R4P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I4P ), allocatable :: array (:) integer :: iter , numiters , loop numiters = 7 call FPL_Init () call Parameters % Init () do loop = 1 , numiters do iter = 1 , numiters if ( allocated ( array )) deallocate ( array ); allocate ( array ( iter )); array = iter write ( unit = OUTPUT_UNIT , fmt = '(A,$)' ) 'Setting: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )) // '\" ... ' if ( Parameters % Set ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )), Value = array ) /= 0 ) stop - 1 if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 endif enddo enddo write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' do iter = 1 , numiters if ( Parameters % GetDimensions ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter ))) /= 1 ) stop - 1 if ( allocated ( array )) deallocate ( array ); allocate ( array ( iter )) write ( unit = OUTPUT_UNIT , fmt = '(A,$)' ) 'Getting: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )) // '\" ... ' if (. not . Parameters % isAssignable ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )), Value = array )) stop - 1 if ( Parameters % Get ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )), Value = array ) /= 0 ) stop - 1 if ( all ( array == iter )) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 endif enddo write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' do iter = numiters , 1 , - 1 if ( allocated ( array )) deallocate ( array ); allocate ( array ( iter )); array = iter if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A,$)' ) 'Removing: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )) // '\" ... ' call Parameters % Del ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter ))) if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' endif endif enddo call Parameters % Free () call FPL_Finalize () if ( allocated ( array )) deallocate ( array ) end Program","tags":"","loc":"sourcefile/parameterlist_test.f90.html","title":"ParameterList_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_dlca_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_dlca_test.f90 WrapperFactoryList_DLCA_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_dlca_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_dlca_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_dlca_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperTheWrapperFactoryList_Test Source Code WrapperFactoryList_DLCA_Test.f90 Source Code program WrapperTheWrapperFactoryList_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper character ( len = 1 ) :: val0D = 'A' character ( len = 1 ) :: val1D ( 1 ) = 'A' character ( len = 1 ) :: val2D ( 1 , 1 ) = 'A' character ( len = 1 ) :: val3D ( 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val4D ( 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 'A' call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperTheWrapperFactoryList_Test","tags":"","loc":"sourcefile/wrapperfactorylist_dlca_test.f90.html","title":"WrapperFactoryList_DLCA_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_r8p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_r8p_test.f90 WrapperFactoryList_R8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r8p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_r8p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_r8p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_R8P_Test Source Code WrapperFactoryList_R8P_Test.f90 Source Code program WrapperFactoryList_R8P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : R8P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper real ( R8P ) :: val0D = 9 real ( R8P ) :: val1D ( 1 ) = 9 real ( R8P ) :: val2D ( 1 , 1 ) = 9 real ( R8P ) :: val3D ( 1 , 1 , 1 ) = 9 real ( R8P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_R8P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_r8p_test.f90.html","title":"WrapperFactoryList_R8P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlistiterator_test.f90~~EfferentGraph sourcefile~parameterlistiterator_test.f90 ParameterListIterator_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlistiterator_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlistiterator_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlistiterator_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterListIterator_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P , R4P , str USE FPL type ( ParameterList_t ) :: Parameters type ( ParameterListIterator_t ) :: Iterator integer ( I4P ), allocatable :: array (:) integer ( I4P ), allocatable :: shape (:) integer :: iter , numiters , loop numiters = 7 call FPL_Init () call Parameters % Init ( Size = 3 ) do loop = 1 , numiters do iter = 1 , numiters if ( allocated ( array )) deallocate ( array ); allocate ( array ( iter )); array = iter write ( unit = OUTPUT_UNIT , fmt = '(A,$)' ) 'Setting: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )) // '\" ... ' if ( Parameters % Set ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )), Value = array ) /= 0 ) stop - 1 if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 endif enddo enddo write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' Iterator = Parameters % GetIterator () do while (. not . Iterator % HasFinished ()) if ( Iterator % GetDimensions () /= 1 ) stop - 1 if ( Iterator % GetShape ( Shape = shape ) /= 0 ) stop - 1 if (. not . Iterator % IsOfDataType ( Mold = array )) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Iterating over: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = shape ( 1 ))) // '\" ... ' if ( allocated ( array )) deallocate ( array ) allocate ( array ( shape ( 1 ))) if ( Iterator % isAssignable ( Value = array )) then FPLError = Iterator % Get ( Value = array ) if ( FPLError == 0 ) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 endif else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 endif print * , '  Key = ' // Iterator % GetKey () print * , '  Bytes = ' // trim ( str ( n = Iterator % DataSizeInBytes ())) print * , '  Dimensions = ' // trim ( str ( n = Iterator % GetDimensions ())) print * , '  Value = ' // trim ( str ( n = array )) print * , '  Shape = ' // trim ( str ( n = shape )) if ( all ( array == shape ( 1 ))) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Ok!' else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'FAIL!!!!' stop - 1 endif call Iterator % Next () enddo write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' do iter = numiters , 1 , - 1 if ( allocated ( array )) deallocate ( array ) if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A,$)' ) 'Removing: \"' // 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )) // '\" ... ' call Parameters % Del ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter ))) if ( Parameters % isPresent ( Key = 'I4P_1D' // trim ( str ( no_sign = . true ., n = iter )))) then write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' FAIL!!!!' stop - 1 else write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' Ok!' endif endif enddo call Parameters % Free () call Iterator % Free () call FPL_Finalize () if ( allocated ( array )) deallocate ( array ) end Program","tags":"","loc":"sourcefile/parameterlistiterator_test.f90.html","title":"ParameterListIterator_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_r4p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_r4p_test.f90 WrapperFactoryList_R4P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_r4p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_r4p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_r4p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_R4P_Test Source Code WrapperFactoryList_R4P_Test.f90 Source Code program WrapperFactoryList_R4P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : R4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper real ( R4P ) :: val0D = 9 real ( R4P ) :: val1D ( 1 ) = 9 real ( R4P ) :: val2D ( 1 , 1 ) = 9 real ( R4P ) :: val3D ( 1 , 1 , 1 ) = 9 real ( R4P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_R4P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_r4p_test.f90.html","title":"WrapperFactoryList_R4P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_i1p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_i1p_test.f90 WrapperFactoryList_I1P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i1p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_i1p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_i1p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_I1P_Test Source Code WrapperFactoryList_I1P_Test.f90 Source Code program WrapperFactoryList_I1P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I1P ) :: val0D = 9 integer ( I1P ) :: val1D ( 1 ) = 9 integer ( I1P ) :: val2D ( 1 , 1 ) = 9 integer ( I1P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I1P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I1P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_i1p_test.f90.html","title":"WrapperFactoryList_I1P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_i2p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_i2p_test.f90 WrapperFactoryList_I2P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i2p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_i2p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_i2p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_I2P_Test Source Code WrapperFactoryList_I2P_Test.f90 Source Code program WrapperFactoryList_I2P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I2P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I2P ) :: val0D = 9 integer ( I2P ) :: val1D ( 1 ) = 9 integer ( I2P ) :: val2D ( 1 , 1 ) = 9 integer ( I2P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I2P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I2P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_i2p_test.f90.html","title":"WrapperFactoryList_I2P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~wrapperfactorylist_i8p_test.f90~~EfferentGraph sourcefile~wrapperfactorylist_i8p_test.f90 WrapperFactoryList_I8P_Test.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist_i8p_test.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilewrapperfactorylist_i8p_testf90EfferentGraph = svgPanZoom('#sourcefilewrapperfactorylist_i8p_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs WrapperFactoryList_I8P_Test Source Code WrapperFactoryList_I8P_Test.f90 Source Code program WrapperFactoryList_I8P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I8P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I8P ) :: val0D = 9 integer ( I8P ) :: val1D ( 1 ) = 9 integer ( I8P ) :: val2D ( 1 , 1 ) = 9 integer ( I8P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I8P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I8P_Test","tags":"","loc":"sourcefile/wrapperfactorylist_i8p_test.f90.html","title":"WrapperFactoryList_I8P_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper4d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper4d_test.f90 ParameterList_Wrapper4D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper4d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper4d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper4d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper4D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:,:,:) integer ( I2P ), allocatable :: I2PArray (:,:,:,:) integer ( I4P ), allocatable :: I4PArray (:,:,:,:) integer ( I8P ), allocatable :: I8PArray (:,:,:,:) real ( R4P ), allocatable :: R4PArray (:,:,:,:) real ( R8P ), allocatable :: R8PArray (:,:,:,:) logical , allocatable :: LArray (:,:,:,:) character ( len = :), allocatable :: DLCAarray (:,:,:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 2 , 1 , 1 , 1 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 1 , 2 , 1 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 1 , 2 , 1 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 1 , 1 , 1 , 2 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 1 , 2 , 1 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 1 , 2 , 1 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 2 , 1 , 1 , 1 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 2 , 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,4I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper4d_test.f90.html","title":"ParameterList_Wrapper4D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper3d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper3d_test.f90 ParameterList_Wrapper3D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper3d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper3d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper3d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper3D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:,:) integer ( I2P ), allocatable :: I2PArray (:,:,:) integer ( I4P ), allocatable :: I4PArray (:,:,:) integer ( I8P ), allocatable :: I8PArray (:,:,:) real ( R4P ), allocatable :: R4PArray (:,:,:) real ( R8P ), allocatable :: R8PArray (:,:,:) logical , allocatable :: LArray (:,:,:) character ( len = :), allocatable :: DLCAarray (:,:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 1 , 1 , 2 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 2 , 1 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 2 , 1 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 3 , 1 , 1 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 3 , 1 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 4 , 1 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 1 , 4 , 1 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,3I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper3d_test.f90.html","title":"ParameterList_Wrapper3D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper1d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper1d_test.f90 ParameterList_Wrapper1D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper1d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper1d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper1d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper1D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:) integer ( I2P ), allocatable :: I2PArray (:) integer ( I4P ), allocatable :: I4PArray (:) integer ( I8P ), allocatable :: I8PArray (:) real ( R4P ), allocatable :: R4PArray (:) real ( R8P ), allocatable :: R8PArray (:) logical , allocatable :: LArray (:) character ( len = :), allocatable :: DLCAarray (:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 1 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 2 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 3 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 4 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 5 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 6 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 7 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper1d_test.f90.html","title":"ParameterList_Wrapper1D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper0d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper0d_test.f90 ParameterList_Wrapper0D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper0d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper0d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper0d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper0D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray integer ( I2P ), allocatable :: I2PArray integer ( I4P ), allocatable :: I4PArray integer ( I8P ), allocatable :: I8PArray real ( R4P ), allocatable :: R4PArray real ( R8P ), allocatable :: R8PArray logical , allocatable :: LArray character ( len = :), allocatable :: DLCAarray integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper0d_test.f90.html","title":"ParameterList_Wrapper0D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper2d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper2d_test.f90 ParameterList_Wrapper2D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper2d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper2d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper2d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper2D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:) integer ( I2P ), allocatable :: I2PArray (:,:) integer ( I4P ), allocatable :: I4PArray (:,:) integer ( I8P ), allocatable :: I8PArray (:,:) real ( R4P ), allocatable :: R4PArray (:,:) real ( R8P ), allocatable :: R8PArray (:,:) logical , allocatable :: LArray (:,:) character ( len = :), allocatable :: DLCAarray (:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 1 , 1 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 2 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 2 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 3 , 1 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 3 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 4 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 1 , 4 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,2I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper2d_test.f90.html","title":"ParameterList_Wrapper2D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper7d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper7d_test.f90 ParameterList_Wrapper7D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper7d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper7d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper7d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper7D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:,:,:,:,:,:) integer ( I2P ), allocatable :: I2PArray (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: I4PArray (:,:,:,:,:,:,:) integer ( I8P ), allocatable :: I8PArray (:,:,:,:,:,:,:) real ( R4P ), allocatable :: R4PArray (:,:,:,:,:,:,:) real ( R8P ), allocatable :: R8PArray (:,:,:,:,:,:,:) logical , allocatable :: LArray (:,:,:,:,:,:,:) character ( len = :), allocatable :: DLCAarray (:,:,:,:,:,:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 2 , 1 , 1 , 1 , 1 , 1 , 2 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 1 , 2 , 1 , 1 , 1 , 2 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 1 , 2 , 1 , 2 , 1 , 1 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 1 , 1 , 1 , 2 , 1 , 1 , 1 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 1 , 2 , 1 , 2 , 1 , 1 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 1 , 1 , 1 , 2 , 1 , 1 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 2 , 1 , 2 , 1 , 2 , 1 , 2 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 1 , 2 , 1 , 2 , 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,7I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper7d_test.f90.html","title":"ParameterList_Wrapper7D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper5d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper5d_test.f90 ParameterList_Wrapper5D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper5d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper5d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper5d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper5D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:,:,:,:) integer ( I2P ), allocatable :: I2PArray (:,:,:,:,:) integer ( I4P ), allocatable :: I4PArray (:,:,:,:,:) integer ( I8P ), allocatable :: I8PArray (:,:,:,:,:) real ( R4P ), allocatable :: R4PArray (:,:,:,:,:) real ( R8P ), allocatable :: R8PArray (:,:,:,:,:) logical , allocatable :: LArray (:,:,:,:,:) character ( len = :), allocatable :: DLCAarray (:,:,:,:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 2 , 1 , 1 , 1 , 1 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 1 , 3 , 1 , 1 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 1 , 4 , 1 , 1 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 1 , 1 , 1 , 3 , 1 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 1 , 1 , 1 , 2 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 1 , 1 , 1 , 2 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 1 , 1 , 2 , 1 , 1 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 2 , 1 , 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,5I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper5d_test.f90.html","title":"ParameterList_Wrapper5D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~parameterlist_wrapper6d_test.f90~~EfferentGraph sourcefile~parameterlist_wrapper6d_test.f90 ParameterList_Wrapper6D_Test.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~parameterlist_wrapper6d_test.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileparameterlist_wrapper6d_testf90EfferentGraph = svgPanZoom('#sourcefileparameterlist_wrapper6d_testf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs ParameterListEntryContainer_Test Source Code ParameterList_Wrapper6D_Test.f90 Source Code Program ParameterListEntryContainer_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P , I2P , I4P , I8P , R4P , R8P , str USE FPL type ( ParameterList_t ) :: Parameters integer ( I1P ), allocatable :: I1PArray (:,:,:,:,:,:) integer ( I2P ), allocatable :: I2PArray (:,:,:,:,:,:) integer ( I4P ), allocatable :: I4PArray (:,:,:,:,:,:) integer ( I8P ), allocatable :: I8PArray (:,:,:,:,:,:) real ( R4P ), allocatable :: R4PArray (:,:,:,:,:,:) real ( R8P ), allocatable :: R8PArray (:,:,:,:,:,:) logical , allocatable :: LArray (:,:,:,:,:,:) character ( len = :), allocatable :: DLCAarray (:,:,:,:,:,:) integer ( I4P ), allocatable :: Shape (:) if ( allocated ( I1Parray )) deallocate ( I1Parray ); allocate ( I1Parray ( 1 , 2 , 1 , 1 , 2 , 1 )); I1Parray = 1 if ( allocated ( I2Parray )) deallocate ( I2Parray ); allocate ( I2Parray ( 1 , 1 , 1 , 2 , 1 , 1 )); I2Parray = 2 if ( allocated ( I4Parray )) deallocate ( I4Parray ); allocate ( I4Parray ( 1 , 2 , 2 , 1 , 1 , 1 )); I4Parray = 4 if ( allocated ( I8Parray )) deallocate ( I8Parray ); allocate ( I8Parray ( 1 , 1 , 1 , 1 , 1 , 1 )); I8Parray = 8 if ( allocated ( R4Parray )) deallocate ( R4Parray ); allocate ( R4Parray ( 1 , 2 , 1 , 1 , 2 , 1 )); R4Parray = 0.4 if ( allocated ( R8Parray )) deallocate ( R8Parray ); allocate ( R8Parray ( 1 , 1 , 3 , 1 , 1 , 1 )); R8Parray = 0.8 if ( allocated ( Larray )) deallocate ( Larray ); allocate ( Larray ( 1 , 2 , 1 , 2 , 1 , 2 )); Larray = . true . if ( allocated ( DLCAarray )) deallocate ( DLCAarray ); allocate ( character ( len = 6 ) :: DLCAarray ( 1 , 2 , 1 , 2 , 1 , 1 )); DLCAarray = 'String' call FPL_Init () call Parameters % Init ( Size = 3 ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Setting Values ...' if ( Parameters % Set ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Set ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 if (. not . Parameters % isPresent ( Key = 'I1P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I2P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'I8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R4P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'R8P' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'L' )) Stop - 1 if (. not . Parameters % isPresent ( Key = 'DLCA' )) Stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A,I4)' ) ' Parameter List Length: ' , Parameters % Length () write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking Data Types ...' write ( unit = OUTPUT_UNIT , fmt =* ) 'I1P isOfDataType:' , Parameters % isOfDataType ( Key = 'I1P' , Mold = I1PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I2P isOfDataType:' , Parameters % isOfDataType ( Key = 'I2P' , Mold = I2PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I4P isOfDataType:' , Parameters % isOfDataType ( Key = 'I4P' , Mold = I4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'I8P isOfDataType:' , Parameters % isOfDataType ( Key = 'I8P' , Mold = I8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R4P isOfDataType:' , Parameters % isOfDataType ( Key = 'R4P' , Mold = R4PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'R8P isOfDataType:' , Parameters % isOfDataType ( Key = 'R8P' , Mold = R8PArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'L isOfDataType:' , Parameters % isOfDataType ( Key = 'L' , Mold = LArray ) write ( unit = OUTPUT_UNIT , fmt =* ) 'DLCA isOfDataType:' , Parameters % isOfDataType ( Key = 'DLCA' , Mold = DLCAArray ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Checking shapes ...' if ( Parameters % GetShape ( Key = 'I1P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'I1P Shape:' , shape if ( Parameters % GetShape ( Key = 'I2P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'I2P Shape:' , shape if ( Parameters % GetShape ( Key = 'I4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'I4P Shape:' , shape if ( Parameters % GetShape ( Key = 'I8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'I8P Shape:' , shape if ( Parameters % GetShape ( Key = 'R4P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'R4P Shape:' , shape if ( Parameters % GetShape ( Key = 'R8P' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'r8P Shape:' , shape if ( Parameters % GetShape ( Key = 'L' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'L Shape:' , shape if ( Parameters % GetShape ( Key = 'DLCA' , shape = shape ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A,6I4)' ) 'DLCA Shape:' , shape write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Can be assigned? ...' if (. not . Parameters % isAssignable ( Key = 'I1P' , Value = I1PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I2P' , Value = I2PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I4P' , Value = I4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'I8P' , Value = I8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R4P' , Value = R4PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'R8P' , Value = R8PArray )) stop - 1 if (. not . Parameters % isAssignable ( Key = 'L' , Value = LArray )) stop - 1 #ifndef __GFORTRAN__ if (. not . Parameters % isAssignable ( Key = 'DLCA' , Value = DLCAArray )) stop - 1 #endif write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Getting Values ...' if ( Parameters % Get ( Key = 'I1P' , Value = I1PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I2P' , Value = I2PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I4P' , Value = I4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'I8P' , Value = I8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R4P' , Value = R4PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'R8P' , Value = R8PArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'L' , Value = LArray ) /= 0 ) stop - 1 if ( Parameters % Get ( Key = 'DLCA' , Value = DLCAArray ) /= 0 ) stop - 1 write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Deleting entries ...' call Parameters % Del ( Key = 'I1P' ) call Parameters % Del ( Key = 'I2P' ) call Parameters % Del ( Key = 'I4P' ) call Parameters % Del ( Key = 'I8P' ) call Parameters % Del ( Key = 'R4P' ) call Parameters % Del ( Key = 'R8P' ) call Parameters % Del ( Key = 'L' ) call Parameters % Del ( Key = 'DLCA' ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '' call Parameters % Free () call FPL_Finalize () if ( allocated ( I1Parray )) deallocate ( I1Parray ) if ( allocated ( I2Parray )) deallocate ( I2Parray ) if ( allocated ( I4Parray )) deallocate ( I4Parray ) if ( allocated ( I8Parray )) deallocate ( I8Parray ) if ( allocated ( R4Parray )) deallocate ( R4Parray ) if ( allocated ( R8Parray )) deallocate ( R8Parray ) if ( allocated ( Larray )) deallocate ( Larray ) if ( allocated ( DLCAarray )) deallocate ( DLCAarray ) end Program","tags":"","loc":"sourcefile/parameterlist_wrapper6d_test.f90.html","title":"ParameterList_Wrapper6D_Test.f90 â FPL"},{"text":"This File Depends On sourcefile~~fortranparameterlist_example.f90~~EfferentGraph sourcefile~fortranparameterlist_example.f90 FortranParameterList_Example.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~fortranparameterlist_example.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefilefortranparameterlist_examplef90EfferentGraph = svgPanZoom('#sourcefilefortranparameterlist_examplef90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs FortranParameterList_Example Source Code FortranParameterList_Example.f90 Source Code Program FortranParameterList_Example !----------------------------------------------------------------- !< Example based on Teuchos::ParameterList documentation !----------------------------------------------------------------- USE FPL USE iso_fortran_env , only : REAL64 , OUTPUT_UNIT type ( ParameterList_t ) :: My_List type ( ParameterListIterator_t ) :: My_List_Iterator type ( ParameterList_t ), pointer :: Prec_List type ( ParameterListIterator_t ) :: Prec_List_Iterator integer :: FPLError logical :: solver_defined logical :: prec_defined logical :: has_same_type real ( REAL64 ) :: Tolerance character ( len = :), allocatable :: String call FPL_Init () call My_List % Init () !< Setting parameters in My_List FPLError = My_List % Set ( Key = 'Max Iters' , Value = 1500 ) FPLError = My_List % Set ( Key = 'Tolerance' , Value = 1.e-10_REAL64 ) FPLError = My_List % Set ( Key = 'Solver' , Value = 'GMRES' ) !< Create a 'Preconditioner' SubList of parameters Prec_List => My_List % NewSubList ( Key = 'Preconditioner' ) !< Setting parameters in Prec_List FPLError = Prec_List % Set ( Key = 'Type' , Value = 'ILU' ) FPLError = Prec_List % Set ( Key = 'Drop Tolerance' , Value = 1.e-3_REAL64 ) !< Has a solver been chosen solver_defined = My_List % isPresent ( Key = 'Solver' ) !< Has a preconditioner been chosen prec_defined = My_List % isSubList ( Key = 'Preconditioner' ) !< Has tolerance been chosen and is of the expected data type has_same_type = My_List % isOfDataType ( Key = 'Tolerance' , Mold = Tolerance ) !< Get method thtat retrieves a parameter of a particular type FPLError = My_List % Get ( Key = 'Tolerance' , Value = Tolerance ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -----------' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' | My_List |' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -----------' call My_List % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' ' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -------------' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' | Prec_List |' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -------------' call Prec_List % Print ( unit = OUTPUT_UNIT ) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' ' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -------------' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' | Iterators |' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -------------' nullify ( Prec_List ) String = '' My_List_Iterator = My_List % GetIterator () do while (. not . My_List_Iterator % HasFinished ()) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) 'Iterating over: \"' // My_List_Iterator % GetKey () // '\" ... ' if ( My_List_Iterator % isSubList ()) then FPLError = My_List_Iterator % GetSubList ( Prec_List ) Prec_List_Iterator = Prec_List % GetIterator () do while (. not . Prec_List_Iterator % HasFinished ()) write ( unit = OUTPUT_UNIT , fmt = '(A)' ) '   Iterating over: \"' // Prec_List_Iterator % GetKey () // '\" ... ' if (. not . Prec_List_Iterator % isSubList ()) then call Prec_List_Iterator % Print ( prefix = '     ' ) String = String // Prec_List_Iterator % GetKey () // '=' // Prec_List_Iterator % toString ( Separator = ' ' ) // '; ' endif call Prec_List_Iterator % Next () enddo else String = String // My_List_Iterator % GetKey () // '=' // My_List_Iterator % toString ( Separator = ' ' ) // '; ' call My_List_Iterator % Print ( prefix = '  ' ) endif call My_List_Iterator % Next () enddo write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' ' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -----------------' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' | All in a line |' write ( unit = OUTPUT_UNIT , fmt = '(A)' ) ' -----------------' print * , String call My_List % Free () call My_List_Iterator % Free () call Prec_List_Iterator % Free () call FPL_Finalize () end program","tags":"","loc":"sourcefile/fortranparameterlist_example.f90.html","title":"FortranParameterList_Example.f90 â FPL"},{"text":"This File Depends On sourcefile~~circlewrapper.f90~~EfferentGraph sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~circle.f90 Circle.f90 sourcefile~circle.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~circlewrapper.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~circlewrapper.f90~~AfferentGraph sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules CircleWrapper Source Code CircleWrapper.f90 Source Code module CircleWrapper USE Circle !< USE the data type to store USE DimensionsWrapper0D !< USE the DimensionsWrapper0D abstract class USE ErrorMessages !< USE the ErrorMessages for printing error messages USE PENF , only : I4P , str !< USE I4P data type and str for string conversion implicit none private type , extends ( DimensionsWrapper0D_t ) :: CircleWrapper_t !< Extends from DimensionsWrapper0D_t (scalar value) type ( Circle_T ), allocatable :: Value !< Value stores a copy of the input data by assignment contains private procedure , public :: Set => CircleWrapper_Set !< Sets the Value into the Wrapper procedure , public :: Get => CircleWrapper_Get !< Gets the Value from the Wrapper procedure , public :: GetShape => CircleWrapper_GetShape !< Return the shape of the stored Value (0, scalar value) procedure , public :: GetPointer => CircleWrapper_GetPointer !< Return an unlimited polymorphic pointer to the Value procedure , public :: DataSizeInBytes => CircleWrapper_DataSizeInBytes !< Return the size of the stored data in bytes procedure , public :: isOfDataType => CircleWrapper_isOfDataType !< Check if the data type of a input Mold is Circle_t procedure , public :: toString => CircleWrapper_toString !< Return the value as a string procedure , public :: Free => CircleWrapper_Free !< Free the Wrapper procedure , public :: Print => CircleWrapper_Print !< Print the Wrapper content end type public :: CircleWrapper_t contains subroutine CircleWrapper_Set ( this , Value ) !----------------------------------------------------------------- !< Set Circle Wrapper Value !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( INOUT ) :: this class ( * ), intent ( IN ) :: Value integer :: err !----------------------------------------------------------------- select type ( Value ) type is ( Circle_t ) allocate ( this % Value , stat = err ) this % Value = Value if ( err /= 0 ) & call msg % Error ( txt = 'Setting Value: Allocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) class Default call msg % Warn ( txt = 'Setting value: Expected data type (Circle)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine CircleWrapper_Get ( this , Value ) !----------------------------------------------------------------- !< Get Circle Wrapper Value !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this class ( * ), intent ( OUT ) :: Value !----------------------------------------------------------------- select type ( Value ) type is ( Circle_t ) Value = this % Value class Default call msg % Warn ( txt = 'Getting value: Expected data type (Circle)' ,& file = __ FILE__ , line = __ LINE__ ) end select end subroutine subroutine CircleWrapper_GetShape ( this , ValueShape ) !----------------------------------------------------------------- !< Return the shape of the Wrapper Value !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this integer ( I4P ), allocatable , intent ( INOUT ) :: ValueShape (:) !----------------------------------------------------------------- if ( allocated ( ValueShape )) deallocate ( ValueShape ) allocate ( ValueShape ( 1 )) ValueShape = 0 end subroutine function CircleWrapper_GetPointer ( this ) result ( Value ) !----------------------------------------------------------------- !< Get Unlimited Polymorphic pointer to Wrapper Value !----------------------------------------------------------------- class ( CircleWrapper_t ), target , intent ( IN ) :: this class ( * ), pointer :: Value !----------------------------------------------------------------- Value => this % Value end function subroutine CircleWrapper_Free ( this ) !----------------------------------------------------------------- !< Free a CircleWrapper0D !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( INOUT ) :: this integer :: err !----------------------------------------------------------------- if ( allocated ( this % Value )) then deallocate ( this % Value , stat = err ) if ( err /= 0 ) call msg % Error ( txt = 'Freeing Value: Deallocation error (' // & str ( no_sign = . true ., n = err ) // ')' , & file = __ FILE__ , line = __ LINE__ ) endif end subroutine function CircleWrapper_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this !< Circle wrapper 0D integer ( I4P ) :: DataSizeInBytes !< Data size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = this % value % DataSizeInBytes () end function CircleWrapper_DataSizeInBytes function CircleWrapper_isOfDataType ( this , Mold ) result ( isOfDataType ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this !< Circle wrapper 0D class ( * ), intent ( IN ) :: Mold !< Mold for data type comparison logical :: isOfDataType !< Boolean flag to check if Value is of the same data type as Mold !----------------------------------------------------------------- isOfDataType = . false . select type ( Mold ) type is ( Circle_t ) isOfDataType = . true . end select end function CircleWrapper_isOfDataType function CircleWrapper_toString ( this , Separator ) result ( String ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this !< Circle wrapper 0D character ( len = 1 ), optional , intent ( IN ) :: Separator !< Value separator for multidimensional variables character ( len = :), allocatable :: String !< Return the Value as a string real :: Radius !< Circle radius !----------------------------------------------------------------- String = '' if ( allocated ( this % Value )) then call this % Value % GetRadius ( Radius = Radius ) String = 'Radius = ' // str ( no_sign = . true ., n = Radius ) endif end function CircleWrapper_toString subroutine CircleWrapper_Print ( this , unit , prefix , iostat , iomsg ) !----------------------------------------------------------------- !< Print Wrapper !----------------------------------------------------------------- class ( CircleWrapper_t ), intent ( IN ) :: this !< CircleWrapper integer ( I4P ), intent ( IN ) :: unit !< Logic unit. character ( * ), optional , intent ( IN ) :: prefix !< Prefixing string. integer ( I4P ), optional , intent ( OUT ) :: iostat !< IO error. character ( * ), optional , intent ( OUT ) :: iomsg !< IO error message. character ( len = :), allocatable :: prefd !< Prefixing string. integer ( I4P ) :: iostatd !< IO error. character ( 500 ) :: iomsgd !< Temporary variable for IO error message. real :: Radius !< Circle radius !----------------------------------------------------------------- prefd = '' ; if ( present ( prefix )) prefd = prefix write ( unit = unit , fmt = '(A)' , iostat = iostatd , iomsg = iomsgd ) prefd // ' Data Type = Circle' // & ', ' // this % toString () if ( present ( iostat )) iostat = iostatd if ( present ( iomsg )) iomsg = iomsgd end subroutine CircleWrapper_Print end module CircleWrapper","tags":"","loc":"sourcefile/circlewrapper.f90.html","title":"CircleWrapper.f90 â FPL"},{"text":"Files Dependent On This One sourcefile~~circle.f90~~AfferentGraph sourcefile~circle.f90 Circle.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circle.f90->sourcefile~extendwrappers.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~circle.f90->sourcefile~circlewrapper.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~circle.f90->sourcefile~circlewrapperfactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules Circle Source Code Circle.f90 Source Code module Circle implicit none private type :: Circle_t private real :: Radius contains private procedure :: Circle_Assign procedure , public :: SetRadius => Circle_SetRadius procedure , public :: GetRadius => Circle_GetRadius procedure , public :: DataSizeInBytes => Circle_DataSizeInBytes generic , public :: assignment ( = ) => Circle_Assign end type Circle_t public :: Circle_t contains subroutine Circle_Assign ( A , B ) !----------------------------------------------------------------- !< Assignment overloading !----------------------------------------------------------------- class ( Circle_t ), intent ( OUT ) :: A class ( Circle_t ), intent ( IN ) :: B real :: Radius !----------------------------------------------------------------- call B % GetRadius ( Radius = Radius ) call A % SetRadius ( Radius = Radius ) end subroutine subroutine Circle_SetRadius ( this , Radius ) !----------------------------------------------------------------- !< Set the radius of the Circle !----------------------------------------------------------------- class ( Circle_t ), intent ( INOUT ) :: this real , intent ( IN ) :: Radius !----------------------------------------------------------------- this % Radius = Radius end subroutine subroutine Circle_GetRadius ( this , Radius ) !----------------------------------------------------------------- !< Return the radius of the circle !----------------------------------------------------------------- class ( Circle_t ), intent ( IN ) :: this real , intent ( OUT ) :: Radius !----------------------------------------------------------------- Radius = this % Radius end subroutine function Circle_DataSizeInBytes ( this ) result ( DataSizeInBytes ) !----------------------------------------------------------------- !< Check if Mold and Value are of the same datatype !----------------------------------------------------------------- class ( Circle_t ), intent ( IN ) :: this !< Circle wrapper 0D integer :: DataSizeInBytes !< Data size of the stored data in bytes !----------------------------------------------------------------- DataSizeInBytes = 4 end function Circle_DataSizeInBytes end module","tags":"","loc":"sourcefile/circle.f90.html","title":"Circle.f90 â FPL"},{"text":"This File Depends On sourcefile~~extendwrappers.f90~~EfferentGraph sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circle.f90 Circle.f90 sourcefile~circle.f90->sourcefile~extendwrappers.f90 sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~circle.f90->sourcefile~circlewrapperfactory.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~circle.f90->sourcefile~circlewrapper.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 sourcefile~fpl.f90 FPL.f90 sourcefile~fpl.f90->sourcefile~extendwrappers.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~circlewrapperfactory.f90 sourcefile~parameterlist.f90 ParameterList.f90 sourcefile~wrapperfactory.f90->sourcefile~parameterlist.f90 sourcefile~i4pwrapperfactory.f90 I4PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~r4pwrapperfactory.f90 R4PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dlacwrapperfactory.f90 DLACWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~i1pwrapperfactory.f90 I1PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~r8pwrapperfactory.f90 R8PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~wrapperfactorylist.f90 WrapperFactoryList.f90 sourcefile~wrapperfactory.f90->sourcefile~wrapperfactorylist.f90 sourcefile~i8pwrapperfactory.f90 I8PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~i2pwrapperfactory.f90 I2PWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~lwrapperfactory.f90 LWrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~lwrapperfactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~circlewrapperfactory.f90 sourcefile~errormessages.f90->sourcefile~circlewrapper.f90 sourcefile~errormessages.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d_i4p.f90 DimensionsWrapper0D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper1d_i4p.f90 DimensionsWrapper1D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper3d_i4p.f90 DimensionsWrapper3D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper2d_i4p.f90 DimensionsWrapper2D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper5d_i4p.f90 DimensionsWrapper5D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper4d_i4p.f90 DimensionsWrapper4D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper7d_i4p.f90 DimensionsWrapper7D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper6d_i4p.f90 DimensionsWrapper6D_I4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper2d_r4p.f90 DimensionsWrapper2D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper6d_r4p.f90 DimensionsWrapper6D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper5d_r4p.f90 DimensionsWrapper5D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper1d_r4p.f90 DimensionsWrapper1D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper7d_r4p.f90 DimensionsWrapper7D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper0d_r4p.f90 DimensionsWrapper0D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper4d_r4p.f90 DimensionsWrapper4D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper3d_r4p.f90 DimensionsWrapper3D_R4P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper0d_dlca.f90 DimensionsWrapper0D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper1d_dlca.f90 DimensionsWrapper1D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper5d_dlca.f90 DimensionsWrapper5D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper3d_dlca.f90 DimensionsWrapper3D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper6d_dlca.f90 DimensionsWrapper6D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper7d_dlca.f90 DimensionsWrapper7D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper2d_dlca.f90 DimensionsWrapper2D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper4d_dlca.f90 DimensionsWrapper4D_DLCA.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper1d_i1p.f90 DimensionsWrapper1D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper4d_i1p.f90 DimensionsWrapper4D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper0d_i1p.f90 DimensionsWrapper0D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper6d_i1p.f90 DimensionsWrapper6D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper7d_i1p.f90 DimensionsWrapper7D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper2d_i1p.f90 DimensionsWrapper2D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper3d_i1p.f90 DimensionsWrapper3D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper5d_i1p.f90 DimensionsWrapper5D_I1P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper6d_r8p.f90 DimensionsWrapper6D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper2d_r8p.f90 DimensionsWrapper2D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper1d_r8p.f90 DimensionsWrapper1D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper5d_r8p.f90 DimensionsWrapper5D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper0d_r8p.f90 DimensionsWrapper0D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper4d_r8p.f90 DimensionsWrapper4D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper3d_r8p.f90 DimensionsWrapper3D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper7d_r8p.f90 DimensionsWrapper7D_R8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper1d_i8p.f90 DimensionsWrapper1D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper5d_i8p.f90 DimensionsWrapper5D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper6d_i8p.f90 DimensionsWrapper6D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper2d_i8p.f90 DimensionsWrapper2D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper0d_i8p.f90 DimensionsWrapper0D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper4d_i8p.f90 DimensionsWrapper4D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper3d_i8p.f90 DimensionsWrapper3D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper7d_i8p.f90 DimensionsWrapper7D_I8P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper1d_i2p.f90 DimensionsWrapper1D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper0d_i2p.f90 DimensionsWrapper0D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper5d_i2p.f90 DimensionsWrapper5D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper2d_i2p.f90 DimensionsWrapper2D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper4d_i2p.f90 DimensionsWrapper4D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper3d_i2p.f90 DimensionsWrapper3D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper7d_i2p.f90 DimensionsWrapper7D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper6d_i2p.f90 DimensionsWrapper6D_I2P.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d_l.f90 DimensionsWrapper6D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~dimensionswrapper1d_l.f90 DimensionsWrapper1D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper0d_l.f90 DimensionsWrapper0D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~dimensionswrapper5d_l.f90 DimensionsWrapper5D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~dimensionswrapper4d_l.f90 DimensionsWrapper4D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper3d_l.f90 DimensionsWrapper3D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d_l.f90 DimensionsWrapper2D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~dimensionswrapper7d_l.f90 DimensionsWrapper7D_L.f90 sourcefile~errormessages.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90 DimensionsWrapper3D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper3d.f90 sourcefile~dimensionswrapper2d.f90 DimensionsWrapper2D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper2d.f90 sourcefile~dimensionswrapper6d.f90 DimensionsWrapper6D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper6d.f90 sourcefile~dimensionswrapper1d.f90 DimensionsWrapper1D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper1d.f90 sourcefile~dimensionswrapper4d.f90 DimensionsWrapper4D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper4d.f90 sourcefile~dimensionswrapper7d.f90 DimensionsWrapper7D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper7d.f90 sourcefile~parameterentry.f90 ParameterEntry.f90 sourcefile~dimensionswrapper.f90->sourcefile~parameterentry.f90 sourcefile~dimensionswrapper5d.f90 DimensionsWrapper5D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper5d.f90 sourcefile~dimensionswrapper.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r4p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_dlca.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i1p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_r8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i8p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_i2p.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~parameterlist.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90 WrapperFactoryListSingleton.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~fpl.f90 sourcefile~wrapperfactorylistsingleton.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r4p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_dlca.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i1p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_r8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i8p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_i2p.f90 sourcefile~dimensionswrapper3d.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r4p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_dlca.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i1p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_r8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i8p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_i2p.f90 sourcefile~dimensionswrapper2d.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~parameterrootentry.f90 ParameterRootEntry.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentrydictionary.f90 ParameterEntryDictionary.f90 sourcefile~parameterrootentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r4p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_dlca.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i1p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_r8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i8p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_i2p.f90 sourcefile~dimensionswrapper6d.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~parameterentrydictionary.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r4p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_dlca.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i1p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_r8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i8p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_i2p.f90 sourcefile~dimensionswrapper1d.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r4p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_dlca.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i1p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_r8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i8p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_i2p.f90 sourcefile~dimensionswrapper4d.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r4p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_dlca.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i1p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_r8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i8p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_i2p.f90 sourcefile~dimensionswrapper7d.f90->sourcefile~dimensionswrapper7d_l.f90 sourcefile~parameterentry.f90->sourcefile~parameterlist.f90 sourcefile~parameterentry.f90->sourcefile~parameterrootentry.f90 sourcefile~parameterentry.f90->sourcefile~parameterentrydictionary.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~parameterlist.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r4p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_dlca.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i1p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_r8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i8p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_i2p.f90 sourcefile~dimensionswrapper5d.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~i4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r4pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dlacwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i1pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~r8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~wrapperfactorylist.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i8pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~i2pwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~lwrapperfactory.f90->sourcefile~wrapperfactorylistsingleton.f90 sourcefile~dimensionswrapper0d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i4p.f90->sourcefile~i4pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r4p.f90->sourcefile~r4pwrapperfactory.f90 sourcefile~dimensionswrapper0d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper5d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper3d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper6d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper7d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper2d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper4d_dlca.f90->sourcefile~dlacwrapperfactory.f90 sourcefile~dimensionswrapper1d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i1p.f90->sourcefile~i1pwrapperfactory.f90 sourcefile~dimensionswrapper6d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_r8p.f90->sourcefile~r8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i8p.f90->sourcefile~i8pwrapperfactory.f90 sourcefile~dimensionswrapper1d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper0d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper5d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper2d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper4d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper3d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper7d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_i2p.f90->sourcefile~i2pwrapperfactory.f90 sourcefile~dimensionswrapper6d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper1d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper0d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper5d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper4d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper3d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper2d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~dimensionswrapper7d_l.f90->sourcefile~lwrapperfactory.f90 sourcefile~fpl_utils.f90 FPL_utils.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper6d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper1d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper0d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper5d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper4d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper3d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper2d_l.f90 sourcefile~fpl_utils.f90->sourcefile~dimensionswrapper7d_l.f90 var pansourcefileextendwrappersf90EfferentGraph = svgPanZoom('#sourcefileextendwrappersf90EfferentGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs main Source Code ExtendWrappers.f90 Source Code program main USE FPL USE Circle USE CircleWrapperFactory USE iso_fortran_env , only : OUTPUT_UNIT type ( Circle_t ) :: MyCircle type ( ParameterList_t ) :: MyList type ( ParameterList_t ), pointer :: CircleList integer :: FPLError character ( len = :), allocatable :: String !< Initialize FPL with the default WrapperFactories call FPL_Init () !< Add the new WrapperFactory to the list of factories call TheWrapperFactoryList % AddWrapperFactory ( Key = 'CircleFactory' , WrapperFactory = WrapperFactoryCircle ) !< Sets the default size of the Dictionary call myList % Init () !< Add parameters to the list FPLError = MyList % Set ( Key = 'NumberOfCircles' , Value = 5 ) FPLError = MyList % GetAsString ( Key = 'NumberOfCircles' , String = String ) print * , 'NumberOfCircles = ' // String !< Add a SubList to the list CircleList => MyList % NewSubList ( Key = 'Circles' ) !< Add parameters to the Cicles SubList call myCircle % SetRadius ( Radius = 1.0 ); FPLError = CircleList % Set ( Key = 'Circle_1' , Value = myCircle ) call myCircle % SetRadius ( Radius = 2.0 ); FPLError = CircleList % Set ( Key = 'Circle_2' , Value = myCircle ) call myCircle % SetRadius ( Radius = 3.0 ); FPLError = CircleList % Set ( Key = 'Circle_3' , Value = myCircle ) call myCircle % SetRadius ( Radius = 4.0 ); FPLError = CircleList % Set ( Key = 'Circle_4' , Value = myCircle ) call myCircle % SetRadius ( Radius = 5.0 ); FPLError = CircleList % Set ( Key = 'Circle_5' , Value = myCircle ) !< Print the content of MyList (Recursive) call MyList % Print () !< Free MyList call MyList % Free () !< Finalize FPL and free TheWrapperFactoryList call FPL_Finalize () end program","tags":"","loc":"sourcefile/extendwrappers.f90.html","title":"ExtendWrappers.f90 â FPL"},{"text":"This File Depends On sourcefile~~circlewrapperfactory.f90~~EfferentGraph sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~circle.f90 Circle.f90 sourcefile~circle.f90->sourcefile~circlewrapperfactory.f90 sourcefile~circlewrapper.f90 CircleWrapper.f90 sourcefile~circle.f90->sourcefile~circlewrapper.f90 sourcefile~wrapperfactory.f90 WrapperFactory.f90 sourcefile~wrapperfactory.f90->sourcefile~circlewrapperfactory.f90 sourcefile~circlewrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~errormessages.f90 ErrorMessages.f90 sourcefile~errormessages.f90->sourcefile~circlewrapperfactory.f90 sourcefile~errormessages.f90->sourcefile~circlewrapper.f90 sourcefile~dimensionswrapper.f90 DimensionsWrapper.f90 sourcefile~dimensionswrapper.f90->sourcefile~circlewrapperfactory.f90 sourcefile~dimensionswrapper.f90->sourcefile~wrapperfactory.f90 sourcefile~dimensionswrapper0d.f90 DimensionsWrapper0D.f90 sourcefile~dimensionswrapper.f90->sourcefile~dimensionswrapper0d.f90 sourcefile~dimensionswrapper0d.f90->sourcefile~circlewrapper.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~circlewrapperfactory.f90~~AfferentGraph sourcefile~circlewrapperfactory.f90 CircleWrapperFactory.f90 sourcefile~extendwrappers.f90 ExtendWrappers.f90 sourcefile~circlewrapperfactory.f90->sourcefile~extendwrappers.f90 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules CircleWrapperFactory Source Code CircleWrapperFactory.f90 Source Code module CircleWrapperFactory USE Circle !< USE the data type to store USE CircleWrapper !< USE the corresponding Wrapper USE DimensionsWrapper !< USE the DimensionsWrapper abstract class USE WrapperFactory !< USE the WrapperFactory abstract class USE ErrorMessages !< USE the ErrorMessages for printing error messages USE PENF , only : I1P !< USE I1P data type implicit none private type , extends ( WrapperFactory_t ) :: CircleWrapperFactory_t private contains procedure :: Wrap0D => CircleWrapperFactory_Wrap0D !< Wraps scalar Circles procedure :: Wrap1D => CircleWrapperFactory_Wrap1D !< Wraps 1D arrays of Circles procedure :: Wrap2D => CircleWrapperFactory_Wrap2D !< Wraps 2D arrays of Circles procedure :: Wrap3D => CircleWrapperFactory_Wrap3D !< Wraps 3D arrays of Circles procedure :: Wrap4D => CircleWrapperFactory_Wrap4D !< Wraps 4D arrays of Circles procedure :: Wrap5D => CircleWrapperFactory_Wrap5D !< Wraps 5D arrays of Circles procedure :: Wrap6D => CircleWrapperFactory_Wrap6D !< Wraps 6D arrays of Circles procedure :: Wrap7D => CircleWrapperFactory_Wrap7D !< Wraps 7D arrays of Circles procedure , public :: hasSameType => CircleWrapperFactory_hasSameType !< Check if the data type of a input Mold is Circle_t end type type ( CircleWrapperFactory_t ), public :: WrapperFactoryCircle !< Public Wrapper Factory (singleton) contains function CircleWrapperFactory_hasSameType ( this , Value ) result ( hasSameType ) !----------------------------------------------------------------- !< Check if Value type agrees with wrapper type !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value logical :: hasSameType !----------------------------------------------------------------- hasSameType = . false . select type ( Value ) type is ( Circle_t ) hasSameType = . true . end select end function CircleWrapperFactory_hasSameType function CircleWrapperFactory_Wrap0D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 0D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- if ( this % hasSameType ( Value )) then allocate ( CircleWrapper_t :: Wrapper ) call Wrapper % SetDimensions ( Dimensions = 0_I1P ) select type ( Wrapper ) type is ( CircleWrapper_t ) call Wrapper % Set ( Value = Value ) end select endif end function CircleWrapperFactory_Wrap0D function CircleWrapperFactory_Wrap1D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 1D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap1D function CircleWrapperFactory_Wrap2D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 2D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap2D function CircleWrapperFactory_Wrap3D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 3D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap3D function CircleWrapperFactory_Wrap4D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 4D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap4D function CircleWrapperFactory_Wrap5D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 5D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap5D function CircleWrapperFactory_Wrap6D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 6D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap6D function CircleWrapperFactory_Wrap7D ( this , Value ) result ( Wrapper ) !----------------------------------------------------------------- !< Create Circle 7D Wrapper !----------------------------------------------------------------- class ( CircleWrapperFactory_t ), intent ( IN ) :: this class ( * ), intent ( IN ) :: Value ( 1 :, 1 :, 1 :, 1 :, 1 :, 1 :, 1 :) class ( DimensionsWrapper_t ), pointer :: Wrapper !----------------------------------------------------------------- call msg % Error ( txt = 'Setting Value: Only scalar circle data type allowed' , & file = __ FILE__ , line = __ LINE__ ) end function CircleWrapperFactory_Wrap7D end module CircleWrapperFactory","tags":"","loc":"sourcefile/circlewrapperfactory.f90.html","title":"CircleWrapperFactory.f90 â FPL"},{"text":"type, public :: ParameterList_t Finalization Procedures ParameterList_Finalize Type-Bound Procedures Set Get GetPointer isOfDataType isAssignable DataSizeInBytes Del Init GetShape GetDimensions NewSubList GetSubList isPresent isSubList GetAsString Free Print Length GetIterator Source Code ParameterList_t Finalization Procedures final :: ParameterList_Finalize private subroutine ParameterList_Finalize(this) Destructor procedure Arguments Type Intent Optional Attributes Name type( ParameterList_t ), intent(inout) :: this Parameter List Type-Bound Procedures generic, public :: Set => ParameterList_Set0D, ParameterList_Set1D, ParameterList_Set2D, ParameterList_Set3D, ParameterList_Set4D, ParameterList_Set5D, ParameterList_Set6D, ParameterList_Set7D private function ParameterList_Set0D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the Dictionary Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value Unlimited polymorphic Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set1D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:) Unlimited polymorphic 1D array Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set2D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:) Unlimited polymorphic 2D array value Return Value integer(kind=I4P) Error flag private function ParameterList_Set3D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:,:) Unlimited Polimorphic 3D array Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set4D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:,:,:) Unlimited Polymorphic 4D array Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set5D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:,:,:,:) Unlimited Polymorphic 5D array Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set6D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:,:,:,:,:) Unlimited Polymorphic 5D array Value Return Value integer(kind=I4P) Error flag private function ParameterList_Set7D(this, Key, Value) result(FPLerror) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (:,:,:,:,:,:,:) Unlimited Polymorphic 7D array Value Return Value integer(kind=I4P) Error flag generic, public :: Get => ParameterList_Get0D, ParameterList_Get1D, ParameterList_Get2D, ParameterList_Get3D, ParameterList_Get4D, ParameterList_Get5D, ParameterList_Get6D, ParameterList_Get7D private function ParameterList_Get0D(this, Key, Value) result(FPLerror) Return a scalar Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get1D(this, Key, Value) result(FPLerror) Return a vector Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get2D(this, Key, Value) result(FPLerror) Return a 2D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get3D(this, Key, Value) result(FPLerror) Return a 3D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get4D(this, Key, Value) result(FPLerror) Return a 4D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get5D(this, Key, Value) result(FPLerror) Return a 5D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get6D(this, Key, Value) result(FPLerror) Return a 6D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterList_Get7D(this, Key, Value) result(FPLerror) Return a 7D array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout) :: Value (:,:,:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag generic, public :: GetPointer => ParameterList_GetPointer0D, ParameterList_GetPointer1D, ParameterList_GetPointer2D, ParameterList_GetPointer3D, ParameterList_GetPointer4D, ParameterList_GetPointer5D, ParameterList_GetPointer6D, ParameterList_GetPointer7D private function ParameterList_GetPointer0D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer1D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer2D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer3D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer4D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:,:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer5D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:,:,:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer6D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:,:,:,:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag private function ParameterList_GetPointer7D(this, Key, Value) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value (:,:,:,:,:,:,:) Returned pointer to value Return Value integer(kind=I4P) Error flag generic, public :: isOfDataType => ParameterList_IsOfDataType0D, ParameterList_IsOfDataType1D, ParameterList_IsOfDataType2D, ParameterList_IsOfDataType3D, ParameterList_IsOfDataType4D, ParameterList_IsOfDataType5D, ParameterList_IsOfDataType6D, ParameterList_IsOfDataType7D private function ParameterList_isOfDataType0D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType1D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType2D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType3D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType4D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType5D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType6D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterList_isOfDataType7D(this, Key, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Mold (1:,1:,1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type generic, public :: isAssignable => ParameterList_isAssignable0D, ParameterList_isAssignable1D, ParameterList_isAssignable2D, ParameterList_isAssignable3D, ParameterList_isAssignable4D, ParameterList_isAssignable5D, ParameterList_isAssignable6D, ParameterList_isAssignable7D private function ParameterList_isAssignable0D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value Value to compare with the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable1D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:) Value to check against with the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable2D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:) Value to check against with the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable3D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:,1:) Value to check against with the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable4D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:,1:,1:) Value to check against the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable5D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:,1:,1:,1:) Value to check against the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable6D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:) Value to check against the stored variable Return Value logical Boolean flag to check compatibility private function ParameterList_isAssignable7D(this, Key, Value) result(Assignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:,1:) Value to check against the stored variable Return Value logical Boolean flag to check compatibility procedure, public, non_overridable :: DataSizeInBytes => ParameterList_DataSizeInBytes private function ParameterList_DataSizeInBytes(this, Key) result(DataSizeInBytes) Return the data size in bytes of the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key Return Value integer(kind=I4P) Size in bytes procedure, public, non_overridable :: Del => ParameterList_RemoveEntry private subroutine ParameterList_RemoveEntry(this, Key) Remove an Entry given a Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key procedure, public, non_overridable :: Init => ParameterList_Init private subroutine ParameterList_Init(this, Size) Initialize the dictionary Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List integer(kind=I4P), intent(in), optional :: Size Dictionary Size procedure, public, non_overridable :: GetShape => ParameterList_GetShape private function ParameterList_GetShape(this, Key, Shape) result(FPLerror) Return an allocatable array with the shape of the contained value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key integer(kind=I4P), intent(inout), allocatable :: Shape (:) Shape of the stored value Return Value integer(kind=I4P) Error flag procedure, public, non_overridable :: GetDimensions => ParameterList_GetDimensions private function ParameterList_GetDimensions(this, Key) result(Dimensions) Return an integer with the dimensions of the contained value Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key Return Value integer(kind=I4P) Dimensions of the stored value procedure, public, non_overridable :: NewSubList => ParameterList_NewSubList private function ParameterList_NewSubList(this, Key, Size) result(SublistPointer) Set a Key/Value pair into the dictionary Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List character(len=*), intent(in) :: Key String Key integer(kind=I4P), intent(in), optional :: Size Sublist Size Return Value class( ParameterList_t ),\n  pointer New Sublist pointer procedure, public, non_overridable :: GetSubList => ParameterList_GetSublist private function ParameterList_GetSublist(this, Key, Sublist) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key class( ParameterList_t ), intent(inout), pointer :: Sublist Wrapper Return Value integer(kind=I4P) Error flag procedure, public, non_overridable :: isPresent => ParameterList_isPresent private function ParameterList_isPresent(this, Key) result(isPresent) Check if a Key is present at the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key Return Value logical Boolean flag to check if a Key is present procedure, public, non_overridable :: isSubList => ParameterList_isSubList private function ParameterList_isSubList(this, Key) result(isSubList) Check if a Key is a SubList Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key Return Value logical Check if is a SubList procedure, public, non_overridable :: GetAsString => ParameterList_GetAsString private function ParameterList_GetAsString(this, Key, String, Separator) result(FPLerror) Return a scalar Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key character(len=:), intent(inout), allocatable :: String Returned value as string character(len=1), intent(in), optional :: Separator Array values separator Return Value integer(kind=I4P) Error flag procedure, public, non_overridable :: Free => ParameterList_Free private subroutine ParameterList_Free(this) Free the dictionary Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(inout) :: this Parameter List procedure, public, non_overridable :: Print => ParameterList_Print private recursive subroutine ParameterList_Print(this, unit, prefix, iostat, iomsg) Print the content of the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Linked List integer(kind=I4P), intent(in), optional :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public, non_overridable :: Length => ParameterList_Length private function ParameterList_Length(this) result(Length) Return the number of ParameterListEntries contained in the DataBase Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List Return Value integer(kind=I4P) Number of parameters in database procedure, public, non_overridable :: GetIterator => ParameterList_GetIterator private function ParameterList_GetIterator(this) result(Iterator) Return a pointer to a Parameters Iterator Arguments Type Intent Optional Attributes Name class( ParameterList_t ), intent(in) :: this Parameter List Entry Container Type Return Value type( ParameterListIterator_t ) Parameter List iterator Source Code type :: ParameterList_t private type ( ParameterEntryDictionary_t ) :: Dictionary contains private procedure , non_overridable :: ParameterList_Set0D procedure , non_overridable :: ParameterList_Set1D procedure , non_overridable :: ParameterList_Set2D procedure , non_overridable :: ParameterList_Set3D procedure , non_overridable :: ParameterList_Set4D procedure , non_overridable :: ParameterList_Set5D procedure , non_overridable :: ParameterList_Set6D procedure , non_overridable :: ParameterList_Set7D procedure , non_overridable :: ParameterList_Get0D procedure , non_overridable :: ParameterList_Get1D procedure , non_overridable :: ParameterList_Get2D procedure , non_overridable :: ParameterList_Get3D procedure , non_overridable :: ParameterList_Get4D procedure , non_overridable :: ParameterList_Get5D procedure , non_overridable :: ParameterList_Get6D procedure , non_overridable :: ParameterList_Get7D procedure , non_overridable :: ParameterList_GetPointer0D procedure , non_overridable :: ParameterList_GetPointer1D procedure , non_overridable :: ParameterList_GetPointer2D procedure , non_overridable :: ParameterList_GetPointer3D procedure , non_overridable :: ParameterList_GetPointer4D procedure , non_overridable :: ParameterList_GetPointer5D procedure , non_overridable :: ParameterList_GetPointer6D procedure , non_overridable :: ParameterList_GetPointer7D procedure , non_overridable :: ParameterList_IsOfDataType0D procedure , non_overridable :: ParameterList_IsOfDataType1D procedure , non_overridable :: ParameterList_IsOfDataType2D procedure , non_overridable :: ParameterList_IsOfDataType3D procedure , non_overridable :: ParameterList_IsOfDataType4D procedure , non_overridable :: ParameterList_IsOfDataType5D procedure , non_overridable :: ParameterList_IsOfDataType6D procedure , non_overridable :: ParameterList_IsOfDataType7D procedure , non_overridable :: ParameterList_isAssignable0D procedure , non_overridable :: ParameterList_isAssignable1D procedure , non_overridable :: ParameterList_isAssignable2D procedure , non_overridable :: ParameterList_isAssignable3D procedure , non_overridable :: ParameterList_isAssignable4D procedure , non_overridable :: ParameterList_isAssignable5D procedure , non_overridable :: ParameterList_isAssignable6D procedure , non_overridable :: ParameterList_isAssignable7D generic , public :: Set => ParameterList_Set0D , & ParameterList_Set1D , & ParameterList_Set2D , & ParameterList_Set3D , & ParameterList_Set4D , & ParameterList_Set5D , & ParameterList_Set6D , & ParameterList_Set7D generic , public :: Get => ParameterList_Get0D , & ParameterList_Get1D , & ParameterList_Get2D , & ParameterList_Get3D , & ParameterList_Get4D , & ParameterList_Get5D , & ParameterList_Get6D , & ParameterList_Get7D generic , public :: GetPointer => ParameterList_GetPointer0D , & ParameterList_GetPointer1D , & ParameterList_GetPointer2D , & ParameterList_GetPointer3D , & ParameterList_GetPointer4D , & ParameterList_GetPointer5D , & ParameterList_GetPointer6D , & ParameterList_GetPointer7D generic , public :: isOfDataType => ParameterList_IsOfDataType0D , & ParameterList_IsOfDataType1D , & ParameterList_IsOfDataType2D , & ParameterList_IsOfDataType3D , & ParameterList_IsOfDataType4D , & ParameterList_IsOfDataType5D , & ParameterList_IsOfDataType6D , & ParameterList_IsOfDataType7D generic , public :: isAssignable => ParameterList_isAssignable0D , & ParameterList_isAssignable1D , & ParameterList_isAssignable2D , & ParameterList_isAssignable3D , & ParameterList_isAssignable4D , & ParameterList_isAssignable5D , & ParameterList_isAssignable6D , & ParameterList_isAssignable7D procedure , non_overridable , public :: DataSizeInBytes => ParameterList_DataSizeInBytes procedure , non_overridable , public :: Del => ParameterList_RemoveEntry procedure , non_overridable , public :: Init => ParameterList_Init procedure , non_overridable , public :: GetShape => ParameterList_GetShape procedure , non_overridable , public :: GetDimensions => ParameterList_GetDimensions procedure , non_overridable , public :: NewSubList => ParameterList_NewSubList procedure , non_overridable , public :: GetSubList => ParameterList_GetSubList procedure , non_overridable , public :: isPresent => ParameterList_isPresent procedure , non_overridable , public :: isSubList => ParameterList_isSubList procedure , non_overridable , public :: GetAsString => ParameterList_GetAsString procedure , non_overridable , public :: Free => ParameterList_Free procedure , non_overridable , public :: Print => ParameterList_Print procedure , non_overridable , public :: Length => ParameterList_Length procedure , non_overridable , public :: GetIterator => ParameterList_GetIterator final :: ParameterList_Finalize end type ParameterList_t","tags":"","loc":"type/parameterlist_t.html","title":"ParameterList_t â FPL "},{"text":"type, public :: ParameterListIterator_t Finalization Procedures ParameterListIterator_Final Type-Bound Procedures GetKey Init Begin End Next HasFinished GetShape GetDimensions DataSizeInBytes GetSubList isSubList toString Print Free Get isOfDataType isAssignable Assignment(=) Finalization Procedures final :: ParameterListIterator_Final private subroutine ParameterListIterator_Final(this) Free the dictionary iterator Arguments Type Intent Optional Attributes Name type( ParameterListIterator_t ), intent(inout) :: this Type-Bound Procedures procedure, public, non_overridable :: GetKey => ParameterListIterator_GetKey private function ParameterListIterator_GetKey(this) result(Key) Return the Key of the current Entry Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Return Value character(len=:),\n  allocatable procedure, public, non_overridable :: Init => ParameterListIterator_Init private subroutine ParameterListIterator_Init(this, DataBase) Associate the iterator with a dictionary and rewind \n to the first position Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this type(ParameterRootEntry_t), intent(in), target :: DataBase (:) procedure, public, non_overridable :: Begin => ParameterListIterator_Begin private subroutine ParameterListIterator_Begin(this) Rewind the iterator to the first dictionary position Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this procedure, public, non_overridable :: End => ParameterListIterator_End private subroutine ParameterListIterator_End(this) Fast forward to the last dictionary position (HasFinished = .true.) Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this procedure, public, non_overridable :: Next => ParameterListIterator_Next private subroutine ParameterListIterator_Next(this) The iterator points to the next associated entry Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this procedure, public, non_overridable :: HasFinished => ParameterListIterator_HasFinished private function ParameterListIterator_HasFinished(this) result(HasFinished) Check if Iterator has reached the end of the dictionary Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this Return Value logical procedure, public, non_overridable :: GetShape => ParameterListIterator_GetShape private function ParameterListIterator_GetShape(this, Shape) result(FPLerror) Return an allocatable array with the shape of the contained value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator integer(kind=I4P), intent(inout), allocatable :: Shape (:) Shape of the stored value Return Value integer(kind=I4P) Error flag procedure, public, non_overridable :: GetDimensions => ParameterListIterator_GetDimensions private function ParameterListIterator_GetDimensions(this) result(Dimensions) Return an allocatable array with the shape of the contained value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator Return Value integer(kind=I4P) Dimensions of the stored value procedure, public, non_overridable :: DataSizeInBytes => ParameterListIterator_DataSizeInBytes private function ParameterListIterator_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size in bytes of the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator Return Value integer(kind=I4P) Size in bytes procedure, public, non_overridable :: GetSubList => ParameterListIterator_GetSublist private function ParameterListIterator_GetSublist(this, Sublist) result(FPLerror) Return a Unlimited polymorphic pointer to a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List type( ParameterList_t ), intent(inout), pointer :: Sublist Wrapper Return Value integer(kind=I4P) Error flag procedure, public, non_overridable :: isSubList => ParameterListIterator_isSubList private function ParameterListIterator_isSubList(this) result(isSubList) Check if a Key is a SubList Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator Return Value logical Check if is a SubList procedure, public, non_overridable :: toString => ParameterListIterator_toString private function ParameterListIterator_toString(this, Separator) result(String) Return a scalar Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator character(len=1), intent(in), optional :: Separator Array values separator Return Value character(len=:),\n  allocatable Returned value as string procedure, public, non_overridable :: Print => ParameterListIterator_Print private recursive subroutine ParameterListIterator_Print(this, unit, prefix, iostat, iomsg) Print the content of the DataBase Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter Iterator integer(kind=I4P), intent(in), optional :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public, non_overridable :: Free => ParameterListIterator_Free private subroutine ParameterListIterator_Free(this) Free the dictionary iterator Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this generic, public :: Get => ParameterListIterator_Get0D, ParameterListIterator_Get1D, ParameterListIterator_Get2D, ParameterListIterator_Get3D, ParameterListIterator_Get4D, ParameterListIterator_Get5D, ParameterListIterator_Get6D, ParameterListIterator_Get7D private function ParameterListIterator_Get0D(this, Value) result(FPLerror) Return a scalar Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get1D(this, Value) result(FPLerror) Return a vector Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get2D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get3D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get4D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get5D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get6D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag private function ParameterListIterator_Get7D(this, Value) result(FPLerror) Return an array Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(inout) :: Value (:,:,:,:,:,:,:) Returned value Return Value integer(kind=I4P) Error flag generic, public :: isOfDataType => ParameterListIterator_isOfDataType0D, ParameterListIterator_isOfDataType1D, ParameterListIterator_isOfDataType2D, ParameterListIterator_isOfDataType3D, ParameterListIterator_isOfDataType4D, ParameterListIterator_isOfDataType5D, ParameterListIterator_isOfDataType6D, ParameterListIterator_isOfDataType7D private function ParameterListIterator_isOfDataType0D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType1D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType2D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType3D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType4D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType5D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType6D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type private function ParameterListIterator_isOfDataType7D(this, Mold) result(isOfDataType) Check if the data type of Mold agrees with the value associated with Key Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Mold (1:,1:,1:,1:,1:,1:,1:) Mold Return Value logical Check if has the same type generic, public :: isAssignable => ParameterListIterator_isAssignable0D, ParameterListIterator_isAssignable1D, ParameterListIterator_isAssignable2D, ParameterListIterator_isAssignable3D, ParameterListIterator_isAssignable4D, ParameterListIterator_isAssignable5D, ParameterListIterator_isAssignable6D, ParameterListIterator_isAssignable7D private function ParameterListIterator_isAssignable0D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable1D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable2D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable3D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:,1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable4D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:,1:,1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable5D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:,1:,1:,1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable6D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:) Value Return Value logical Check if is assignable private function ParameterListIterator_isAssignable7D(this, Value) result(isAssignable) Check if a stored variable is Assignable to Value Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(in) :: this Parameter List Iterator class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:,1:) Value Return Value logical Check if is assignable generic, public :: Assignment(=) => ParameterListIterator_Assignment private subroutine ParameterListIterator_Assignment(this, ParameterListIterator) Dictionary iterator Assignment Arguments Type Intent Optional Attributes Name class( ParameterListIterator_t ), intent(inout) :: this type( ParameterListIterator_t ), intent(in) :: ParameterListIterator","tags":"","loc":"type/parameterlistiterator_t.html","title":"ParameterListIterator_t â FPL "},{"text":"type, public :: EntryListIterator_t Finalization Procedures EntryListIterator_Final Type-Bound Procedures Init Next HasFinished GetEntry GetKey PointToValue Free Assignment(=) Finalization Procedures final :: EntryListIterator_Final private subroutine EntryListIterator_Final(this) Free the List iterator Arguments Type Intent Optional Attributes Name type( EntryListIterator_t ), intent(inout) :: this Type-Bound Procedures procedure, public, non_overridable :: Init => EntryListIterator_Init private subroutine EntryListIterator_Init(this, Entry) Associate the iterator with an entry Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(inout) :: this type( ParameterEntry_t ), intent(in), target :: Entry procedure, public, non_overridable :: Next => EntryListIterator_Next private subroutine EntryListIterator_Next(this) The iterator points to the next associated entry Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(inout) :: this procedure, public, non_overridable :: HasFinished => EntryListIterator_HasFinished private function EntryListIterator_HasFinished(this) result(HasFinished) Check if Iterator has reached the end of the dictionary Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(in) :: this Return Value logical procedure, public, non_overridable :: GetEntry => EntryListIterator_GetEntry private function EntryListIterator_GetEntry(this) result(CurrentEntry) Return the current Entry Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(in) :: this Return Value type( ParameterEntry_t ),\n  pointer procedure, public, non_overridable :: GetKey => EntryListIterator_GetKey private function EntryListIterator_GetKey(this) result(Key) Return the current Key Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(in) :: this Return Value character(len=:),\n  allocatable procedure, public, non_overridable :: PointToValue => EntryListIterator_PointToValue private function EntryListIterator_PointToValue(this) result(Value) Return the current Value Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(in) :: this Return Value class(*),\n  pointer procedure, public, non_overridable :: Free => EntryListIterator_Free private subroutine EntryListIterator_Free(this) Free the List iterator Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(inout) :: this generic, public :: Assignment(=) => EntryListIterator_Assignment private subroutine EntryListIterator_Assignment(this, ListIterator) Assignment operator Arguments Type Intent Optional Attributes Name class( EntryListIterator_t ), intent(inout) :: this type( EntryListIterator_t ), intent(in) :: ListIterator","tags":"","loc":"type/entrylistiterator_t.html","title":"EntryListIterator_t â FPL "},{"text":"type, public :: ParameterEntry_t Finalization Procedures ParameterEntry_Finalize Type-Bound Procedures Free Print HasNext SetNext GetNext NullifyNext HasKey SetKey GetKey DeallocateKey HasValue SetValue GetValue DeallocateValue PointToValue GetIterator Source Code ParameterEntry_t Finalization Procedures final :: ParameterEntry_Finalize private subroutine ParameterEntry_Finalize(this) Finalize procedure Arguments Type Intent Optional Attributes Name type( ParameterEntry_t ), intent(inout) :: this Parameter Entry Type-Bound Procedures procedure, public, non_overridable :: Free => ParameterEntry_Free private subroutine ParameterEntry_Free(this) Free the Entry Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry procedure, public, non_overridable :: Print => ParameterEntry_Print private subroutine ParameterEntry_Print(this, unit, prefix, iostat, iomsg) Print the keys/value pair contained in the Parameter Entry Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public, non_overridable :: HasNext => ParameterEntry_HasNext private function ParameterEntry_HasNext(this) result(hasNext) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value logical Check if Next is associated procedure, public, non_overridable :: SetNext => ParameterEntry_SetNext private subroutine ParameterEntry_SetNext(this, Next) Set the pointer to the Next node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry class( ParameterEntry_t ), intent(in), pointer :: Next Pointer to Next procedure, public, non_overridable :: GetNext => ParameterEntry_GetNext private function ParameterEntry_GetNext(this) result(Next) Return a pointer to the Next node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value class( ParameterEntry_t ),\n  pointer Pointer to Next procedure, public, non_overridable :: NullifyNext => ParameterEntry_NullifyNext private subroutine ParameterEntry_NullifyNext(this) Nullify Next Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry procedure, public, non_overridable :: HasKey => ParameterEntry_HasKey private function ParameterEntry_HasKey(this) result(hasKey) Check if Key is allocated for the current Node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value logical Check if Key is associated procedure, public, non_overridable :: SetKey => ParameterEntry_SetKey private subroutine ParameterEntry_SetKey(this, Key) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry character(len=*), intent(in) :: Key Key procedure, public, non_overridable :: GetKey => ParameterEntry_GetKey private function ParameterEntry_GetKey(this) result(Key) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value character(len=:),\n  allocatable Key procedure, public, non_overridable :: DeallocateKey => ParameterEntry_DeallocateKey private subroutine ParameterEntry_DeallocateKey(this) Deallocate Key if allocated Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry procedure, public, non_overridable :: HasValue => ParameterEntry_HasValue private function ParameterEntry_HasValue(this) result(hasValue) Check if Value is allocated for the current Node Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value logical Check if Value is allocated procedure, public, non_overridable :: SetValue => ParameterEntry_SetValue private subroutine ParameterEntry_SetValue(this, Value) Set a concrete Wrapper Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry class(*), intent(in), pointer :: Value Concrete Wrapper procedure, public, non_overridable :: GetValue => ParameterEntry_GetValue private subroutine ParameterEntry_GetValue(this, Value) Return a concrete WrapperFactory Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry class(*), intent(out), allocatable :: Value Concrete Wrapper procedure, public, non_overridable :: DeallocateValue => ParameterEntry_DeallocateValue private subroutine ParameterEntry_DeallocateValue(this) Deallocate Key if allocated Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout) :: this Parameter Entry procedure, public, non_overridable :: PointToValue => ParameterEntry_PointToValue private function ParameterEntry_PointToValue(this) result(Value) Return a pointer to a concrete WrapperFactory Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(in) :: this Parameter Entry Return Value class(*),\n  pointer Concrete Wrapper procedure, public, non_overridable :: GetIterator => ParameterEntry_GetIterator private function ParameterEntry_GetIterator(this) result(Iterator) Free the list Arguments Type Intent Optional Attributes Name class( ParameterEntry_t ), intent(inout), target :: this Parameter Entry Return Value type( EntryListIterator_t ) List iterator Source Code type :: ParameterEntry_t private character ( len = :), allocatable :: Key class ( * ), pointer :: Value => NULL () class ( ParameterEntry_t ), pointer :: Next => NULL () contains private procedure , non_overridable , public :: Free => ParameterEntry_Free procedure , non_overridable , public :: Print => ParameterEntry_Print procedure , non_overridable , public :: HasNext => ParameterEntry_HasNext procedure , non_overridable , public :: SetNext => ParameterEntry_SetNext procedure , non_overridable , public :: GetNext => ParameterEntry_GetNext procedure , non_overridable , public :: NullifyNext => ParameterEntry_NullifyNext procedure , non_overridable , public :: HasKey => ParameterEntry_HasKey procedure , non_overridable , public :: SetKey => ParameterEntry_SetKey procedure , non_overridable , public :: GetKey => ParameterEntry_GetKey procedure , non_overridable , public :: DeallocateKey => ParameterEntry_DeallocateKey procedure , non_overridable , public :: HasValue => ParameterEntry_HasValue procedure , non_overridable , public :: SetValue => ParameterEntry_SetValue procedure , non_overridable , public :: GetValue => ParameterEntry_GetValue procedure , non_overridable , public :: DeallocateValue => ParameterEntry_DeallocateValue procedure , non_overridable , public :: PointToValue => ParameterEntry_PointToValue procedure , non_overridable , public :: GetIterator => ParameterEntry_GetIterator final :: ParameterEntry_Finalize end type ParameterEntry_t","tags":"","loc":"type/parameterentry_t.html","title":"ParameterEntry_t â FPL "},{"text":"type, public :: ParameterEntryDictionary_t Finalization Procedures ParameterEntryDictionary_Finalize Type-Bound Procedures Init Set Get GetPointer GetDatabase Del IsPresent Length Print Free Finalization Procedures final :: ParameterEntryDictionary_Finalize private subroutine ParameterEntryDictionary_Finalize(this) Destructor procedure Arguments Type Intent Optional Attributes Name type( ParameterEntryDictionary_t ), intent(inout) :: this Parameter Entry Dictionary Type-Bound Procedures procedure, public, non_overridable :: Init => ParameterEntryDictionary_Init private subroutine ParameterEntryDictionary_Init(this, Size) Allocate the database with a given Szie of DefaultDataBaseSize Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(inout) :: this Parameter Entry Dictionary integer(kind=I4P), intent(in), optional :: Size DataBase Size procedure, public, non_overridable :: Set => ParameterEntryDictionary_Set private subroutine ParameterEntryDictionary_Set(this, Key, Value) Set a Key/Value pair into the DataBase Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(inout) :: this Parameter Entry Dictionary character(len=*), intent(in) :: Key String Key class(*), intent(in), pointer :: Value Value procedure, public, non_overridable :: Get => ParameterEntryDictionary_Get private subroutine ParameterEntryDictionary_Get(this, Key, Value) Return a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in) :: this Parameter Entry Dictionary character(len=*), intent(in) :: Key String Key class(*), intent(inout), allocatable :: Value Returned value procedure, public, non_overridable :: GetPointer => ParameterEntryDictionary_GetPointer private subroutine ParameterEntryDictionary_GetPointer(this, Key, Value) Return a Value given the Key Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in) :: this Parameter Entry Dictionary character(len=*), intent(in) :: Key String Key class(*), intent(inout), pointer :: Value Returned value procedure, public, non_overridable :: GetDatabase => ParameterEntryDictionary_GetDataBase private function ParameterEntryDictionary_GetDataBase(this) result(Database) Return a pointer to a Dictionary Database Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in), target :: this Parameter Entry Dictionary Return Value type(ParameterRootEntry_t),\n  pointer, (:) Dictionary Database procedure, public, non_overridable :: Del => ParameterEntryDictionary_Delete private subroutine ParameterEntryDictionary_Delete(this, Key) Remove an Entry given a Key Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(inout) :: this Parameter Entry Dictionary character(len=*), intent(in) :: Key String Key procedure, public, non_overridable :: IsPresent => ParameterEntryDictionary_isPresent private function ParameterEntryDictionary_isPresent(this, Key) result(isPresent) Check if a Key is present in the DataBase Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in) :: this Parameter Entry Dictionary character(len=*), intent(in) :: Key String Key Return Value logical Boolean flag to check if a Key is present procedure, public, non_overridable :: Length => ParameterEntryDictionary_Length private function ParameterEntryDictionary_Length(this) result(Length) Return the number of ParameterListEntries contained in the DataBase Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in) :: this Parameter Entry Dictionary Return Value integer(kind=I4P) Number of parameters in database procedure, public, non_overridable :: Print => ParameterEntryDictionary_Print private subroutine ParameterEntryDictionary_Print(this, unit, prefix, iostat, iomsg) Print the content of the DataBase Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(in) :: this Linked List integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public, non_overridable :: Free => ParameterentryDictionary_Free private subroutine ParameterentryDictionary_Free(this) Free ParameterListEntries and the DataBase Arguments Type Intent Optional Attributes Name class( ParameterEntryDictionary_t ), intent(inout) :: this Parameter Entry Dictionary","tags":"","loc":"type/parameterentrydictionary_t.html","title":"ParameterEntryDictionary_t â FPL "},{"text":"type, public :: ParameterRootEntry_t Finalization Procedures ParameterRootEntry_Finalize Type-Bound Procedures HasRoot GetRoot GetEntry GetPreviousEntry Print isPresent Length RemoveEntry AddEntry GetIterator Free Finalization Procedures final :: ParameterRootEntry_Finalize private subroutine ParameterRootEntry_Finalize(this) Finalize procedure Arguments Type Intent Optional Attributes Name type( ParameterRootEntry_t ), intent(inout) :: this Parameter List Type-Bound Procedures procedure, public, non_overridable :: HasRoot => ParameterRootEntry_HasRoot private function ParameterRootEntry_HasRoot(this) result(hasRoot) Return a pointer to the Root of the list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry Return Value logical Check if Root is associated procedure, public, non_overridable :: GetRoot => ParameterRootEntry_GetRoot private function ParameterRootEntry_GetRoot(this) result(Root) Return a pointer to the Root of the list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry Return Value class(ParameterEntry_t),\n  pointer Parameter Entry correspoing to the head of the list procedure, public, non_overridable :: GetEntry => ParameterRootEntry_GetEntry private function ParameterRootEntry_GetEntry(this, Key) result(Entry) Return a pointer to a ParameterEntry given a Key Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry character(len=*), intent(in) :: Key String Key Return Value class(ParameterEntry_t),\n  pointer Parameter Entry procedure, public, non_overridable :: GetPreviousEntry => ParameterRootEntry_GetPreviousEntry private function ParameterRootEntry_GetPreviousEntry(this, Key) result(PreviousEntry) Return a pointer to the provious node of a Parameter List given a Key Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter List character(len=*), intent(in) :: Key String Key Return Value class(ParameterEntry_t),\n  pointer Parameter List Entry procedure, public, non_overridable :: Print => ParameterRootEntry_Print private subroutine ParameterRootEntry_Print(this, unit, prefix, iostat, iomsg) Print the keys/value pair contained in the parameter list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public, non_overridable :: isPresent => ParameterRootEntry_IsPresent private function ParameterRootEntry_IsPresent(this, Key) result(isPresent) Check if a Key is present in the List Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry character(len=*), intent(in) :: Key String Key Return Value logical Boolean flag to check if a Key is present procedure, public, non_overridable :: Length => ParameterRootEntry_Length private function ParameterRootEntry_Length(this) result(Length) Return the length of the list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(in) :: this Parameter Root Entry Return Value integer(kind=I4P) Length of the list procedure, public, non_overridable :: RemoveEntry => ParameterRootEntry_RemoveEntry private subroutine ParameterRootEntry_RemoveEntry(this, Key) Remove an Entry given a Key Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(inout) :: this Parameter Root Entry character(len=*), intent(in) :: Key String Key procedure, public, non_overridable :: AddEntry => ParameterRootEntry_AddEntry private subroutine ParameterRootEntry_AddEntry(this, Key, Value) Add a new Node if key does not Exist Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(inout) :: this Parameter Root Entry character(len=*), intent(in) :: Key Key (unique) of the current node. class(*), intent(in), pointer :: Value Parameter Entry Value procedure, public, non_overridable :: GetIterator => ParameterRootEntry_GetIterator private function ParameterRootEntry_GetIterator(this) result(Iterator) Free the list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(inout) :: this Parameter Root Entry Return Value type(EntryListIterator_t) List iterator procedure, public, non_overridable :: Free => ParameterRootEntry_Free private subroutine ParameterRootEntry_Free(this) Free the list Arguments Type Intent Optional Attributes Name class( ParameterRootEntry_t ), intent(inout) :: this Parameter Root Entry","tags":"","loc":"type/parameterrootentry_t.html","title":"ParameterRootEntry_t â FPL "},{"text":"type, public :: WrapperFactoryList_t Variables Next Finalization Procedures WrapperFactoryList_Finalize Type-Bound Procedures HasNext SetNext GetNext NullifyNext HasKey SetKey GetKey DeallocateKey HasValue SetValue GetValue Free AddWrapperFactory Print GetFactory Source Code WrapperFactoryList_t Components Type Visibility Attributes Name Initial class( WrapperFactoryList_t ), public, pointer :: Next => null() Finalization Procedures final :: WrapperFactoryList_Finalize private recursive subroutine WrapperFactoryList_Finalize(this) Finalize procedure Arguments Type Intent Optional Attributes Name type( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List Type-Bound Procedures procedure, public, non_overridable :: HasNext => WrapperFactoryList_HasNext private function WrapperFactoryList_HasNext(this) result(hasNext) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List Return Value logical Check if Next is associated procedure, public, non_overridable :: SetNext => WrapperFactoryList_SetNext private subroutine WrapperFactoryList_SetNext(this, Next) Set the pointer to the Next node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List class( WrapperFactoryList_t ), intent(in), target :: Next Pointer to Next procedure, public, non_overridable :: GetNext => WrapperFactoryList_GetNext private function WrapperFactoryList_GetNext(this) result(Next) Return a pointer to the Next node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List Return Value class( WrapperFactoryList_t ),\n  pointer Pointer to Next procedure, public, non_overridable :: NullifyNext => WrapperFactoryList_NullifyNext private subroutine WrapperFactoryList_NullifyNext(this) Nullify Next Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List procedure, public, non_overridable :: HasKey => WrapperFactoryList_HasKey private function WrapperFactoryList_HasKey(this) result(hasKey) Check if Key is allocated for the current Node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List Return Value logical Check if Key is associated procedure, public, non_overridable :: SetKey => WrapperFactoryList_SetKey private subroutine WrapperFactoryList_SetKey(this, Key) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List character(len=*), intent(in) :: Key Key procedure, public, non_overridable :: GetKey => WrapperFactoryList_GetKey private function WrapperFactoryList_GetKey(this) result(Key) Check if Next is associated for the current Node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List Return Value character(len=:),\n  allocatable Key procedure, public, non_overridable :: DeallocateKey => WrapperFactoryList_DeallocateKey private subroutine WrapperFactoryList_DeallocateKey(this) Deallocate Key if allocated Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List procedure, public, non_overridable :: HasValue => WrapperFactoryList_HasValue private function WrapperFactoryList_HasValue(this) result(hasValue) Check if Value is allocated for the current Node Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List Return Value logical Check if Value is allocated procedure, public, non_overridable :: SetValue => WrapperFactoryList_SetValue private subroutine WrapperFactoryList_SetValue(this, Value) Return a concrete WrapperFactory Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List class(WrapperFactory_t), intent(in), target :: Value Concrete WrapperFactory procedure, public, non_overridable :: GetValue => WrapperFactoryList_GetValue private subroutine WrapperFactoryList_GetValue(this, Value) Return a concrete WrapperFactory Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(WrapperFactory_t), intent(out), pointer :: Value Concrete WrapperFactory pointer procedure, public, non_overridable :: Free => WrapperFactoryList_Free private recursive subroutine WrapperFactoryList_Free(this) Free the list Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List procedure, public, non_overridable :: AddWrapperFactory => WrapperFactoryList_AddWrapperFactory private recursive subroutine WrapperFactoryList_AddWrapperFactory(this, Key, WrapperFactory) Add a new Node if key does not Exist Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(inout) :: this Wrapper Factory List character(len=*), intent(in) :: Key Key (unique) of the current node. class(WrapperFactory_t), intent(in), target :: WrapperFactory Wrapper Factory procedure, public, non_overridable :: Print => WrapperFactoryList_Print private subroutine WrapperFactoryList_Print(this, unit, prefix, iostat, iomsg) Print the keys contained in the list Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in), target :: this Wrapper Factory List integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. generic, public :: GetFactory => WrapperFactoryList_GetFactory0D, WrapperFactoryList_GetFactory1D, WrapperFactoryList_GetFactory2D, WrapperFactoryList_GetFactory3D, WrapperFactoryList_GetFactory4D, WrapperFactoryList_GetFactory5D, WrapperFactoryList_GetFactory6D, WrapperFactoryList_GetFactory7D private recursive function WrapperFactoryList_GetFactory0D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory1D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory2D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory3D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory4D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:,1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory5D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:,1:,1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory6D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory private recursive function WrapperFactoryList_GetFactory7D(this, Value) result(WrapperFactory) Return a WrapperFactory given a value Arguments Type Intent Optional Attributes Name class( WrapperFactoryList_t ), intent(in) :: this Wrapper Factory List class(*), intent(in) :: Value (1:,1:,1:,1:,1:,1:,1:) Polymorphic Mold Return Value class(WrapperFactory_t),\n  pointer Wrapper Factory Source Code type , public :: WrapperFactoryList_t private character ( len = :), allocatable :: Key class ( WrapperFactory_t ), pointer :: Value => null () class ( WrapperFactoryList_t ), public , pointer :: Next => null () contains private procedure , non_overridable , public :: HasNext => WrapperFactoryList_HasNext procedure , non_overridable , public :: SetNext => WrapperFactoryList_SetNext procedure , non_overridable , public :: GetNext => WrapperFactoryList_GetNext procedure , non_overridable , public :: NullifyNext => WrapperFactoryList_NullifyNext procedure , non_overridable , public :: HasKey => WrapperFactoryList_HasKey procedure , non_overridable , public :: SetKey => WrapperFactoryList_SetKey procedure , non_overridable , public :: GetKey => WrapperFactoryList_GetKey procedure , non_overridable , public :: DeallocateKey => WrapperFactoryList_DeallocateKey procedure , non_overridable , public :: HasValue => WrapperFactoryList_HasValue procedure , non_overridable , public :: SetValue => WrapperFactoryList_SetValue procedure , non_overridable , public :: GetValue => WrapperFactoryList_GetValue procedure , non_overridable , public :: Free => WrapperFactoryList_Free procedure , non_overridable , public :: AddWrapperFactory => WrapperFactoryList_AddWrapperFactory procedure , non_overridable , public :: Print => WrapperFactoryList_Print procedure , non_overridable :: WrapperFactoryList_GetFactory0D procedure , non_overridable :: WrapperFactoryList_GetFactory1D procedure , non_overridable :: WrapperFactoryList_GetFactory2D procedure , non_overridable :: WrapperFactoryList_GetFactory3D procedure , non_overridable :: WrapperFactoryList_GetFactory4D procedure , non_overridable :: WrapperFactoryList_GetFactory5D procedure , non_overridable :: WrapperFactoryList_GetFactory6D procedure , non_overridable :: WrapperFactoryList_GetFactory7D generic , public :: GetFactory => WrapperFactoryList_GetFactory0D , & WrapperFactoryList_GetFactory1D , & WrapperFactoryList_GetFactory2D , & WrapperFactoryList_GetFactory3D , & WrapperFactoryList_GetFactory4D , & WrapperFactoryList_GetFactory5D , & WrapperFactoryList_GetFactory6D , & WrapperFactoryList_GetFactory7D final :: WrapperFactoryList_Finalize end type WrapperFactoryList_t","tags":"","loc":"type/wrapperfactorylist_t.html","title":"WrapperFactoryList_t â FPL "},{"text":"type, public, abstract :: DimensionsWrapper_t Type-Bound Procedures SetDimensions GetDimensions Print isOfDataType DataSizeInBytes Free GetShape toString Type-Bound Procedures procedure, public :: SetDimensions => DimensionsWrapper_SetDimensions private subroutine DimensionsWrapper_SetDimensions(this, Dimensions) Set the dimensions of the Value contained in the wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(inout) :: this integer(kind=I1P), intent(in) :: Dimensions procedure, public :: GetDimensions => DimensionsWrapper_GetDimensions private function DimensionsWrapper_GetDimensions(this) result(Dimensions) Get the dimensions of the Value contained in the wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this Return Value integer(kind=I1P) procedure, public :: Print => DimensionsWrapper_Print private subroutine DimensionsWrapper_Print(this, unit, prefix, iostat, iomsg) Generic Wrapper Print Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure(DimensionsWrapper_isOfDataType), public, deferred :: isOfDataType function DimensionsWrapper_isOfDataType (this, Mold) result(isOfDataType) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this class(*), intent(in) :: Mold Return Value logical procedure(DimensionsWrapper_DataSizeInBytes), public, deferred :: DataSizeInBytes function DimensionsWrapper_DataSizeInBytes (this) result(DataSizeInBytes) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this Return Value integer(kind=I4P) procedure(DimensionsWrapper_Free), public, deferred :: Free subroutine DimensionsWrapper_Free (this) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(inout) :: this procedure(DimensionsWrapper_GetShape), public, deferred :: GetShape subroutine DimensionsWrapper_GetShape (this, ValueShape) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure(DimensionsWrapper_toString), public, deferred :: toString function DimensionsWrapper_toString (this, Separator) result(String) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable","tags":"","loc":"type/dimensionswrapper_t.html","title":"DimensionsWrapper_t â FPL "},{"text":"type, public, abstract :: WrapperFactory_t Type-Bound Procedures hasSameType Wrap Type-Bound Procedures procedure(WrapperFactory_hasSameType), public, deferred :: hasSameType function WrapperFactory_hasSameType (this, Value) result(hasSameType) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value Return Value logical generic, public :: Wrap => Wrap0D, Wrap1D, Wrap2D, Wrap3D, Wrap4D, Wrap5D, Wrap6D, Wrap7D function WrapperFactory_Wrap0D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap1D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap2D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap3D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:,:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap4D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:,:,:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap5D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:,:,:,:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap6D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) Return Value class(DimensionsWrapper_t),\n  pointer function WrapperFactory_Wrap7D (this, Value) result(Wrapper) Prototype Arguments Type Intent Optional Attributes Name class( WrapperFactory_t ), intent(in) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) Return Value class(DimensionsWrapper_t),\n  pointer","tags":"","loc":"type/wrapperfactory_t.html","title":"WrapperFactory_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I1P_t type~~dimensionswrapper1d_i1p_t~~InheritsGraph type~dimensionswrapper1d_i1p_t DimensionsWrapper1D_I1P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_I1P_Final private subroutine DimensionsWrapper1D_I1P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I1P_Set private subroutine DimensionsWrapper1D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_I1P_Get private subroutine DimensionsWrapper1D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_I1P_GetShape private subroutine DimensionsWrapper1D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_I1P_GetPointer private function DimensionsWrapper1D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_I1P_GetPolymorphic private subroutine DimensionsWrapper1D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I1P_DataSizeInBytes private function DimensionsWrapper1D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_I1P_isOfDataType private function DimensionsWrapper1D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_I1P_toString private function DimensionsWrapper1D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_I1P_Free private subroutine DimensionsWrapper1D_I1P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_I1P_Print private subroutine DimensionsWrapper1D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_i1p_t.html","title":"DimensionsWrapper1D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I2P_t type~~dimensionswrapper1d_i2p_t~~InheritsGraph type~dimensionswrapper1d_i2p_t DimensionsWrapper1D_I2P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_I2P_Final private subroutine DimensionsWrapper1D_I2P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I2P_Set private subroutine DimensionsWrapper1D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_I2P_Get private subroutine DimensionsWrapper1D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_I2P_GetShape private subroutine DimensionsWrapper1D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_I2P_GetPointer private function DimensionsWrapper1D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_I2P_GetPolymorphic private subroutine DimensionsWrapper1D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I2P_DataSizeInBytes private function DimensionsWrapper1D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_I2P_isOfDataType private function DimensionsWrapper1D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_I2P_toString private function DimensionsWrapper1D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_I2P_Free private subroutine DimensionsWrapper1D_I2P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_I2P_Print private subroutine DimensionsWrapper1D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_i2p_t.html","title":"DimensionsWrapper1D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I4P_t type~~dimensionswrapper1d_i4p_t~~InheritsGraph type~dimensionswrapper1d_i4p_t DimensionsWrapper1D_I4P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_I4P_Final Type-Bound Procedures Set Get GetShape GetPolymorphic GetPointer DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_I4P_Final private subroutine DimensionsWrapper1D_I4P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I4P_Set private subroutine DimensionsWrapper1D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_I4P_Get private subroutine DimensionsWrapper1D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_I4P_GetShape private subroutine DimensionsWrapper1D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_I4P_GetPolymorphic private subroutine DimensionsWrapper1D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: GetPointer => DimensionsWrapper1D_I4P_GetPointer private function DimensionsWrapper1D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I4P_DataSizeInBytes private function DimensionsWrapper1D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_I4P_isOfDataType private function DimensionsWrapper1D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_I4P_toString private function DimensionsWrapper1D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_I4P_Free private subroutine DimensionsWrapper1D_I4P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_I4P_Print private subroutine DimensionsWrapper1D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_i4p_t.html","title":"DimensionsWrapper1D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_DLCA_t type~~dimensionswrapper1d_dlca_t~~InheritsGraph type~dimensionswrapper1d_dlca_t DimensionsWrapper1D_DLCA_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_DLCA_Final private subroutine DimensionsWrapper1D_DLCA_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_DLCA_Set private subroutine DimensionsWrapper1D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_DLCA_Get private subroutine DimensionsWrapper1D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_DLCA_GetShape private subroutine DimensionsWrapper1D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_DLCA_GetPointer private function DimensionsWrapper1D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_DLCA_GetPolymorphic private subroutine DimensionsWrapper1D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_DLCA_DataSizeInBytes private function DimensionsWrapper1D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_DLCA_isOfDataType private function DimensionsWrapper1D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_DLCA_toString private function DimensionsWrapper1D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_DLCA_Free private subroutine DimensionsWrapper1D_DLCA_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_DLCA_Print private subroutine DimensionsWrapper1D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_dlca_t.html","title":"DimensionsWrapper1D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_R4P_t type~~dimensionswrapper1d_r4p_t~~InheritsGraph type~dimensionswrapper1d_r4p_t DimensionsWrapper1D_R4P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_R4P_Final private subroutine DimensionsWrapper1D_R4P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_R4P_Set private subroutine DimensionsWrapper1D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_R4P_Get private subroutine DimensionsWrapper1D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_R4P_GetShape private subroutine DimensionsWrapper1D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_R4P_GetPointer private function DimensionsWrapper1D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_R4P_GetPolymorphic private subroutine DimensionsWrapper1D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_R4P_DataSizeInBytes private function DimensionsWrapper1D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_R4P_isOfDataType private function DimensionsWrapper1D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_R4P_toString private function DimensionsWrapper1D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_R4P_Free private subroutine DimensionsWrapper1D_R4P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_R4P_Print private subroutine DimensionsWrapper1D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_r4p_t.html","title":"DimensionsWrapper1D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_R8P_t type~~dimensionswrapper1d_r8p_t~~InheritsGraph type~dimensionswrapper1d_r8p_t DimensionsWrapper1D_R8P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_R8P_Final private subroutine DimensionsWrapper1D_R8P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_R8P_Set private subroutine DimensionsWrapper1D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_R8P_Get private subroutine DimensionsWrapper1D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_R8P_GetShape private subroutine DimensionsWrapper1D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_R8P_GetPointer private function DimensionsWrapper1D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_R8P_GetPolymorphic private subroutine DimensionsWrapper1D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_R8P_DataSizeInBytes private function DimensionsWrapper1D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_R8P_isOfDataType private function DimensionsWrapper1D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_R8P_toString private function DimensionsWrapper1D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_R8P_Free private subroutine DimensionsWrapper1D_R8P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_R8P_Print private subroutine DimensionsWrapper1D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_r8p_t.html","title":"DimensionsWrapper1D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_L_t type~~dimensionswrapper1d_l_t~~InheritsGraph type~dimensionswrapper1d_l_t DimensionsWrapper1D_L_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic isOfDataType DataSizeInBytes toString Free Print Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_L_Final private subroutine DimensionsWrapper1D_L_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_L_Set private subroutine DimensionsWrapper1D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_L_Get private subroutine DimensionsWrapper1D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_L_GetShape private subroutine DimensionsWrapper1D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_L_GetPointer private function DimensionsWrapper1D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_L_GetPolymorphic private subroutine DimensionsWrapper1D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: isOfDataType => DimensionsWrapper1D_L_isOfDataType private function DimensionsWrapper1D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: DataSizeInBytes => DimensionsWrapper1D_L_DataSizeInBytes private function DimensionsWrapper1D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: toString => DimensionsWrapper1D_L_toString private function DimensionsWrapper1D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper1D_L_Free private subroutine DimensionsWrapper1D_L_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper1D_L_Print private subroutine DimensionsWrapper1D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper1d_l_t.html","title":"DimensionsWrapper1D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I8P_t type~~dimensionswrapper1d_i8p_t~~InheritsGraph type~dimensionswrapper1d_i8p_t DimensionsWrapper1D_I8P_t DimensionsWrapper1D_t DimensionsWrapper1D_t DimensionsWrapper1D_t->type~dimensionswrapper1d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper1D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:) Finalization Procedures final :: DimensionsWrapper1D_I8P_Final private subroutine DimensionsWrapper1D_I8P_Final(this) Final procedure of DimensionsWrapper1D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper1D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I8P_Set private subroutine DimensionsWrapper1D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure, public :: Get => DimensionsWrapper1D_I8P_Get private subroutine DimensionsWrapper1D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure, public :: GetShape => DimensionsWrapper1D_I8P_GetShape private subroutine DimensionsWrapper1D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper1D_I8P_GetPointer private function DimensionsWrapper1D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic W2apper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:) procedure, public :: GetPolymorphic => DimensionsWrapper1D_I8P_GetPolymorphic private subroutine DimensionsWrapper1D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:) procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I8P_DataSizeInBytes private function DimensionsWrapper1D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this Dimensions wrapper 1D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper1D_I8P_isOfDataType private function DimensionsWrapper1D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this Dimensions wrapper 1D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper1D_I8P_toString private function DimensionsWrapper1D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper1D_I8P_Print private subroutine DimensionsWrapper1D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper1D_I8P_Free private subroutine DimensionsWrapper1D_I8P_Free(this) Free a DimensionsWrapper1D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_I8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper1d_i8p_t.html","title":"DimensionsWrapper1D_I8P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper1D_t type~~dimensionswrapper1d_t~~InheritsGraph type~dimensionswrapper1d_t DimensionsWrapper1D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper1d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper1D_Set), public, deferred :: Set subroutine DimensionsWrapper1D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_t ), intent(inout) :: this class(*), intent(in) :: Value (:) procedure(DimensionsWrapper1D_Get), public, deferred :: Get subroutine DimensionsWrapper1D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_t ), intent(in) :: this class(*), intent(out) :: Value (:) procedure(DimensionsWrapper1D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper1D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper1D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:)","tags":"","loc":"type/dimensionswrapper1d_t.html","title":"DimensionsWrapper1D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_R4P_t type~~dimensionswrapper2d_r4p_t~~InheritsGraph type~dimensionswrapper2d_r4p_t DimensionsWrapper2D_R4P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_R4P_Final private subroutine DimensionsWrapper2D_R4P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_R4P_Set private subroutine DimensionsWrapper2D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_R4P_Get private subroutine DimensionsWrapper2D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_R4P_GetShape private subroutine DimensionsWrapper2D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_R4P_GetPointer private function DimensionsWrapper2D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_R4P_GetPolymorphic private subroutine DimensionsWrapper2D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_R4P_DataSizeInBytes private function DimensionsWrapper2D_R4P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_R4P_isOfDataType private function DimensionsWrapper2D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_R4P_toString private function DimensionsWrapper2D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_R4P_Free private subroutine DimensionsWrapper2D_R4P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_R4P_Print private subroutine DimensionsWrapper2D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_r4p_t.html","title":"DimensionsWrapper2D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I8P_t type~~dimensionswrapper2d_i8p_t~~InheritsGraph type~dimensionswrapper2d_i8p_t DimensionsWrapper2D_I8P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_I8P_Final private subroutine DimensionsWrapper2D_I8P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I8P_Set private subroutine DimensionsWrapper2D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_I8P_Get private subroutine DimensionsWrapper2D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_I8P_GetShape private subroutine DimensionsWrapper2D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_I8P_GetPointer private function DimensionsWrapper2D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_I8P_GetPolymorphic private subroutine DimensionsWrapper2D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I8P_DataSizeInBytes private function DimensionsWrapper2D_I8P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_I8P_isOfDataType private function DimensionsWrapper2D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_I8P_toString private function DimensionsWrapper2D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_I8P_Free private subroutine DimensionsWrapper2D_I8P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_I8P_Print private subroutine DimensionsWrapper2D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_i8p_t.html","title":"DimensionsWrapper2D_I8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_R8P_t type~~dimensionswrapper2d_r8p_t~~InheritsGraph type~dimensionswrapper2d_r8p_t DimensionsWrapper2D_R8P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_R8P_Final private subroutine DimensionsWrapper2D_R8P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_R8P_Set private subroutine DimensionsWrapper2D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_R8P_Get private subroutine DimensionsWrapper2D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_R8P_GetShape private subroutine DimensionsWrapper2D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_R8P_GetPointer private function DimensionsWrapper2D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_R8P_GetPolymorphic private subroutine DimensionsWrapper2D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_R8P_DataSizeInBytes private function DimensionsWrapper2D_R8P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_R8P_isOfDataType private function DimensionsWrapper2D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_R8P_toString private function DimensionsWrapper2D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_R8P_Free private subroutine DimensionsWrapper2D_R8P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_R8P_Print private subroutine DimensionsWrapper2D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_r8p_t.html","title":"DimensionsWrapper2D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I1P_t type~~dimensionswrapper2d_i1p_t~~InheritsGraph type~dimensionswrapper2d_i1p_t DimensionsWrapper2D_I1P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_I1P_Final private subroutine DimensionsWrapper2D_I1P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I1P_Set private subroutine DimensionsWrapper2D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_I1P_Get private subroutine DimensionsWrapper2D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_I1P_GetShape private subroutine DimensionsWrapper2D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_I1P_GetPointer private function DimensionsWrapper2D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_I1P_GetPolymorphic private subroutine DimensionsWrapper2D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I1P_DataSizeInBytes private function DimensionsWrapper2D_I1P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_I1P_isOfDataType private function DimensionsWrapper2D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_I1P_toString private function DimensionsWrapper2D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_I1P_Free private subroutine DimensionsWrapper2D_I1P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_I1P_Print private subroutine DimensionsWrapper2D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_i1p_t.html","title":"DimensionsWrapper2D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_DLCA_t type~~dimensionswrapper2d_dlca_t~~InheritsGraph type~dimensionswrapper2d_dlca_t DimensionsWrapper2D_DLCA_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_DLCA_Final private subroutine DimensionsWrapper2D_DLCA_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_DLCA_Set private subroutine DimensionsWrapper2D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_DLCA_Get private subroutine DimensionsWrapper2D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_DLCA_GetShape private subroutine DimensionsWrapper2D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_DLCA_GetPointer private function DimensionsWrapper2D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_DLCA_GetPolymorphic private subroutine DimensionsWrapper2D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_DLCA_DataSizeInBytes private function DimensionsWrapper2D_DLCA_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_DLCA_isOfDataType private function DimensionsWrapper2D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_DLCA_toString private function DimensionsWrapper2D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_DLCA_Free private subroutine DimensionsWrapper2D_DLCA_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_DLCA_Print private subroutine DimensionsWrapper2D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_dlca_t.html","title":"DimensionsWrapper2D_DLCA_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper2D_t type~~dimensionswrapper2d_t~~InheritsGraph type~dimensionswrapper2d_t DimensionsWrapper2D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper2d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper2D_Set), public, deferred :: Set subroutine DimensionsWrapper2D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure(DimensionsWrapper2D_Get), public, deferred :: Get subroutine DimensionsWrapper2D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure(DimensionsWrapper2D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper2D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:)","tags":"","loc":"type/dimensionswrapper2d_t.html","title":"DimensionsWrapper2D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I4P_t type~~dimensionswrapper2d_i4p_t~~InheritsGraph type~dimensionswrapper2d_i4p_t DimensionsWrapper2D_I4P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes toString isOfDataType Free Print Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_I4P_Final private subroutine DimensionsWrapper2D_I4P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I4P_Set private subroutine DimensionsWrapper2D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_I4P_Get private subroutine DimensionsWrapper2D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_I4P_GetShape private subroutine DimensionsWrapper2D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_I4P_GetPointer private function DimensionsWrapper2D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_I4P_GetPolymorphic private subroutine DimensionsWrapper2D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I4P_DataSizeInBytes private function DimensionsWrapper2D_I4P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: toString => DimensionsWrapper2D_I4P_toString private function DimensionsWrapper2D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: isOfDataType => DimensionsWrapper2D_I4P_isOfDataType private function DimensionsWrapper2D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: Free => DimensionsWrapper2D_I4P_Free private subroutine DimensionsWrapper2D_I4P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_I4P_Print private subroutine DimensionsWrapper2D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_i4p_t.html","title":"DimensionsWrapper2D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_L_t type~~dimensionswrapper2d_l_t~~InheritsGraph type~dimensionswrapper2d_l_t DimensionsWrapper2D_L_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_L_Final private subroutine DimensionsWrapper2D_L_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_L_Set private subroutine DimensionsWrapper2D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_L_Get private subroutine DimensionsWrapper2D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_L_GetShape private subroutine DimensionsWrapper2D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_L_GetPointer private function DimensionsWrapper2D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_L_GetPolymorphic private subroutine DimensionsWrapper2D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_L_DataSizeInBytes private function DimensionsWrapper2D_L_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_L_isOfDataType private function DimensionsWrapper2D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_L_toString private function DimensionsWrapper2D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_L_Free private subroutine DimensionsWrapper2D_L_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_L_Print private subroutine DimensionsWrapper2D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_l_t.html","title":"DimensionsWrapper2D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I2P_t type~~dimensionswrapper2d_i2p_t~~InheritsGraph type~dimensionswrapper2d_i2p_t DimensionsWrapper2D_I2P_t DimensionsWrapper2D_t DimensionsWrapper2D_t DimensionsWrapper2D_t->type~dimensionswrapper2d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper2D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:) Finalization Procedures final :: DimensionsWrapper2D_I2P_Final private subroutine DimensionsWrapper2D_I2P_Final(this) Final procedure of DimensionsWrapper2D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper2D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I2P_Set private subroutine DimensionsWrapper2D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:) procedure, public :: Get => DimensionsWrapper2D_I2P_Get private subroutine DimensionsWrapper2D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:) procedure, public :: GetShape => DimensionsWrapper2D_I2P_GetShape private subroutine DimensionsWrapper2D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper2D_I2P_GetPointer private function DimensionsWrapper2D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:) procedure, public :: GetPolymorphic => DimensionsWrapper2D_I2P_GetPolymorphic private subroutine DimensionsWrapper2D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I2P_DataSizeInBytes private function DimensionsWrapper2D_I2P_DataSizeInBytes(this) result(DataSizeinBytes) Return the size in bytes of stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this Dimensions wrapper 2D Return Value integer(kind=I4P) Size in bytes of the stored data procedure, public :: isOfDataType => DimensionsWrapper2D_I2P_isOfDataType private function DimensionsWrapper2D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this Dimensions wrapper 2D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper2D_I2P_toString private function DimensionsWrapper2D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper2D_I2P_Free private subroutine DimensionsWrapper2D_I2P_Free(this) Free a DimensionsWrapper2D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper2D_I2P_Print private subroutine DimensionsWrapper2D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper2D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper2d_i2p_t.html","title":"DimensionsWrapper2D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_R8P_t type~~dimensionswrapper5d_r8p_t~~InheritsGraph type~dimensionswrapper5d_r8p_t DimensionsWrapper5D_R8P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_R8P_Final private subroutine DimensionsWrapper5D_R8P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_R8P_Set private subroutine DimensionsWrapper5D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_R8P_Get private subroutine DimensionsWrapper5D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_R8P_GetShape private subroutine DimensionsWrapper5D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_R8P_GetPointer private function DimensionsWrapper5D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_R8P_GetPolymorphic private subroutine DimensionsWrapper5D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_R8P_DataSizeInBytes private function DimensionsWrapper5D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_R8P_isOfDataType private function DimensionsWrapper5D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_R8P_toString private function DimensionsWrapper5D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_R8P_Print private subroutine DimensionsWrapper5D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_R8P_Free private subroutine DimensionsWrapper5D_R8P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_r8p_t.html","title":"DimensionsWrapper5D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_DLCA_t type~~dimensionswrapper5d_dlca_t~~InheritsGraph type~dimensionswrapper5d_dlca_t DimensionsWrapper5D_DLCA_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_DLCA_Final private subroutine DimensionsWrapper5D_DLCA_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_DLCA_Set private subroutine DimensionsWrapper5D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_DLCA_Get private subroutine DimensionsWrapper5D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_DLCA_GetShape private subroutine DimensionsWrapper5D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_DLCA_GetPointer private function DimensionsWrapper5D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_DLCA_GetPolymorphic private subroutine DimensionsWrapper5D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_DLCA_DataSizeInBytes private function DimensionsWrapper5D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_DLCA_isOfDataType private function DimensionsWrapper5D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_DLCA_toString private function DimensionsWrapper5D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_DLCA_Print private subroutine DimensionsWrapper5D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_DLCA_Free private subroutine DimensionsWrapper5D_DLCA_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_DLCA_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_dlca_t.html","title":"DimensionsWrapper5D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I2P_t type~~dimensionswrapper5d_i2p_t~~InheritsGraph type~dimensionswrapper5d_i2p_t DimensionsWrapper5D_I2P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_I2P_Final private subroutine DimensionsWrapper5D_I2P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I2P_Set private subroutine DimensionsWrapper5D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_I2P_Get private subroutine DimensionsWrapper5D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_I2P_GetShape private subroutine DimensionsWrapper5D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_I2P_GetPointer private function DimensionsWrapper5D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_I2P_GetPolymorphic private subroutine DimensionsWrapper5D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I2P_DataSizeInBytes private function DimensionsWrapper5D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_I2P_isOfDataType private function DimensionsWrapper5D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_I2P_toString private function DimensionsWrapper5D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_I2P_Print private subroutine DimensionsWrapper5D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_I2P_Free private subroutine DimensionsWrapper5D_I2P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I2P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_i2p_t.html","title":"DimensionsWrapper5D_I2P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper5D_t type~~dimensionswrapper5d_t~~InheritsGraph type~dimensionswrapper5d_t DimensionsWrapper5D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper5d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper5D_Set), public, deferred :: Set subroutine DimensionsWrapper5D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure(DimensionsWrapper5D_Get), public, deferred :: Get subroutine DimensionsWrapper5D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure(DimensionsWrapper5D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper5D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:)","tags":"","loc":"type/dimensionswrapper5d_t.html","title":"DimensionsWrapper5D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_R4P_t type~~dimensionswrapper5d_r4p_t~~InheritsGraph type~dimensionswrapper5d_r4p_t DimensionsWrapper5D_R4P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_R4P_Final private subroutine DimensionsWrapper5D_R4P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_R4P_Set private subroutine DimensionsWrapper5D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_R4P_Get private subroutine DimensionsWrapper5D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_R4P_GetShape private subroutine DimensionsWrapper5D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_R4P_GetPointer private function DimensionsWrapper5D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_R4P_GetPolymorphic private subroutine DimensionsWrapper5D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_R4P_DataSizeInBytes private function DimensionsWrapper5D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_R4P_isOfDataType private function DimensionsWrapper5D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_R4P_toString private function DimensionsWrapper5D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_R4P_Print private subroutine DimensionsWrapper5D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_R4P_Free private subroutine DimensionsWrapper5D_R4P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_R4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_r4p_t.html","title":"DimensionsWrapper5D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I1P_t type~~dimensionswrapper5d_i1p_t~~InheritsGraph type~dimensionswrapper5d_i1p_t DimensionsWrapper5D_I1P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_I1P_Final private subroutine DimensionsWrapper5D_I1P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I1P_Set private subroutine DimensionsWrapper5D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_I1P_Get private subroutine DimensionsWrapper5D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_I1P_GetShape private subroutine DimensionsWrapper5D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_I1P_GetPointer private function DimensionsWrapper5D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_I1P_GetPolymorphic private subroutine DimensionsWrapper5D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I1P_DataSizeInBytes private function DimensionsWrapper5D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_I1P_isOfDataType private function DimensionsWrapper5D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_I1P_toString private function DimensionsWrapper5D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_I1P_Print private subroutine DimensionsWrapper5D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_I1P_Free private subroutine DimensionsWrapper5D_I1P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I1P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_i1p_t.html","title":"DimensionsWrapper5D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I4P_t type~~dimensionswrapper5d_i4p_t~~InheritsGraph type~dimensionswrapper5d_i4p_t DimensionsWrapper5D_I4P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_I4P_Final private subroutine DimensionsWrapper5D_I4P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I4P_Set private subroutine DimensionsWrapper5D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_I4P_Get private subroutine DimensionsWrapper5D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_I4P_GetShape private subroutine DimensionsWrapper5D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_I4P_GetPointer private function DimensionsWrapper5D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_I4P_GetPolymorphic private subroutine DimensionsWrapper5D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I4P_DataSizeInBytes private function DimensionsWrapper5D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_I4P_isOfDataType private function DimensionsWrapper5D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_I4P_toString private function DimensionsWrapper5D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_I4P_Print private subroutine DimensionsWrapper5D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_I4P_Free private subroutine DimensionsWrapper5D_I4P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_i4p_t.html","title":"DimensionsWrapper5D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_L_t type~~dimensionswrapper5d_l_t~~InheritsGraph type~dimensionswrapper5d_l_t DimensionsWrapper5D_L_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_L_Final private subroutine DimensionsWrapper5D_L_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_L_Set private subroutine DimensionsWrapper5D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_L_Get private subroutine DimensionsWrapper5D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_L_GetShape private subroutine DimensionsWrapper5D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_L_GetPointer private function DimensionsWrapper5D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_L_GetPolymorphic private subroutine DimensionsWrapper5D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_L_DataSizeInBytes private function DimensionsWrapper5D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_L_isOfDataType private function DimensionsWrapper5D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_L_toString private function DimensionsWrapper5D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_L_Print private subroutine DimensionsWrapper5D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_L_Free private subroutine DimensionsWrapper5D_L_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_L_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_l_t.html","title":"DimensionsWrapper5D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I8P_t type~~dimensionswrapper5d_i8p_t~~InheritsGraph type~dimensionswrapper5d_i8p_t DimensionsWrapper5D_I8P_t DimensionsWrapper5D_t DimensionsWrapper5D_t DimensionsWrapper5D_t->type~dimensionswrapper5d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper5D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper5D_I8P_Final private subroutine DimensionsWrapper5D_I8P_Final(this) Final procedure of DimensionsWrapper5D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper5D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I8P_Set private subroutine DimensionsWrapper5D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:) procedure, public :: Get => DimensionsWrapper5D_I8P_Get private subroutine DimensionsWrapper5D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper5D_I8P_GetShape private subroutine DimensionsWrapper5D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper5D_I8P_GetPointer private function DimensionsWrapper5D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper5D_I8P_GetPolymorphic private subroutine DimensionsWrapper5D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I8P_DataSizeInBytes private function DimensionsWrapper5D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this Dimensions wrapper 5D Return Value integer(kind=I4P) Size of lthe stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper5D_I8P_isOfDataType private function DimensionsWrapper5D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this Dimensions wrapper 5D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper5D_I8P_toString private function DimensionsWrapper5D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper5D_I8P_Print private subroutine DimensionsWrapper5D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper5D_I8P_Free private subroutine DimensionsWrapper5D_I8P_Free(this) Free a DimensionsWrapper5D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper5D_I8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper5d_i8p_t.html","title":"DimensionsWrapper5D_I8P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper7D_t type~~dimensionswrapper7d_t~~InheritsGraph type~dimensionswrapper7d_t DimensionsWrapper7D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper7d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper7D_Set), public, deferred :: Set subroutine DimensionsWrapper7D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure(DimensionsWrapper7D_Get), public, deferred :: Get subroutine DimensionsWrapper7D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure(DimensionsWrapper7D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper7D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:)","tags":"","loc":"type/dimensionswrapper7d_t.html","title":"DimensionsWrapper7D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_DLCA_t type~~dimensionswrapper7d_dlca_t~~InheritsGraph type~dimensionswrapper7d_dlca_t DimensionsWrapper7D_DLCA_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_DLCA_Final private subroutine DimensionsWrapper7D_DLCA_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_DLCA_Set private subroutine DimensionsWrapper7D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_DLCA_Get private subroutine DimensionsWrapper7D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_DLCA_GetShape private subroutine DimensionsWrapper7D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_DLCA_GetPointer private function DimensionsWrapper7D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_DLCA_GetPolymorphic private subroutine DimensionsWrapper7D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_DLCA_DataSizeInBytes private function DimensionsWrapper7D_DLCA_DataSizeInBytes(this) result(dAtaSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_DLCA_isOfDataType private function DimensionsWrapper7D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_DLCA_toString private function DimensionsWrapper7D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_DLCA_Print private subroutine DimensionsWrapper7D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_DLCA_Free private subroutine DimensionsWrapper7D_DLCA_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_DLCA_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_dlca_t.html","title":"DimensionsWrapper7D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_L_t type~~dimensionswrapper7d_l_t~~InheritsGraph type~dimensionswrapper7d_l_t DimensionsWrapper7D_L_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_L_Final private subroutine DimensionsWrapper7D_L_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_L_Set private subroutine DimensionsWrapper7D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_L_Get private subroutine DimensionsWrapper7D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_L_GetShape private subroutine DimensionsWrapper7D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_L_GetPointer private function DimensionsWrapper7D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_L_GetPolymorphic private subroutine DimensionsWrapper7D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_L_DataSizeInBytes private function DimensionsWrapper7D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_L_isOfDataType private function DimensionsWrapper7D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_L_toString private function DimensionsWrapper7D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_L_Print private subroutine DimensionsWrapper7D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_L_Free private subroutine DimensionsWrapper7D_L_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_L_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_l_t.html","title":"DimensionsWrapper7D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I8P_t type~~dimensionswrapper7d_i8p_t~~InheritsGraph type~dimensionswrapper7d_i8p_t DimensionsWrapper7D_I8P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_I8P_Final private subroutine DimensionsWrapper7D_I8P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I8P_Set private subroutine DimensionsWrapper7D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_I8P_Get private subroutine DimensionsWrapper7D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_I8P_GetShape private subroutine DimensionsWrapper7D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_I8P_GetPointer private function DimensionsWrapper7D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_I8P_GetPolymorphic private subroutine DimensionsWrapper7D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I8P_DataSizeInBytes private function DimensionsWrapper7D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_I8P_isOfDataType private function DimensionsWrapper7D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_I8P_toString private function DimensionsWrapper7D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_I8P_Print private subroutine DimensionsWrapper7D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_I8P_Free private subroutine DimensionsWrapper7D_I8P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_i8p_t.html","title":"DimensionsWrapper7D_I8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I2P_t type~~dimensionswrapper7d_i2p_t~~InheritsGraph type~dimensionswrapper7d_i2p_t DimensionsWrapper7D_I2P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_I2P_Final private subroutine DimensionsWrapper7D_I2P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I2P_Set private subroutine DimensionsWrapper7D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_I2P_Get private subroutine DimensionsWrapper7D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_I2P_GetShape private subroutine DimensionsWrapper7D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_I2P_GetPointer private function DimensionsWrapper7D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_I2P_GetPolymorphic private subroutine DimensionsWrapper7D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_i2p_DataSizeInBytes private function DimensionsWrapper7D_i2p_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_I2P_isOfDataType private function DimensionsWrapper7D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_I2P_toString private function DimensionsWrapper7D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_I2P_Print private subroutine DimensionsWrapper7D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_I2P_Free private subroutine DimensionsWrapper7D_I2P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I2P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_i2p_t.html","title":"DimensionsWrapper7D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_R8P_t type~~dimensionswrapper7d_r8p_t~~InheritsGraph type~dimensionswrapper7d_r8p_t DimensionsWrapper7D_R8P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_R8P_Final private subroutine DimensionsWrapper7D_R8P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_R8P_Set private subroutine DimensionsWrapper7D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_R8P_Get private subroutine DimensionsWrapper7D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_R8P_GetShape private subroutine DimensionsWrapper7D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_R8P_GetPointer private function DimensionsWrapper7D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_R8P_GetPolymorphic private subroutine DimensionsWrapper7D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_R8P_DataSizeInBytes private function DimensionsWrapper7D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_R8P_isOfDataType private function DimensionsWrapper7D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_R8P_toString private function DimensionsWrapper7D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_R8P_Print private subroutine DimensionsWrapper7D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_R8P_Free private subroutine DimensionsWrapper7D_R8P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_r8p_t.html","title":"DimensionsWrapper7D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I4P_t type~~dimensionswrapper7d_i4p_t~~InheritsGraph type~dimensionswrapper7d_i4p_t DimensionsWrapper7D_I4P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_I4P_Final private subroutine DimensionsWrapper7D_I4P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I4P_Set private subroutine DimensionsWrapper7D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_I4P_Get private subroutine DimensionsWrapper7D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_I4P_GetShape private subroutine DimensionsWrapper7D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_I4P_GetPointer private function DimensionsWrapper7D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_I4P_GetPolymorphic private subroutine DimensionsWrapper7D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I4P_DataSizeInBytes private function DimensionsWrapper7D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_I4P_isOfDataType private function DimensionsWrapper7D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_I4P_toString private function DimensionsWrapper7D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_I4P_Print private subroutine DimensionsWrapper7D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_I4P_Free private subroutine DimensionsWrapper7D_I4P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_i4p_t.html","title":"DimensionsWrapper7D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_R4P_t type~~dimensionswrapper7d_r4p_t~~InheritsGraph type~dimensionswrapper7d_r4p_t DimensionsWrapper7D_R4P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_R4P_Final private subroutine DimensionsWrapper7D_R4P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_R4P_Set private subroutine DimensionsWrapper7D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_R4P_Get private subroutine DimensionsWrapper7D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_R4P_GetShape private subroutine DimensionsWrapper7D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_R4P_GetPointer private function DimensionsWrapper7D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_R4P_GetPolymorphic private subroutine DimensionsWrapper7D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_R4P_DataSizeInBytes private function DimensionsWrapper7D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_R4P_isOfDataType private function DimensionsWrapper7D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_R4P_toString private function DimensionsWrapper7D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_R4P_Print private subroutine DimensionsWrapper7D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_R4P_Free private subroutine DimensionsWrapper7D_R4P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_R4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_r4p_t.html","title":"DimensionsWrapper7D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I1P_t type~~dimensionswrapper7d_i1p_t~~InheritsGraph type~dimensionswrapper7d_i1p_t DimensionsWrapper7D_I1P_t DimensionsWrapper7D_t DimensionsWrapper7D_t DimensionsWrapper7D_t->type~dimensionswrapper7d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper7D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper7D_I1P_Final private subroutine DimensionsWrapper7D_I1P_Final(this) Final procedure of DimensionsWrapper7D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper7D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I1P_Set private subroutine DimensionsWrapper7D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper7D_I1P_Get private subroutine DimensionsWrapper7D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper7D_I1P_GetShape private subroutine DimensionsWrapper7D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper7D_I1P_GetPointer private function DimensionsWrapper7D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper7D_I1P_GetPolymorphic private subroutine DimensionsWrapper7D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I1P_DataSizeInBytes private function DimensionsWrapper7D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this Dimensions wrapper 7D Return Value integer(kind=I4P) Data size in bytes procedure, public :: isOfDataType => DimensionsWrapper7D_I1P_isOfDataType private function DimensionsWrapper7D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this Dimensions wrapper 7D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper7D_I1P_toString private function DimensionsWrapper7D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper7D_I1P_Print private subroutine DimensionsWrapper7D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper7D_I1P_Free private subroutine DimensionsWrapper7D_I1P_Free(this) Free a DimensionsWrapper7D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper7D_I1P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper7d_i1p_t.html","title":"DimensionsWrapper7D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I8P_t type~~dimensionswrapper0d_i8p_t~~InheritsGraph type~dimensionswrapper0d_i8p_t DimensionsWrapper0D_I8P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_I8P_Final private subroutine DimensionsWrapper0D_I8P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I8P_Set private subroutine DimensionsWrapper0D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_I8P_Get private subroutine DimensionsWrapper0D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_I8P_GetShape private subroutine DimensionsWrapper0D_I8P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_I8P_GetPointer private function DimensionsWrapper0D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I8P_GetPolymorphic private subroutine DimensionsWrapper0D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I8P_DataSizeInBytes private function DimensionsWrapper0D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_I8P_isOfDataType private function DimensionsWrapper0D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_I8P_toString private function DimensionsWrapper0D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_I8P_Free private subroutine DimensionsWrapper0D_I8P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_I8P_Print private subroutine DimensionsWrapper0D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_i8p_t.html","title":"DimensionsWrapper0D_I8P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper0D_t type~~dimensionswrapper0d_t~~InheritsGraph type~dimensionswrapper0d_t DimensionsWrapper0D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper0d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper0D_Set), public, deferred :: Set subroutine DimensionsWrapper0D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_t ), intent(inout) :: this class(*), intent(in) :: Value procedure(DimensionsWrapper0D_Get), public, deferred :: Get subroutine DimensionsWrapper0D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_t ), intent(in) :: this class(*), intent(out) :: Value procedure(DimensionsWrapper0D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper0D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_t ), intent(in), target :: this Return Value class(*),\n  pointer","tags":"","loc":"type/dimensionswrapper0d_t.html","title":"DimensionsWrapper0D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_R8P_t type~~dimensionswrapper0d_r8p_t~~InheritsGraph type~dimensionswrapper0d_r8p_t DimensionsWrapper0D_R8P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_R8P_Final private subroutine DimensionsWrapper0D_R8P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_R8P_Set private subroutine DimensionsWrapper0D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_R8P_Get private subroutine DimensionsWrapper0D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_R8P_GetShape private subroutine DimensionsWrapper0D_R8P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_R8P_GetPointer private function DimensionsWrapper0D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_R8P_GetPolymorphic private subroutine DimensionsWrapper0D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_R8P_DataSizeInBytes private function DimensionsWrapper0D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_R8P_isOfDataType private function DimensionsWrapper0D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_R8P_toString private function DimensionsWrapper0D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_R8P_Free private subroutine DimensionsWrapper0D_R8P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_R8P_Print private subroutine DimensionsWrapper0D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_r8p_t.html","title":"DimensionsWrapper0D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_DLCA_t type~~dimensionswrapper0d_dlca_t~~InheritsGraph type~dimensionswrapper0d_dlca_t DimensionsWrapper0D_DLCA_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_DLCA_Final private subroutine DimensionsWrapper0D_DLCA_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_DLCA_Set private subroutine DimensionsWrapper0D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_DLCA_Get private subroutine DimensionsWrapper0D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_DLCA_GetShape private subroutine DimensionsWrapper0D_DLCA_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_DLCA_GetPointer private function DimensionsWrapper0D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_DLCA_GetPolymorphic private subroutine DimensionsWrapper0D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_DLCA_DataSizeInBytes private function DimensionsWrapper0D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_DLCA_isOfDataType private function DimensionsWrapper0D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_DLCA_toString private function DimensionsWrapper0D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_DLCA_Free private subroutine DimensionsWrapper0D_DLCA_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_DLCA_Print private subroutine DimensionsWrapper0D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_dlca_t.html","title":"DimensionsWrapper0D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_L_t type~~dimensionswrapper0d_l_t~~InheritsGraph type~dimensionswrapper0d_l_t DimensionsWrapper0D_L_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_L_Final private subroutine DimensionsWrapper0D_L_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_L_Set private subroutine DimensionsWrapper0D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_L_Get private subroutine DimensionsWrapper0D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_L_GetShape private subroutine DimensionsWrapper0D_L_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_L_GetPointer private function DimensionsWrapper0D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_L_GetPolymorphic private subroutine DimensionsWrapper0D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_L_DataSizeInBytes private function DimensionsWrapper0D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_L_isOfDataType private function DimensionsWrapper0D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_L_toString private function DimensionsWrapper0D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_L_Free private subroutine DimensionsWrapper0D_L_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_L_Print private subroutine DimensionsWrapper0D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_l_t.html","title":"DimensionsWrapper0D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_R4P_t type~~dimensionswrapper0d_r4p_t~~InheritsGraph type~dimensionswrapper0d_r4p_t DimensionsWrapper0D_R4P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_R4P_Final private subroutine DimensionsWrapper0D_R4P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_R4P_Set private subroutine DimensionsWrapper0D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_R4P_Get private subroutine DimensionsWrapper0D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_R4P_GetShape private subroutine DimensionsWrapper0D_R4P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_R4P_GetPointer private function DimensionsWrapper0D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_R4P_GetPolymorphic private subroutine DimensionsWrapper0D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_r4P_DataSizeInBytes private function DimensionsWrapper0D_r4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_R4P_isOfDataType private function DimensionsWrapper0D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_R4P_toString private function DimensionsWrapper0D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper0D_R4P_Print private subroutine DimensionsWrapper0D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper0D_R4P_Free private subroutine DimensionsWrapper0D_R4P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_R4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper0d_r4p_t.html","title":"DimensionsWrapper0D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I4P_t type~~dimensionswrapper0d_i4p_t~~InheritsGraph type~dimensionswrapper0d_i4p_t DimensionsWrapper0D_I4P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_I4P_Final private subroutine DimensionsWrapper0D_I4P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I4P_Set private subroutine DimensionsWrapper0D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_I4P_Get private subroutine DimensionsWrapper0D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_I4P_GetShape private subroutine DimensionsWrapper0D_I4P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_I4P_GetPointer private function DimensionsWrapper0D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I4P_GetPolymorphic private subroutine DimensionsWrapper0D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I4P_DataSizeInBytes private function DimensionsWrapper0D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_I4P_isOfDataType private function DimensionsWrapper0D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_I4P_toString private function DimensionsWrapper0D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_I4P_Free private subroutine DimensionsWrapper0D_I4P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_I4P_Print private subroutine DimensionsWrapper0D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_i4p_t.html","title":"DimensionsWrapper0D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I2P_t type~~dimensionswrapper0d_i2p_t~~InheritsGraph type~dimensionswrapper0d_i2p_t DimensionsWrapper0D_I2P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_I2P_Final private subroutine DimensionsWrapper0D_I2P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I2P_Set private subroutine DimensionsWrapper0D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_I2P_Get private subroutine DimensionsWrapper0D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_I2P_GetShape private subroutine DimensionsWrapper0D_I2P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_I2P_GetPointer private function DimensionsWrapper0D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I2P_GetPolymorphic private subroutine DimensionsWrapper0D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I2P_DataSizeInBytes private function DimensionsWrapper0D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_I2P_isOfDataType private function DimensionsWrapper0D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_I2P_toString private function DimensionsWrapper0D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_I2P_Free private subroutine DimensionsWrapper0D_I2P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_I2P_Print private subroutine DimensionsWrapper0D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_i2p_t.html","title":"DimensionsWrapper0D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I1P_t type~~dimensionswrapper0d_i1p_t~~InheritsGraph type~dimensionswrapper0d_i1p_t DimensionsWrapper0D_I1P_t DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~dimensionswrapper0d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper0D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value Finalization Procedures final :: DimensionsWrapper0D_I1P_Final private subroutine DimensionsWrapper0D_I1P_Final(this) Final procedure of DimensionsWrapper0D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper0D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I1P_Set private subroutine DimensionsWrapper0D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => DimensionsWrapper0D_I1P_Get private subroutine DimensionsWrapper0D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => DimensionsWrapper0D_I1P_GetShape private subroutine DimensionsWrapper0D_I1P_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper0D_I1P_GetPointer private function DimensionsWrapper0D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I1P_GetPolymorphic private subroutine DimensionsWrapper0D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I1P_DataSizeInBytes private function DimensionsWrapper0D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this Dimensions wrapper 0D Return Value integer(kind=I4P) Size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper0D_I1P_isOfDataType private function DimensionsWrapper0D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this Dimensions wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper0D_I1P_toString private function DimensionsWrapper0D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper0D_I1P_Free private subroutine DimensionsWrapper0D_I1P_Free(this) Free a DimensionsWrapper0D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper0D_I1P_Print private subroutine DimensionsWrapper0D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper0D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper0d_i1p_t.html","title":"DimensionsWrapper0D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I2P_t type~~dimensionswrapper4d_i2p_t~~InheritsGraph type~dimensionswrapper4d_i2p_t DimensionsWrapper4D_I2P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_I2P_Final private subroutine DimensionsWrapper4D_I2P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I2P_Set private subroutine DimensionsWrapper4D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_I2P_Get private subroutine DimensionsWrapper4D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_I2P_GetShape private subroutine DimensionsWrapper4D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_I2P_GetPointer private function DimensionsWrapper4D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_I2P_GetPolymorphic private subroutine DimensionsWrapper4D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I2P_DataSizeInBytes private function DimensionsWrapper4D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_I2P_isOfDataType private function DimensionsWrapper4D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_I2P_toString private function DimensionsWrapper4D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_I2P_Print private subroutine DimensionsWrapper4D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_I2P_Free private subroutine DimensionsWrapper4D_I2P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I2P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_i2p_t.html","title":"DimensionsWrapper4D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_R4P_t type~~dimensionswrapper4d_r4p_t~~InheritsGraph type~dimensionswrapper4d_r4p_t DimensionsWrapper4D_R4P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_R4P_Final private subroutine DimensionsWrapper4D_R4P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_R4P_Set private subroutine DimensionsWrapper4D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_R4P_Get private subroutine DimensionsWrapper4D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_R4P_GetShape private subroutine DimensionsWrapper4D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_R4P_GetPointer private function DimensionsWrapper4D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_R4P_GetPolymorphic private subroutine DimensionsWrapper4D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_R4P_DataSizeInBytes private function DimensionsWrapper4D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_R4P_isOfDataType private function DimensionsWrapper4D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_R4P_toString private function DimensionsWrapper4D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper4D_R4P_Free private subroutine DimensionsWrapper4D_R4P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper4D_R4P_Print private subroutine DimensionsWrapper4D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper4d_r4p_t.html","title":"DimensionsWrapper4D_R4P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper4D_t type~~dimensionswrapper4d_t~~InheritsGraph type~dimensionswrapper4d_t DimensionsWrapper4D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper4d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper4D_Set), public, deferred :: Set subroutine DimensionsWrapper4D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure(DimensionsWrapper4D_Get), public, deferred :: Get subroutine DimensionsWrapper4D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure(DimensionsWrapper4D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper4D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:)","tags":"","loc":"type/dimensionswrapper4d_t.html","title":"DimensionsWrapper4D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I1P_t type~~dimensionswrapper4d_i1p_t~~InheritsGraph type~dimensionswrapper4d_i1p_t DimensionsWrapper4D_I1P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_I1P_Final private subroutine DimensionsWrapper4D_I1P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I1P_Set private subroutine DimensionsWrapper4D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_I1P_Get private subroutine DimensionsWrapper4D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_I1P_GetShape private subroutine DimensionsWrapper4D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_I1P_GetPointer private function DimensionsWrapper4D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_I1P_GetPolymorphic private subroutine DimensionsWrapper4D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I1P_DataSizeInBytes private function DimensionsWrapper4D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_I1P_isOfDataType private function DimensionsWrapper4D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_I1P_toString private function DimensionsWrapper4D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_I1P_Print private subroutine DimensionsWrapper4D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_I1P_Free private subroutine DimensionsWrapper4D_I1P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I1P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_i1p_t.html","title":"DimensionsWrapper4D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_R8P_t type~~dimensionswrapper4d_r8p_t~~InheritsGraph type~dimensionswrapper4d_r8p_t DimensionsWrapper4D_R8P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_R8P_Final private subroutine DimensionsWrapper4D_R8P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_R8P_Set private subroutine DimensionsWrapper4D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_R8P_Get private subroutine DimensionsWrapper4D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_R8P_GetShape private subroutine DimensionsWrapper4D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_R8P_GetPointer private function DimensionsWrapper4D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_R8P_GetPolymorphic private subroutine DimensionsWrapper4D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_R8P_DataSizeInBytes private function DimensionsWrapper4D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_R8P_isOfDataType private function DimensionsWrapper4D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_R8P_toString private function DimensionsWrapper4D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper4D_R8P_Free private subroutine DimensionsWrapper4D_R8P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper4D_R8P_Print private subroutine DimensionsWrapper4D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper4d_r8p_t.html","title":"DimensionsWrapper4D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_L_t type~~dimensionswrapper4d_l_t~~InheritsGraph type~dimensionswrapper4d_l_t DimensionsWrapper4D_L_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_L_Final private subroutine DimensionsWrapper4D_L_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_L_Set private subroutine DimensionsWrapper4D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_L_Get private subroutine DimensionsWrapper4D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_L_GetShape private subroutine DimensionsWrapper4D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_L_GetPointer private function DimensionsWrapper4D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_L_GetPolymorphic private subroutine DimensionsWrapper4D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_L_DataSizeInBytes private function DimensionsWrapper4D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_L_isOfDataType private function DimensionsWrapper4D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_L_toString private function DimensionsWrapper4D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_L_Print private subroutine DimensionsWrapper4D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_L_Free private subroutine DimensionsWrapper4D_L_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_L_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_l_t.html","title":"DimensionsWrapper4D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_DLCA_t type~~dimensionswrapper4d_dlca_t~~InheritsGraph type~dimensionswrapper4d_dlca_t DimensionsWrapper4D_DLCA_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_DLCA_Final private subroutine DimensionsWrapper4D_DLCA_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_DLCA_Set private subroutine DimensionsWrapper4D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_DLCA_Get private subroutine DimensionsWrapper4D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_DLCA_GetShape private subroutine DimensionsWrapper4D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_DLCA_GetPointer private function DimensionsWrapper4D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_DLCA_GetPolymorphic private subroutine DimensionsWrapper4D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_DLCA_DataSizeInBytes private function DimensionsWrapper4D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_DLCA_isOfDataType private function DimensionsWrapper4D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_DLCA_toString private function DimensionsWrapper4D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_DLCA_Print private subroutine DimensionsWrapper4D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_DLCA_Free private subroutine DimensionsWrapper4D_DLCA_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_DLCA_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_dlca_t.html","title":"DimensionsWrapper4D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I8P_t type~~dimensionswrapper4d_i8p_t~~InheritsGraph type~dimensionswrapper4d_i8p_t DimensionsWrapper4D_I8P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_I8P_Final private subroutine DimensionsWrapper4D_I8P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I8P_Set private subroutine DimensionsWrapper4D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_I8P_Get private subroutine DimensionsWrapper4D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_I8P_GetShape private subroutine DimensionsWrapper4D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_I8P_GetPointer private function DimensionsWrapper4D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_I8P_GetPolymorphic private subroutine DimensionsWrapper4D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I8P_DataSizeInBytes private function DimensionsWrapper4D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_I8P_isOfDataType private function DimensionsWrapper4D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_I8P_toString private function DimensionsWrapper4D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_I8P_Print private subroutine DimensionsWrapper4D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_I8P_Free private subroutine DimensionsWrapper4D_I8P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_i8p_t.html","title":"DimensionsWrapper4D_I8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I4P_t type~~dimensionswrapper4d_i4p_t~~InheritsGraph type~dimensionswrapper4d_i4p_t DimensionsWrapper4D_I4P_t DimensionsWrapper4D_t DimensionsWrapper4D_t DimensionsWrapper4D_t->type~dimensionswrapper4d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper4D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:) Finalization Procedures final :: DimensionsWrapper4D_I4P_Final private subroutine DimensionsWrapper4D_I4P_Final(this) Final procedure of DimensionsWrapper4D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper4D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I4P_Set private subroutine DimensionsWrapper4D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:) procedure, public :: Get => DimensionsWrapper4D_I4P_Get private subroutine DimensionsWrapper4D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:) procedure, public :: GetShape => DimensionsWrapper4D_I4P_GetShape private subroutine DimensionsWrapper4D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper4D_I4P_GetPointer private function DimensionsWrapper4D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper4D_I4P_GetPolymorphic private subroutine DimensionsWrapper4D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I4P_DataSizeInBytes private function DimensionsWrapper4D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the data size of the stored value in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this Dimensions wrapper 4D Return Value integer(kind=I4P) Data size in bytes of the stored value procedure, public :: isOfDataType => DimensionsWrapper4D_I4P_isOfDataType private function DimensionsWrapper4D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this Dimensions wrapper 4D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper4D_I4P_toString private function DimensionsWrapper4D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper4D_I4P_Print private subroutine DimensionsWrapper4D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper4D_I4P_Free private subroutine DimensionsWrapper4D_I4P_Free(this) Free a DimensionsWrapper4D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper4D_I4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper4d_i4p_t.html","title":"DimensionsWrapper4D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I4P_t type~~dimensionswrapper6d_i4p_t~~InheritsGraph type~dimensionswrapper6d_i4p_t DimensionsWrapper6D_I4P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_I4P_Final private subroutine DimensionsWrapper6D_I4P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I4P_Set private subroutine DimensionsWrapper6D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_I4P_Get private subroutine DimensionsWrapper6D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_I4P_GetShape private subroutine DimensionsWrapper6D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_I4P_GetPointer private function DimensionsWrapper6D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_I4P_GetPolymorphic private subroutine DimensionsWrapper6D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I4P_DataSizeInBytes private function DimensionsWrapper6D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_I4P_isOfDataType private function DimensionsWrapper6D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_I4P_toString private function DimensionsWrapper6D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_I4P_Print private subroutine DimensionsWrapper6D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_I4P_Free private subroutine DimensionsWrapper6D_I4P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_i4p_t.html","title":"DimensionsWrapper6D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_R4P_t type~~dimensionswrapper6d_r4p_t~~InheritsGraph type~dimensionswrapper6d_r4p_t DimensionsWrapper6D_R4P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_R4P_Final private subroutine DimensionsWrapper6D_R4P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_R4P_Set private subroutine DimensionsWrapper6D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_R4P_Get private subroutine DimensionsWrapper6D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_R4P_GetShape private subroutine DimensionsWrapper6D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_R4P_GetPointer private function DimensionsWrapper6D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_R4P_GetPolymorphic private subroutine DimensionsWrapper6D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_R4P_DataSizeInBytes private function DimensionsWrapper6D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_R4P_isOfDataType private function DimensionsWrapper6D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_R4P_toString private function DimensionsWrapper6D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_R4P_Print private subroutine DimensionsWrapper6D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_R4P_Free private subroutine DimensionsWrapper6D_R4P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R4P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_r4p_t.html","title":"DimensionsWrapper6D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I1P_t type~~dimensionswrapper6d_i1p_t~~InheritsGraph type~dimensionswrapper6d_i1p_t DimensionsWrapper6D_I1P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_I1P_Final private subroutine DimensionsWrapper6D_I1P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I1P_Set private subroutine DimensionsWrapper6D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_I1P_Get private subroutine DimensionsWrapper6D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_I1P_GetShape private subroutine DimensionsWrapper6D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_I1P_GetPointer private function DimensionsWrapper6D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_I1P_GetPolymorphic private subroutine DimensionsWrapper6D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I1P_DataSizeInBytes private function DimensionsWrapper6D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_I1P_isOfDataType private function DimensionsWrapper6D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_I1P_toString private function DimensionsWrapper6D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_I1P_Print private subroutine DimensionsWrapper6D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_I1P_Free private subroutine DimensionsWrapper6D_I1P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I1P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_i1p_t.html","title":"DimensionsWrapper6D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I2P_t type~~dimensionswrapper6d_i2p_t~~InheritsGraph type~dimensionswrapper6d_i2p_t DimensionsWrapper6D_I2P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_I2P_Final private subroutine DimensionsWrapper6D_I2P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I2P_Set private subroutine DimensionsWrapper6D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_I2P_Get private subroutine DimensionsWrapper6D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_I2P_GetShape private subroutine DimensionsWrapper6D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_I2P_GetPointer private function DimensionsWrapper6D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_I2P_GetPolymorphic private subroutine DimensionsWrapper6D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I2P_DataSizeInBytes private function DimensionsWrapper6D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_I2P_isOfDataType private function DimensionsWrapper6D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_I2P_toString private function DimensionsWrapper6D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_I2P_Print private subroutine DimensionsWrapper6D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_I2P_Free private subroutine DimensionsWrapper6D_I2P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I2P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_i2p_t.html","title":"DimensionsWrapper6D_I2P_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper6D_t type~~dimensionswrapper6d_t~~InheritsGraph type~dimensionswrapper6d_t DimensionsWrapper6D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper6d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper6D_Set), public, deferred :: Set subroutine DimensionsWrapper6D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure(DimensionsWrapper6D_Get), public, deferred :: Get subroutine DimensionsWrapper6D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure(DimensionsWrapper6D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper6D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:)","tags":"","loc":"type/dimensionswrapper6d_t.html","title":"DimensionsWrapper6D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_R8P_t type~~dimensionswrapper6d_r8p_t~~InheritsGraph type~dimensionswrapper6d_r8p_t DimensionsWrapper6D_R8P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_R8P_Final private subroutine DimensionsWrapper6D_R8P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_R8P_Set private subroutine DimensionsWrapper6D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_R8P_Get private subroutine DimensionsWrapper6D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_R8P_GetShape private subroutine DimensionsWrapper6D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_R8P_GetPointer private function DimensionsWrapper6D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_R8P_GetPolymorphic private subroutine DimensionsWrapper6D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_R8P_DataSizeInBytes private function DimensionsWrapper6D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_R8P_isOfDataType private function DimensionsWrapper6D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_R8P_toString private function DimensionsWrapper6D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_R8P_Print private subroutine DimensionsWrapper6D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_R8P_Free private subroutine DimensionsWrapper6D_R8P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_R8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_r8p_t.html","title":"DimensionsWrapper6D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_DLCA_t type~~dimensionswrapper6d_dlca_t~~InheritsGraph type~dimensionswrapper6d_dlca_t DimensionsWrapper6D_DLCA_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_DLCA_Final private subroutine DimensionsWrapper6D_DLCA_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_DLCA_Set private subroutine DimensionsWrapper6D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_DLCA_Get private subroutine DimensionsWrapper6D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_DLCA_GetShape private subroutine DimensionsWrapper6D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_DLCA_GetPointer private function DimensionsWrapper6D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_DLCA_GetPolymorphic private subroutine DimensionsWrapper6D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_DLCA_DataSizeInBytes private function DimensionsWrapper6D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_DLCA_isOfDataType private function DimensionsWrapper6D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_DLCA_toString private function DimensionsWrapper6D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_DLCA_Print private subroutine DimensionsWrapper6D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_DLCA_Free private subroutine DimensionsWrapper6D_DLCA_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_DLCA_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_dlca_t.html","title":"DimensionsWrapper6D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_L_t type~~dimensionswrapper6d_l_t~~InheritsGraph type~dimensionswrapper6d_l_t DimensionsWrapper6D_L_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_L_Final private subroutine DimensionsWrapper6D_L_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_L_Set private subroutine DimensionsWrapper6D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_L_Get private subroutine DimensionsWrapper6D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_L_GetShape private subroutine DimensionsWrapper6D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_L_GetPointer private function DimensionsWrapper6D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_L_GetPolymorphic private subroutine DimensionsWrapper6D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_L_DataSizeInBytes private function DimensionsWrapper6D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_L_isOfDataType private function DimensionsWrapper6D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_L_toString private function DimensionsWrapper6D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_L_Print private subroutine DimensionsWrapper6D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_L_Free private subroutine DimensionsWrapper6D_L_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_L_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_l_t.html","title":"DimensionsWrapper6D_L_t â FPL "},{"text":"type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I8P_t type~~dimensionswrapper6d_i8p_t~~InheritsGraph type~dimensionswrapper6d_i8p_t DimensionsWrapper6D_I8P_t DimensionsWrapper6D_t DimensionsWrapper6D_t DimensionsWrapper6D_t->type~dimensionswrapper6d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper6D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Print Free Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:,:) Finalization Procedures final :: DimensionsWrapper6D_I8P_Final private subroutine DimensionsWrapper6D_I8P_Final(this) Final procedure of DimensionsWrapper6D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper6D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I8P_Set private subroutine DimensionsWrapper6D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:,:,:,:) procedure, public :: Get => DimensionsWrapper6D_I8P_Get private subroutine DimensionsWrapper6D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:,:,:,:) procedure, public :: GetShape => DimensionsWrapper6D_I8P_GetShape private subroutine DimensionsWrapper6D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper6D_I8P_GetPointer private function DimensionsWrapper6D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:,:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper6D_I8P_GetPolymorphic private subroutine DimensionsWrapper6D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:,:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I8P_DataSizeInBytes private function DimensionsWrapper6D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size of the stored data in bytes Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this Dimensions wrapper 6D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper6D_I8P_isOfDataType private function DimensionsWrapper6D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this Dimensions wrapper 6D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper6D_I8P_toString private function DimensionsWrapper6D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper6D_I8P_Print private subroutine DimensionsWrapper6D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message. procedure, public :: Free => DimensionsWrapper6D_I8P_Free private subroutine DimensionsWrapper6D_I8P_Free(this) Free a DimensionsWrapper6D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper6D_I8P_t ), intent(inout) :: this","tags":"","loc":"type/dimensionswrapper6d_i8p_t.html","title":"DimensionsWrapper6D_I8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_R8P_t type~~dimensionswrapper3d_r8p_t~~InheritsGraph type~dimensionswrapper3d_r8p_t DimensionsWrapper3D_R8P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_r8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_R8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_R8P_Final private subroutine DimensionsWrapper3D_R8P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_R8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_R8P_Set private subroutine DimensionsWrapper3D_R8P_Set(this, Value) Set R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_R8P_Get private subroutine DimensionsWrapper3D_R8P_Get(this, Value) Get R8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_R8P_GetShape private subroutine DimensionsWrapper3D_R8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_R8P_GetPointer private function DimensionsWrapper3D_R8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_R8P_GetPolymorphic private subroutine DimensionsWrapper3D_R8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_R8P_DataSizeInBytes private function DimensionsWrapper3D_R8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_R8P_isOfDataType private function DimensionsWrapper3D_R8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_R8P_toString private function DimensionsWrapper3D_R8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_R8P_Free private subroutine DimensionsWrapper3D_R8P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_R8P_Print private subroutine DimensionsWrapper3D_R8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_r8p_t.html","title":"DimensionsWrapper3D_R8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_DLCA_t type~~dimensionswrapper3d_dlca_t~~InheritsGraph type~dimensionswrapper3d_dlca_t DimensionsWrapper3D_DLCA_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_dlca_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_DLCA_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_DLCA_Final private subroutine DimensionsWrapper3D_DLCA_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_DLCA_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_DLCA_Set private subroutine DimensionsWrapper3D_DLCA_Set(this, Value) Set DLCA Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_DLCA_Get private subroutine DimensionsWrapper3D_DLCA_Get(this, Value) Get deferred length character array Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_DLCA_GetShape private subroutine DimensionsWrapper3D_DLCA_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_DLCA_GetPointer private function DimensionsWrapper3D_DLCA_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_DLCA_GetPolymorphic private subroutine DimensionsWrapper3D_DLCA_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_DLCA_DataSizeInBytes private function DimensionsWrapper3D_DLCA_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_DLCA_isOfDataType private function DimensionsWrapper3D_DLCA_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_DLCA_toString private function DimensionsWrapper3D_DLCA_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_DLCA_Free private subroutine DimensionsWrapper3D_DLCA_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_DLCA_Print private subroutine DimensionsWrapper3D_DLCA_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_DLCA_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_dlca_t.html","title":"DimensionsWrapper3D_DLCA_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I8P_t type~~dimensionswrapper3d_i8p_t~~InheritsGraph type~dimensionswrapper3d_i8p_t DimensionsWrapper3D_I8P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_i8p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_I8P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_I8P_Final private subroutine DimensionsWrapper3D_I8P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_I8P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I8P_Set private subroutine DimensionsWrapper3D_I8P_Set(this, Value) Set I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_I8P_Get private subroutine DimensionsWrapper3D_I8P_Get(this, Value) Get I8P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_I8P_GetShape private subroutine DimensionsWrapper3D_I8P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_I8P_GetPointer private function DimensionsWrapper3D_I8P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_I8P_GetPolymorphic private subroutine DimensionsWrapper3D_I8P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I8P_DataSizeInBytes private function DimensionsWrapper3D_I8P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_I8P_isOfDataType private function DimensionsWrapper3D_I8P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_I8P_toString private function DimensionsWrapper3D_I8P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_I8P_Free private subroutine DimensionsWrapper3D_I8P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_I8P_Print private subroutine DimensionsWrapper3D_I8P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I8P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_i8p_t.html","title":"DimensionsWrapper3D_I8P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_R4P_t type~~dimensionswrapper3d_r4p_t~~InheritsGraph type~dimensionswrapper3d_r4p_t DimensionsWrapper3D_R4P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_r4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_R4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_R4P_Final private subroutine DimensionsWrapper3D_R4P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_R4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_R4P_Set private subroutine DimensionsWrapper3D_R4P_Set(this, Value) Set R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_R4P_Get private subroutine DimensionsWrapper3D_R4P_Get(this, Value) Get R4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_R4P_GetShape private subroutine DimensionsWrapper3D_R4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_R4P_GetPointer private function DimensionsWrapper3D_R4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_R4P_GetPolymorphic private subroutine DimensionsWrapper3D_R4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_R4P_DataSizeInBytes private function DimensionsWrapper3D_R4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_R4P_isOfDataType private function DimensionsWrapper3D_R4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_R4P_toString private function DimensionsWrapper3D_R4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_R4P_Free private subroutine DimensionsWrapper3D_R4P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_R4P_Print private subroutine DimensionsWrapper3D_R4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_R4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_r4p_t.html","title":"DimensionsWrapper3D_R4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I2P_t type~~dimensionswrapper3d_i2p_t~~InheritsGraph type~dimensionswrapper3d_i2p_t DimensionsWrapper3D_I2P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_i2p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_I2P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_I2P_Final private subroutine DimensionsWrapper3D_I2P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_I2P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I2P_Set private subroutine DimensionsWrapper3D_I2P_Set(this, Value) Set I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_I2P_Get private subroutine DimensionsWrapper3D_I2P_Get(this, Value) Get I2P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_I2P_GetShape private subroutine DimensionsWrapper3D_I2P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_I2P_GetPointer private function DimensionsWrapper3D_I2P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_I2P_GetPolymorphic private subroutine DimensionsWrapper3D_I2P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I2P_DataSizeInBytes private function DimensionsWrapper3D_I2P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_I2P_isOfDataType private function DimensionsWrapper3D_I2P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_I2P_toString private function DimensionsWrapper3D_I2P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_I2P_Free private subroutine DimensionsWrapper3D_I2P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_I2P_Print private subroutine DimensionsWrapper3D_I2P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I2P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_i2p_t.html","title":"DimensionsWrapper3D_I2P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_L_t type~~dimensionswrapper3d_l_t~~InheritsGraph type~dimensionswrapper3d_l_t DimensionsWrapper3D_L_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_l_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_L_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_L_Final private subroutine DimensionsWrapper3D_L_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_L_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_L_Set private subroutine DimensionsWrapper3D_L_Set(this, Value) Set logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_L_Get private subroutine DimensionsWrapper3D_L_Get(this, Value) Get logical Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_L_GetShape private subroutine DimensionsWrapper3D_L_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_L_GetPointer private function DimensionsWrapper3D_L_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_L_GetPolymorphic private subroutine DimensionsWrapper3D_L_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_L_DataSizeInBytes private function DimensionsWrapper3D_L_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_L_isOfDataType private function DimensionsWrapper3D_L_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_L_toString private function DimensionsWrapper3D_L_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_L_Free private subroutine DimensionsWrapper3D_L_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_L_Print private subroutine DimensionsWrapper3D_L_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_L_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_l_t.html","title":"DimensionsWrapper3D_L_t â FPL "},{"text":"type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper3D_t type~~dimensionswrapper3d_t~~InheritsGraph type~dimensionswrapper3d_t DimensionsWrapper3D_t DimensionsWrapper_t DimensionsWrapper_t DimensionsWrapper_t->type~dimensionswrapper3d_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Type-Bound Procedures Set Get GetPointer Type-Bound Procedures procedure(DimensionsWrapper3D_Set), public, deferred :: Set subroutine DimensionsWrapper3D_Set (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure(DimensionsWrapper3D_Get), public, deferred :: Get subroutine DimensionsWrapper3D_Get (this, Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure(DimensionsWrapper3D_GetPointer), public, deferred :: GetPointer function DimensionsWrapper3D_GetPointer (this) result(Value) Prototype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:)","tags":"","loc":"type/dimensionswrapper3d_t.html","title":"DimensionsWrapper3D_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I4P_t type~~dimensionswrapper3d_i4p_t~~InheritsGraph type~dimensionswrapper3d_i4p_t DimensionsWrapper3D_I4P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_i4p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_I4P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_I4P_Final private subroutine DimensionsWrapper3D_I4P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_I4P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I4P_Set private subroutine DimensionsWrapper3D_I4P_Set(this, Value) Set I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_I4P_Get private subroutine DimensionsWrapper3D_I4P_Get(this, Value) Get I4P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_I4P_GetShape private subroutine DimensionsWrapper3D_I4P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_I4P_GetPointer private function DimensionsWrapper3D_I4P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_I4P_GetPolymorphic private subroutine DimensionsWrapper3D_I4P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I4P_DataSizeInBytes private function DimensionsWrapper3D_I4P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_I4P_isOfDataType private function DimensionsWrapper3D_I4P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => DimensionsWrapper3D_I4P_toString private function DimensionsWrapper3D_I4P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Free => DimensionsWrapper3D_I4P_Free private subroutine DimensionsWrapper3D_I4P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(inout) :: this procedure, public :: Print => DimensionsWrapper3D_I4P_Print private subroutine DimensionsWrapper3D_I4P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I4P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_i4p_t.html","title":"DimensionsWrapper3D_I4P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I1P_t type~~dimensionswrapper3d_i1p_t~~InheritsGraph type~dimensionswrapper3d_i1p_t DimensionsWrapper3D_I1P_t DimensionsWrapper3D_t DimensionsWrapper3D_t DimensionsWrapper3D_t->type~dimensionswrapper3d_i1p_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables Value Finalization Procedures DimensionsWrapper3D_I1P_Final Type-Bound Procedures Set Get GetShape GetPointer GetPolymorphic DataSizeInBytes isOfDataType Free toString Print Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:) Finalization Procedures final :: DimensionsWrapper3D_I1P_Final private subroutine DimensionsWrapper3D_I1P_Final(this) Final procedure of DimensionsWrapper3D Arguments Type Intent Optional Attributes Name type( DimensionsWrapper3D_I1P_t ), intent(inout) :: this Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I1P_Set private subroutine DimensionsWrapper3D_I1P_Set(this, Value) Set I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(inout) :: this class(*), intent(in) :: Value (:,:,:) procedure, public :: Get => DimensionsWrapper3D_I1P_Get private subroutine DimensionsWrapper3D_I1P_Get(this, Value) Get I1P Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this class(*), intent(out) :: Value (:,:,:) procedure, public :: GetShape => DimensionsWrapper3D_I1P_GetShape private subroutine DimensionsWrapper3D_I1P_GetShape(this, ValueShape) Get Wrapper Value Shape Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => DimensionsWrapper3D_I1P_GetPointer private function DimensionsWrapper3D_I1P_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in), target :: this Return Value class(*),\n  pointer, (:,:,:) procedure, public :: GetPolymorphic => DimensionsWrapper3D_I1P_GetPolymorphic private subroutine DimensionsWrapper3D_I1P_GetPolymorphic(this, Value) Get Unlimited Polymorphic Wrapper Value Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this class(*), intent(out), allocatable :: Value (:,:,:) procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I1P_DataSizeInBytes private function DimensionsWrapper3D_I1P_DataSizeInBytes(this) result(DataSizeInBytes) Return the size in bytes of the stored data Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this Dimensions wrapper 3D Return Value integer(kind=I4P) Size of the stored data in bytes procedure, public :: isOfDataType => DimensionsWrapper3D_I1P_isOfDataType private function DimensionsWrapper3D_I1P_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this Dimensions wrapper 3D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: Free => DimensionsWrapper3D_I1P_Free private subroutine DimensionsWrapper3D_I1P_Free(this) Free a DimensionsWrapper3D Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(inout) :: this procedure, public :: toString => DimensionsWrapper3D_I1P_toString private function DimensionsWrapper3D_I1P_toString(this, Separator) result(String) Return the wrapper value as a string Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this character(len=1), intent(in), optional :: Separator Return Value character(len=:),\n  allocatable procedure, public :: Print => DimensionsWrapper3D_I1P_Print private subroutine DimensionsWrapper3D_I1P_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( DimensionsWrapper3D_I1P_t ), intent(in) :: this DimensionsWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/dimensionswrapper3d_i1p_t.html","title":"DimensionsWrapper3D_I1P_t â FPL "},{"text":"type, public, extends(DimensionsWrapper0D_t) :: CircleWrapper_t type~~circlewrapper_t~~InheritsGraph type~circlewrapper_t CircleWrapper_t Circle_T Circle_T Circle_T->type~circlewrapper_t Value DimensionsWrapper0D_t DimensionsWrapper0D_t DimensionsWrapper0D_t->type~circlewrapper_t Help Ã Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Extends from DimensionsWrapper0D_t (scalar value) Variables Value Type-Bound Procedures Set Get GetShape GetPointer DataSizeInBytes isOfDataType toString Free Print Components Type Visibility Attributes Name Initial type(Circle_T), public, allocatable :: Value Value stores a copy of the input data by assignment Type-Bound Procedures procedure, public :: Set => CircleWrapper_Set Sets the Value into the Wrapper private subroutine CircleWrapper_Set(this, Value) Set Circle Wrapper Value Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(inout) :: this class(*), intent(in) :: Value procedure, public :: Get => CircleWrapper_Get Gets the Value from the Wrapper private subroutine CircleWrapper_Get(this, Value) Get Circle Wrapper Value Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this class(*), intent(out) :: Value procedure, public :: GetShape => CircleWrapper_GetShape Return the shape of the stored Value (0, scalar value) private subroutine CircleWrapper_GetShape(this, ValueShape) Return the shape of the Wrapper Value Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this integer(kind=I4P), intent(inout), allocatable :: ValueShape (:) procedure, public :: GetPointer => CircleWrapper_GetPointer Return an unlimited polymorphic pointer to the Value private function CircleWrapper_GetPointer(this) result(Value) Get Unlimited Polymorphic pointer to Wrapper Value Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in), target :: this Return Value class(*),\n  pointer procedure, public :: DataSizeInBytes => CircleWrapper_DataSizeInBytes Return the size of the stored data in bytes private function CircleWrapper_DataSizeInBytes(this) result(DataSizeInBytes) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this Circle wrapper 0D Return Value integer(kind=I4P) Data size of the stored data in bytes procedure, public :: isOfDataType => CircleWrapper_isOfDataType Check if the data type of a input Mold is Circle_t private function CircleWrapper_isOfDataType(this, Mold) result(isOfDataType) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this Circle wrapper 0D class(*), intent(in) :: Mold Mold for data type comparison Return Value logical Boolean flag to check if Value is of the same data type as Mold procedure, public :: toString => CircleWrapper_toString Return the value as a string private function CircleWrapper_toString(this, Separator) result(String) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this Circle wrapper 0D character(len=1), intent(in), optional :: Separator Value separator for multidimensional variables Return Value character(len=:),\n  allocatable Return the Value as a string procedure, public :: Free => CircleWrapper_Free Free the Wrapper private subroutine CircleWrapper_Free(this) Free a CircleWrapper0D Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(inout) :: this procedure, public :: Print => CircleWrapper_Print Print the Wrapper content private subroutine CircleWrapper_Print(this, unit, prefix, iostat, iomsg) Print Wrapper Arguments Type Intent Optional Attributes Name class( CircleWrapper_t ), intent(in) :: this CircleWrapper integer(kind=I4P), intent(in) :: unit Logic unit. character(len=*), intent(in), optional :: prefix Prefixing string. integer(kind=I4P), intent(out), optional :: iostat IO error. character(len=*), intent(out), optional :: iomsg IO error message.","tags":"","loc":"type/circlewrapper_t.html","title":"CircleWrapper_t â FPL "},{"text":"type, public :: Circle_t Type-Bound Procedures SetRadius GetRadius DataSizeInBytes assignment(=) Source Code Circle_t Type-Bound Procedures procedure, public :: SetRadius => Circle_SetRadius private subroutine Circle_SetRadius(this, Radius) Set the radius of the Circle Arguments Type Intent Optional Attributes Name class( Circle_t ), intent(inout) :: this real, intent(in) :: Radius procedure, public :: GetRadius => Circle_GetRadius private subroutine Circle_GetRadius(this, Radius) Return the radius of the circle Arguments Type Intent Optional Attributes Name class( Circle_t ), intent(in) :: this real, intent(out) :: Radius procedure, public :: DataSizeInBytes => Circle_DataSizeInBytes private function Circle_DataSizeInBytes(this) result(DataSizeInBytes) Check if Mold and Value are of the same datatype Arguments Type Intent Optional Attributes Name class( Circle_t ), intent(in) :: this Circle wrapper 0D Return Value integer Data size of the stored data in bytes generic, public :: assignment(=) => Circle_Assign private subroutine Circle_Assign(A, B) Assignment overloading Arguments Type Intent Optional Attributes Name class( Circle_t ), intent(out) :: A class( Circle_t ), intent(in) :: B Source Code type :: Circle_t private real :: Radius contains private procedure :: Circle_Assign procedure , public :: SetRadius => Circle_SetRadius procedure , public :: GetRadius => Circle_GetRadius procedure , public :: DataSizeInBytes => Circle_DataSizeInBytes generic , public :: assignment ( = ) => Circle_Assign end type Circle_t","tags":"","loc":"type/circle_t.html","title":"Circle_t â FPL "},{"text":"public subroutine FPL_Init() Initialize FPL Arguments None Calls proc~~fpl_init~~CallsGraph proc~fpl_init FPL_Init proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~fpl_init~~CalledByGraph proc~fpl_init FPL_Init program~fortranparameterlist_example FortranParameterList_Example program~fortranparameterlist_example->proc~fpl_init program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~7->proc~fpl_init program~main main program~main->proc~fpl_init program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~3->proc~fpl_init program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~10->proc~fpl_init program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~6->proc~fpl_init program~parameterlistentrycontainer_test ParameterListEntryContainer_Test program~parameterlistentrycontainer_test->proc~fpl_init program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~2->proc~fpl_init program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~8->proc~fpl_init program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~4->proc~fpl_init program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~5->proc~fpl_init program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~9->proc~fpl_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code FPL_Init Source Code subroutine FPL_Init () !----------------------------------------------------------------- !< Initialize FPL !----------------------------------------------------------------- call TheWrapperFactoryList_Init () end subroutine FPL_Init","tags":"","loc":"proc/fpl_init.html","title":"FPL_Init â FPL"},{"text":"public subroutine FPL_Finalize() Finalize FPL Arguments None Called By proc~~fpl_finalize~~CalledByGraph proc~fpl_finalize FPL_Finalize program~fortranparameterlist_example FortranParameterList_Example program~fortranparameterlist_example->proc~fpl_finalize program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~7->proc~fpl_finalize program~main main program~main->proc~fpl_finalize program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~3->proc~fpl_finalize program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~10->proc~fpl_finalize program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~6->proc~fpl_finalize program~parameterlistentrycontainer_test ParameterListEntryContainer_Test program~parameterlistentrycontainer_test->proc~fpl_finalize program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~2->proc~fpl_finalize program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~8->proc~fpl_finalize program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~4->proc~fpl_finalize program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~5->proc~fpl_finalize program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~9->proc~fpl_finalize Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code FPL_Finalize Source Code subroutine FPL_Finalize () !----------------------------------------------------------------- !< Finalize FPL !----------------------------------------------------------------- call TheWrapperFactoryList % Free () end subroutine FPL_Finalize","tags":"","loc":"proc/fpl_finalize.html","title":"FPL_Finalize â FPL"},{"text":"public elemental function byte_size_logical(l) result(bytes) Procedure for computing the number of bytes of a logical variable. Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Character variable whose number of bits must be computed. Return Value integer(kind=I4P) Number of bits of l. Source Code byte_size_logical Source Code elemental function byte_size_logical ( l ) result ( bytes ) !----------------------------------------------------------------- !< Procedure for computing the number of bytes of a logical variable. !----------------------------------------------------------------- logical , intent ( IN ) :: l !< Character variable whose number of bits must be computed. integer ( I4P ) :: bytes !< Number of bits of l. integer ( I1P ) :: mold ( 1 ) !< \"Molding\" dummy variable for bits counting. !----------------------------------------------------------------- bytes = size ( transfer ( l , mold ), dim = 1 , kind = I1P ) return end function byte_size_logical","tags":"","loc":"proc/byte_size_logical.html","title":"byte_size_logical â FPL"},{"text":"public subroutine TheWrapperFactoryList_Init() Set the dimensions of the Value contained in the wrapper Arguments None Called By proc~~thewrapperfactorylist_init~~CalledByGraph proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test program~wrapperfactorylist_r8p_test->proc~thewrapperfactorylist_init program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test program~wrapperfactorylist_i4p_test->proc~thewrapperfactorylist_init program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test program~wrapperfactorylist_i8p_test->proc~thewrapperfactorylist_init program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test program~wrapperfactorylist_i1p_test->proc~thewrapperfactorylist_init program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test program~wrapperfactorylist_r4p_test->proc~thewrapperfactorylist_init program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test program~wrapperthewrapperfactorylist_test->proc~thewrapperfactorylist_init program~wrapperfactorylist_test WrapperFactoryList_Test program~wrapperfactorylist_test->proc~thewrapperfactorylist_init proc~fpl_init FPL_Init proc~fpl_init->proc~thewrapperfactorylist_init program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test program~wrapperfactorylist_i2p_test->proc~thewrapperfactorylist_init program~fortranparameterlist_example FortranParameterList_Example program~fortranparameterlist_example->proc~fpl_init program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~7->proc~fpl_init program~main main program~main->proc~fpl_init program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~3->proc~fpl_init program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~10->proc~fpl_init program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~6->proc~fpl_init program~parameterlistentrycontainer_test ParameterListEntryContainer_Test program~parameterlistentrycontainer_test->proc~fpl_init program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~2->proc~fpl_init program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~8->proc~fpl_init program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~4->proc~fpl_init program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~5->proc~fpl_init program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test program~parameterlistentrycontainer_test~9->proc~fpl_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code TheWrapperFactoryList_Init Source Code subroutine TheWrapperFactoryList_Init () !----------------------------------------------------------------- !< Set the dimensions of the Value contained in the wrapper !----------------------------------------------------------------- ! Add some Wrapper Factories to the list call TheWrapperFactoryList % AddWrapperFactory ( key = 'I1P' , WrapperFactory = WrapperFactoryI1P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I2P' , WrapperFactory = WrapperFactoryI2P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I4P' , WrapperFactory = WrapperFactoryI4P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'I8P' , WrapperFactory = WrapperFactoryI8P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'R4P' , WrapperFactory = WrapperFactoryR4P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'R8P' , WrapperFactory = WrapperFactoryR8P ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'L' , WrapperFactory = WrapperFactoryL ) call TheWrapperFactoryList % AddWrapperFactory ( key = 'DLCA' , WrapperFactory = WrapperFactoryDLCA ) end subroutine TheWrapperFactoryList_Init","tags":"","loc":"proc/thewrapperfactorylist_init.html","title":"TheWrapperFactoryList_Init â FPL"},{"text":"Uses: iso_fortran_env ErrorMessages PENF ParameterEntryDictionary ParameterRootEntry ParameterEntry WrapperFactoryListSingleton WrapperFactory DimensionsWrapper DimensionsWrapper0D DimensionsWrapper1D DimensionsWrapper2D DimensionsWrapper3D DimensionsWrapper4D DimensionsWrapper5D DimensionsWrapper6D DimensionsWrapper7D module~~parameterlist~~UsesGraph module~parameterlist ParameterList module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d_l DimensionsWrapper0D_L module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d_l DimensionsWrapper3D_L module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~parameterlist module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d_l DimensionsWrapper2D_L module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~parameterentrydictionary ParameterEntryDictionary module~parameterentrydictionary->module~parameterlist module~parameterrootentry ParameterRootEntry module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~errormessages ErrorMessages module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~errormessages->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~errormessages->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~errormessages->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P module~errormessages->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~errormessages->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~errormessages->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L module~errormessages->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L module~errormessages->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~errormessages->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA module~errormessages->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA module~errormessages->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~errormessages->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~errormessages->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~errormessages->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P module~errormessages->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p iso_fortran_env iso_fortran_env iso_fortran_env->module~parameterlist iso_fortran_env->module~errormessages module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory module~wrapperfactory->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~wrapperfactory->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~wrapperfactory->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~wrapperfactory->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory module~wrapperfactory->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~wrapperfactory->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p PENF PENF PENF->module~parameterlist PENF->module~parameterentrydictionary PENF->module~parameterrootentry PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~parameterentry ParameterEntry PENF->module~parameterentry PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory PENF->module~dimensionswrapper5d_i8p PENF->module~dimensionswrapper1d_i8p PENF->module~dimensionswrapper7d_i8p PENF->module~dimensionswrapper6d_i8p PENF->module~dimensionswrapper0d_i8p PENF->module~dimensionswrapper4d_i8p PENF->module~dimensionswrapper2d_i8p PENF->module~dimensionswrapper3d_i8p PENF->module~dimensionswrapper2d_i4p PENF->module~dimensionswrapper4d_i4p PENF->module~dimensionswrapper1d_i4p PENF->module~dimensionswrapper5d_i4p PENF->module~dimensionswrapper7d_i4p PENF->module~dimensionswrapper0d_i4p PENF->module~dimensionswrapper3d_i4p PENF->module~dimensionswrapper6d_i4p PENF->module~dimensionswrapper0d_i1p PENF->module~dimensionswrapper4d_i1p PENF->module~dimensionswrapper5d_i1p PENF->module~dimensionswrapper6d_i1p PENF->module~dimensionswrapper1d_i1p PENF->module~dimensionswrapper7d_i1p PENF->module~dimensionswrapper2d_i1p PENF->module~dimensionswrapper3d_i1p PENF->module~dimensionswrapper0d_r8p PENF->module~dimensionswrapper6d_r8p PENF->module~dimensionswrapper3d_r8p PENF->module~dimensionswrapper5d_r8p PENF->module~dimensionswrapper7d_r8p PENF->module~dimensionswrapper2d_r8p PENF->module~dimensionswrapper1d_r8p PENF->module~dimensionswrapper4d_r8p PENF->module~dimensionswrapper5d_l PENF->module~dimensionswrapper2d_l PENF->module~dimensionswrapper7d_l PENF->module~dimensionswrapper6d_l PENF->module~dimensionswrapper1d_l PENF->module~dimensionswrapper0d_l PENF->module~dimensionswrapper3d_l PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils PENF->module~dimensionswrapper3d_dlca PENF->module~dimensionswrapper2d_dlca PENF->module~dimensionswrapper4d_dlca PENF->module~dimensionswrapper5d_dlca PENF->module~dimensionswrapper0d_dlca PENF->module~dimensionswrapper1d_dlca PENF->module~dimensionswrapper7d_dlca PENF->module~dimensionswrapper6d_dlca PENF->module~dimensionswrapper7d_r4p PENF->module~dimensionswrapper1d_r4p PENF->module~dimensionswrapper6d_r4p PENF->module~dimensionswrapper5d_r4p PENF->module~dimensionswrapper3d_r4p PENF->module~dimensionswrapper0d_r4p PENF->module~dimensionswrapper4d_r4p PENF->module~dimensionswrapper2d_r4p PENF->module~dimensionswrapper2d_i2p PENF->module~dimensionswrapper6d_i2p PENF->module~dimensionswrapper7d_i2p PENF->module~dimensionswrapper5d_i2p PENF->module~dimensionswrapper3d_i2p PENF->module~dimensionswrapper4d_i2p PENF->module~dimensionswrapper1d_i2p PENF->module~dimensionswrapper0d_i2p module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper->module~parameterentry module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panmoduleparameterlistUsesGraph = svgPanZoom('#moduleparameterlistUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Parameter List Procedures Parameter List Iterator Procedures Used By module~~parameterlist~~UsedByGraph module~parameterlist ParameterList module~fpl FPL module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types ParameterList_t ParameterListIterator_t Derived Types type, public :: ParameterList_t Finalizations Procedures final :: ParameterList_Finalize Type-Bound Procedures generic, public :: Set => ParameterList_Set0D, ParameterList_Set1D, ParameterList_Set2D, ParameterList_Set3D, ParameterList_Set4D, ParameterList_Set5D, ParameterList_Set6D, ParameterList_Set7D generic, public :: Get => ParameterList_Get0D, ParameterList_Get1D, ParameterList_Get2D, ParameterList_Get3D, ParameterList_Get4D, ParameterList_Get5D, ParameterList_Get6D, ParameterList_Get7D generic, public :: GetPointer => ParameterList_GetPointer0D, ParameterList_GetPointer1D, ParameterList_GetPointer2D, ParameterList_GetPointer3D, ParameterList_GetPointer4D, ParameterList_GetPointer5D, ParameterList_GetPointer6D, ParameterList_GetPointer7D generic, public :: isOfDataType => ParameterList_IsOfDataType0D, ParameterList_IsOfDataType1D, ParameterList_IsOfDataType2D, ParameterList_IsOfDataType3D, ParameterList_IsOfDataType4D, ParameterList_IsOfDataType5D, ParameterList_IsOfDataType6D, ParameterList_IsOfDataType7D generic, public :: isAssignable => ParameterList_isAssignable0D, ParameterList_isAssignable1D, ParameterList_isAssignable2D, ParameterList_isAssignable3D, ParameterList_isAssignable4D, ParameterList_isAssignable5D, ParameterList_isAssignable6D, ParameterList_isAssignable7D procedure, public, non_overridable :: DataSizeInBytes => ParameterList_DataSizeInBytes procedure, public, non_overridable :: Del => ParameterList_RemoveEntry procedure, public, non_overridable :: Init => ParameterList_Init procedure, public, non_overridable :: GetShape => ParameterList_GetShape procedure, public, non_overridable :: GetDimensions => ParameterList_GetDimensions procedure, public, non_overridable :: NewSubList => ParameterList_NewSubList procedure, public, non_overridable :: GetSubList => ParameterList_GetSublist procedure, public, non_overridable :: isPresent => ParameterList_isPresent procedure, public, non_overridable :: isSubList => ParameterList_isSubList procedure, public, non_overridable :: GetAsString => ParameterList_GetAsString procedure, public, non_overridable :: Free => ParameterList_Free procedure, public, non_overridable :: Print => ParameterList_Print procedure, public, non_overridable :: Length => ParameterList_Length procedure, public, non_overridable :: GetIterator => ParameterList_GetIterator type, public :: ParameterListIterator_t Finalizations Procedures final :: ParameterListIterator_Final Type-Bound Procedures procedure, public, non_overridable :: GetKey => ParameterListIterator_GetKey procedure, public, non_overridable :: Init => ParameterListIterator_Init procedure, public, non_overridable :: Begin => ParameterListIterator_Begin procedure, public, non_overridable :: End => ParameterListIterator_End procedure, public, non_overridable :: Next => ParameterListIterator_Next procedure, public, non_overridable :: HasFinished => ParameterListIterator_HasFinished procedure, public, non_overridable :: GetShape => ParameterListIterator_GetShape procedure, public, non_overridable :: GetDimensions => ParameterListIterator_GetDimensions procedure, public, non_overridable :: DataSizeInBytes => ParameterListIterator_DataSizeInBytes procedure, public, non_overridable :: GetSubList => ParameterListIterator_GetSublist procedure, public, non_overridable :: isSubList => ParameterListIterator_isSubList procedure, public, non_overridable :: toString => ParameterListIterator_toString procedure, public, non_overridable :: Print => ParameterListIterator_Print procedure, public, non_overridable :: Free => ParameterListIterator_Free generic, public :: Get => ParameterListIterator_Get0D, ParameterListIterator_Get1D, ParameterListIterator_Get2D, ParameterListIterator_Get3D, ParameterListIterator_Get4D, ParameterListIterator_Get5D, ParameterListIterator_Get6D, ParameterListIterator_Get7D generic, public :: isOfDataType => ParameterListIterator_isOfDataType0D, ParameterListIterator_isOfDataType1D, ParameterListIterator_isOfDataType2D, ParameterListIterator_isOfDataType3D, ParameterListIterator_isOfDataType4D, ParameterListIterator_isOfDataType5D, ParameterListIterator_isOfDataType6D, ParameterListIterator_isOfDataType7D generic, public :: isAssignable => ParameterListIterator_isAssignable0D, ParameterListIterator_isAssignable1D, ParameterListIterator_isAssignable2D, ParameterListIterator_isAssignable3D, ParameterListIterator_isAssignable4D, ParameterListIterator_isAssignable5D, ParameterListIterator_isAssignable6D, ParameterListIterator_isAssignable7D generic, public :: Assignment(=) => ParameterListIterator_Assignment","tags":"","loc":"module/parameterlist.html","title":"ParameterList â FPL"},{"text":"Uses: PENF DimensionsWrapper module~~parameterentry~~UsesGraph module~parameterentry ParameterEntry PENF PENF PENF->module~parameterentry module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~parameterentry Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Entry List Iterator Procedures Used By module~~parameterentry~~UsedByGraph module~parameterentry ParameterEntry module~parameterentrydictionary ParameterEntryDictionary module~parameterentry->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry module~parameterentry->module~parameterrootentry module~parameterlist ParameterList module~parameterentry->module~parameterlist module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterrootentry->module~parameterlist module~fpl FPL module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduleparameterentryUsedByGraph = svgPanZoom('#moduleparameterentryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types EntryListIterator_t ParameterEntry_t Derived Types type, public :: EntryListIterator_t Finalizations Procedures final :: EntryListIterator_Final Type-Bound Procedures procedure, public, non_overridable :: Init => EntryListIterator_Init procedure, public, non_overridable :: Next => EntryListIterator_Next procedure, public, non_overridable :: HasFinished => EntryListIterator_HasFinished procedure, public, non_overridable :: GetEntry => EntryListIterator_GetEntry procedure, public, non_overridable :: GetKey => EntryListIterator_GetKey procedure, public, non_overridable :: PointToValue => EntryListIterator_PointToValue procedure, public, non_overridable :: Free => EntryListIterator_Free generic, public :: Assignment(=) => EntryListIterator_Assignment type, public :: ParameterEntry_t Finalizations Procedures final :: ParameterEntry_Finalize Type-Bound Procedures procedure, public, non_overridable :: Free => ParameterEntry_Free procedure, public, non_overridable :: Print => ParameterEntry_Print procedure, public, non_overridable :: HasNext => ParameterEntry_HasNext procedure, public, non_overridable :: SetNext => ParameterEntry_SetNext procedure, public, non_overridable :: GetNext => ParameterEntry_GetNext procedure, public, non_overridable :: NullifyNext => ParameterEntry_NullifyNext procedure, public, non_overridable :: HasKey => ParameterEntry_HasKey procedure, public, non_overridable :: SetKey => ParameterEntry_SetKey procedure, public, non_overridable :: GetKey => ParameterEntry_GetKey procedure, public, non_overridable :: DeallocateKey => ParameterEntry_DeallocateKey procedure, public, non_overridable :: HasValue => ParameterEntry_HasValue procedure, public, non_overridable :: SetValue => ParameterEntry_SetValue procedure, public, non_overridable :: GetValue => ParameterEntry_GetValue procedure, public, non_overridable :: DeallocateValue => ParameterEntry_DeallocateValue procedure, public, non_overridable :: PointToValue => ParameterEntry_PointToValue procedure, public, non_overridable :: GetIterator => ParameterEntry_GetIterator","tags":"","loc":"module/parameterentry.html","title":"ParameterEntry â FPL"},{"text":"Uses: ParameterList WrapperFactoryListSingleton module~~fpl~~UsesGraph module~fpl FPL module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory I8PWrapperFactory module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory I4PWrapperFactory module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory I1PWrapperFactory module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory R8PWrapperFactory module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory LWrapperFactory module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist WrapperFactoryList module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory DLCAWrapperFactory module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory R4PWrapperFactory module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory I2PWrapperFactory module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d_i8p->module~i8pwrapperfactory PENF PENF PENF->module~parameterlist PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory PENF->module~dimensionswrapper5d_i8p PENF->module~dimensionswrapper1d_i8p PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p iso_fortran_env iso_fortran_env iso_fortran_env->module~parameterlist iso_fortran_env->module~errormessages module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panmodulefplUsesGraph = svgPanZoom('#modulefplUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~fpl~~UsedByGraph module~fpl FPL program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Subroutines FPL_Init FPL_Finalize Subroutines public subroutine FPL_Init () Initialize FPL Arguments None public subroutine FPL_Finalize () Finalize FPL Arguments None","tags":"","loc":"module/fpl.html","title":"FPL â FPL"},{"text":"Uses: iso_fortran_env PENF module~~errormessages~~UsesGraph module~errormessages ErrorMessages iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages PENF PENF PENF->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~errormessages~~UsedByGraph module~errormessages ErrorMessages module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~errormessages->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~errormessages->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~errormessages->module~dimensionswrapper5d_r8p module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~errormessages->module~dimensionswrapper2d_i4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~errormessages->module~dimensionswrapper2d_i2p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P module~errormessages->module~dimensionswrapper4d_r8p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~errormessages->module~dimensionswrapper6d_r4p module~dimensionswrapper1d_l DimensionsWrapper1D_L module~errormessages->module~dimensionswrapper1d_l module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P module~errormessages->module~dimensionswrapper6d_i8p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P module~errormessages->module~dimensionswrapper6d_i1p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P module~errormessages->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~errormessages->module~dimensionswrapper0d_i8p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~errormessages->module~dimensionswrapper1d_i2p module~dimensionswrapper5d_l DimensionsWrapper5D_L module~errormessages->module~dimensionswrapper5d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L module~errormessages->module~dimensionswrapper4d_l module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P module~errormessages->module~dimensionswrapper7d_r8p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~errormessages->module~dimensionswrapper7d_i2p module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~errormessages->module~dimensionswrapper3d_dlca module~dimensionswrapper6d_l DimensionsWrapper6D_L module~errormessages->module~dimensionswrapper6d_l module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA module~errormessages->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~errormessages->module~dimensionswrapper7d_i8p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~errormessages->module~dimensionswrapper1d_r4p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P module~errormessages->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P module~errormessages->module~dimensionswrapper3d_i8p module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA module~errormessages->module~dimensionswrapper5d_dlca module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~errormessages->module~dimensionswrapper1d_i8p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P module~errormessages->module~dimensionswrapper2d_r4p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P module~errormessages->module~dimensionswrapper3d_i2p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P module~errormessages->module~dimensionswrapper7d_i4p module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA module~errormessages->module~dimensionswrapper7d_dlca module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~errormessages->module~dimensionswrapper5d_i8p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~errormessages->module~dimensionswrapper0d_r4p module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~errormessages->module~dimensionswrapper1d_dlca module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P module~errormessages->module~dimensionswrapper4d_r4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~errormessages->module~dimensionswrapper0d_i4p module~circlewrapper CircleWrapper module~errormessages->module~circlewrapper module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~errormessages->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~errormessages->module~dimensionswrapper6d_r8p module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~errormessages->module~dimensionswrapper2d_dlca module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~errormessages->module~dimensionswrapper0d_i1p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P module~errormessages->module~dimensionswrapper2d_r8p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P module~errormessages->module~dimensionswrapper3d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~errormessages->module~dimensionswrapper1d_i4p module~dimensionswrapper2d_l DimensionsWrapper2D_L module~errormessages->module~dimensionswrapper2d_l module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~errormessages->module~dimensionswrapper0d_dlca module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P module~errormessages->module~dimensionswrapper3d_i1p module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA module~errormessages->module~dimensionswrapper4d_dlca module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P module~errormessages->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P module~errormessages->module~dimensionswrapper2d_i1p module~dimensionswrapper7d_l DimensionsWrapper7D_L module~errormessages->module~dimensionswrapper7d_l module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~errormessages->module~dimensionswrapper4d_i4p module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~errormessages->module~dimensionswrapper7d_r4p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P module~errormessages->module~dimensionswrapper7d_i1p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~errormessages->module~dimensionswrapper5d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P module~errormessages->module~dimensionswrapper4d_i2p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~errormessages->module~dimensionswrapper3d_r8p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~errormessages->module~dimensionswrapper6d_i2p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~errormessages->module~dimensionswrapper0d_r8p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P module~errormessages->module~dimensionswrapper5d_i4p module~dimensionswrapper0d_l DimensionsWrapper0D_L module~errormessages->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L module~errormessages->module~dimensionswrapper3d_l module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~errormessages->module~dimensionswrapper1d_i1p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P module~errormessages->module~dimensionswrapper6d_i4p module~circlewrapperfactory CircleWrapperFactory module~errormessages->module~circlewrapperfactory module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P module~errormessages->module~dimensionswrapper2d_i8p module~parameterlist ParameterList module~errormessages->module~parameterlist module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper1d_l->module~lwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~circlewrapper->module~circlewrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory program~main main module~circlewrapperfactory->program~main module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton var panmoduleerrormessagesUsedByGraph = svgPanZoom('#moduleerrormessagesUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables FPLSuccess FPLWrapperFactoryError FPLWrapperError FPLSublistError FPLParameterListIteratorError msg Variables Type Visibility Attributes Name Initial integer(kind=I4P), public, parameter :: FPLSuccess = 0 integer(kind=I4P), public, parameter :: FPLWrapperFactoryError = -1 integer(kind=I4P), public, parameter :: FPLWrapperError = -2 integer(kind=I4P), public, parameter :: FPLSublistError = -3 integer(kind=I4P), public, parameter :: FPLParameterListIteratorError = -4 type(MessageHandler_t), public :: msg","tags":"","loc":"module/errormessages.html","title":"ErrorMessages â FPL"},{"text":"Uses: ParameterEntry ParameterRootEntry PENF module~~parameterentrydictionary~~UsesGraph module~parameterentrydictionary ParameterEntryDictionary PENF PENF PENF->module~parameterentrydictionary module~parameterentry ParameterEntry PENF->module~parameterentry module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry module~parameterrootentry->module~parameterentrydictionary module~dimensionswrapper->module~parameterentry var panmoduleparameterentrydictionaryUsesGraph = svgPanZoom('#moduleparameterentrydictionaryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~parameterentrydictionary~~UsedByGraph module~parameterentrydictionary ParameterEntryDictionary module~parameterlist ParameterList module~parameterentrydictionary->module~parameterlist module~fpl FPL module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types ParameterEntryDictionary_t Derived Types type, public :: ParameterEntryDictionary_t Finalizations Procedures final :: ParameterEntryDictionary_Finalize Type-Bound Procedures procedure, public, non_overridable :: Init => ParameterEntryDictionary_Init procedure, public, non_overridable :: Set => ParameterEntryDictionary_Set procedure, public, non_overridable :: Get => ParameterEntryDictionary_Get procedure, public, non_overridable :: GetPointer => ParameterEntryDictionary_GetPointer procedure, public, non_overridable :: GetDatabase => ParameterEntryDictionary_GetDataBase procedure, public, non_overridable :: Del => ParameterEntryDictionary_Delete procedure, public, non_overridable :: IsPresent => ParameterEntryDictionary_isPresent procedure, public, non_overridable :: Length => ParameterEntryDictionary_Length procedure, public, non_overridable :: Print => ParameterEntryDictionary_Print procedure, public, non_overridable :: Free => ParameterentryDictionary_Free","tags":"","loc":"module/parameterentrydictionary.html","title":"ParameterEntryDictionary â FPL"},{"text":"Uses: PENF module~~fpl_utils~~UsesGraph module~fpl_utils FPL_Utils PENF PENF PENF->module~fpl_utils Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~fpl_utils~~UsedByGraph module~fpl_utils FPL_Utils module~dimensionswrapper2d_l DimensionsWrapper2D_L module~fpl_utils->module~dimensionswrapper2d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L module~fpl_utils->module~dimensionswrapper6d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L module~fpl_utils->module~dimensionswrapper3d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L module~fpl_utils->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L module~fpl_utils->module~dimensionswrapper0d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper5d_l DimensionsWrapper5D_L module~fpl_utils->module~dimensionswrapper5d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L module~fpl_utils->module~dimensionswrapper7d_l module~lwrapperfactory LWrapperFactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulefpl_utilsUsedByGraph = svgPanZoom('#modulefpl_utilsUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Functions byte_size_logical Functions public elemental function byte_size_logical (l) result(bytes) Procedure for computing the number of bytes of a logical variable. Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Character variable whose number of bits must be computed. Return Value integer(kind=I4P) Number of bits of l.","tags":"","loc":"module/fpl_utils.html","title":"FPL_Utils â FPL"},{"text":"Uses: ParameterEntry PENF module~~parameterrootentry~~UsesGraph module~parameterrootentry ParameterRootEntry PENF PENF PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~parameterentry->module~parameterrootentry module~dimensionswrapper->module~parameterentry Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~parameterrootentry~~UsedByGraph module~parameterrootentry ParameterRootEntry module~parameterentrydictionary ParameterEntryDictionary module~parameterrootentry->module~parameterentrydictionary module~parameterlist ParameterList module~parameterrootentry->module~parameterlist module~parameterentrydictionary->module~parameterlist module~fpl FPL module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduleparameterrootentryUsedByGraph = svgPanZoom('#moduleparameterrootentryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types ParameterRootEntry_t Derived Types type, public :: ParameterRootEntry_t Finalizations Procedures final :: ParameterRootEntry_Finalize Type-Bound Procedures procedure, public, non_overridable :: HasRoot => ParameterRootEntry_HasRoot procedure, public, non_overridable :: GetRoot => ParameterRootEntry_GetRoot procedure, public, non_overridable :: GetEntry => ParameterRootEntry_GetEntry procedure, public, non_overridable :: GetPreviousEntry => ParameterRootEntry_GetPreviousEntry procedure, public, non_overridable :: Print => ParameterRootEntry_Print procedure, public, non_overridable :: isPresent => ParameterRootEntry_IsPresent procedure, public, non_overridable :: Length => ParameterRootEntry_Length procedure, public, non_overridable :: RemoveEntry => ParameterRootEntry_RemoveEntry procedure, public, non_overridable :: AddEntry => ParameterRootEntry_AddEntry procedure, public, non_overridable :: GetIterator => ParameterRootEntry_GetIterator procedure, public, non_overridable :: Free => ParameterRootEntry_Free","tags":"","loc":"module/parameterrootentry.html","title":"ParameterRootEntry â FPL"},{"text":"Uses: PENF WrapperFactory module~~wrapperfactorylist~~UsesGraph module~wrapperfactorylist WrapperFactoryList PENF PENF PENF->module~wrapperfactorylist module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~wrapperfactory WrapperFactory module~wrapperfactory->module~wrapperfactorylist module~dimensionswrapper->module~wrapperfactory Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~wrapperfactorylist~~UsedByGraph module~wrapperfactorylist WrapperFactoryList module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulewrapperfactorylistUsedByGraph = svgPanZoom('#modulewrapperfactorylistUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types WrapperFactoryList_t Derived Types type, public :: WrapperFactoryList_t Components Type Visibility Attributes Name Initial class( WrapperFactoryList_t ), public, pointer :: Next => null() Finalizations Procedures final :: WrapperFactoryList_Finalize Type-Bound Procedures procedure, public, non_overridable :: HasNext => WrapperFactoryList_HasNext procedure, public, non_overridable :: SetNext => WrapperFactoryList_SetNext procedure, public, non_overridable :: GetNext => WrapperFactoryList_GetNext procedure, public, non_overridable :: NullifyNext => WrapperFactoryList_NullifyNext procedure, public, non_overridable :: HasKey => WrapperFactoryList_HasKey procedure, public, non_overridable :: SetKey => WrapperFactoryList_SetKey procedure, public, non_overridable :: GetKey => WrapperFactoryList_GetKey procedure, public, non_overridable :: DeallocateKey => WrapperFactoryList_DeallocateKey procedure, public, non_overridable :: HasValue => WrapperFactoryList_HasValue procedure, public, non_overridable :: SetValue => WrapperFactoryList_SetValue procedure, public, non_overridable :: GetValue => WrapperFactoryList_GetValue procedure, public, non_overridable :: Free => WrapperFactoryList_Free procedure, public, non_overridable :: AddWrapperFactory => WrapperFactoryList_AddWrapperFactory procedure, public, non_overridable :: Print => WrapperFactoryList_Print generic, public :: GetFactory => WrapperFactoryList_GetFactory0D, WrapperFactoryList_GetFactory1D, WrapperFactoryList_GetFactory2D, WrapperFactoryList_GetFactory3D, WrapperFactoryList_GetFactory4D, WrapperFactoryList_GetFactory5D, WrapperFactoryList_GetFactory6D, WrapperFactoryList_GetFactory7D","tags":"","loc":"module/wrapperfactorylist.html","title":"WrapperFactoryList â FPL"},{"text":"Uses: WrapperFactoryList DLCAWrapperFactory I1PWrapperFactory I2PWrapperFactory I4PWrapperFactory I8PWrapperFactory LWrapperFactory R4PWrapperFactory R8PWrapperFactory module~~wrapperfactorylistsingleton~~UsesGraph module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory I8PWrapperFactory module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory I4PWrapperFactory module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory I1PWrapperFactory module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory R8PWrapperFactory module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory LWrapperFactory module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist WrapperFactoryList module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory DLCAWrapperFactory module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory R4PWrapperFactory module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory I2PWrapperFactory module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d_i8p->module~i8pwrapperfactory PENF PENF PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory PENF->module~dimensionswrapper5d_i8p PENF->module~dimensionswrapper1d_i8p PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panmodulewrapperfactorylistsingletonUsesGraph = svgPanZoom('#modulewrapperfactorylistsingletonUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~wrapperfactorylistsingleton~~UsedByGraph module~wrapperfactorylistsingleton WrapperFactoryListSingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulewrapperfactorylistsingletonUsedByGraph = svgPanZoom('#modulewrapperfactorylistsingletonUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables TheWrapperFactoryList Subroutines TheWrapperFactoryList_Init Variables Type Visibility Attributes Name Initial type(WrapperFactoryList_t), public :: TheWrapperFactoryList Subroutines public subroutine TheWrapperFactoryList_Init () Set the dimensions of the Value contained in the wrapper Arguments None","tags":"","loc":"module/wrapperfactorylistsingleton.html","title":"WrapperFactoryListSingleton â FPL"},{"text":"Uses: PENF module~~dimensionswrapper~~UsesGraph module~dimensionswrapper DimensionsWrapper PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper~~UsedByGraph module~dimensionswrapper DimensionsWrapper module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~dimensionswrapper->program~wrapperfactorylist_r4p_test module~circlewrapperfactory CircleWrapperFactory module~dimensionswrapper->module~circlewrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~parameterentry ParameterEntry module~dimensionswrapper->module~parameterentry program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~dimensionswrapper->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~dimensionswrapper->program~wrapperfactorylist_i8p_test module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~dimensionswrapper->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~dimensionswrapper->program~wrapperfactorylist_i4p_test module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~dimensionswrapper->program~wrapperthewrapperfactorylist_test module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~parameterlist ParameterList module~dimensionswrapper->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~dimensionswrapper->program~wrapperfactorylist_i2p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d program~wrapperfactorylist_test WrapperFactoryList_Test module~dimensionswrapper->program~wrapperfactorylist_test module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~circlewrapper CircleWrapper module~dimensionswrapper0d->module~circlewrapper module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d_l DimensionsWrapper0D_L module~dimensionswrapper0d->module~dimensionswrapper0d_l module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d_l DimensionsWrapper2D_L module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P module~dimensionswrapper2d->module~dimensionswrapper2d_r4p program~main main module~circlewrapperfactory->program~main module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~parameterentry->module~parameterlist module~parameterentrydictionary ParameterEntryDictionary module~parameterentry->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry module~parameterentry->module~parameterrootentry module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d_l DimensionsWrapper1D_L module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d_l DimensionsWrapper3D_L module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d_l DimensionsWrapper7D_L module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~fpl FPL module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->program~wrapperfactorylist_r4p_test module~wrapperfactory->module~circlewrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->program~wrapperfactorylist_r8p_test module~wrapperfactory->program~wrapperfactorylist_i8p_test module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->program~wrapperfactorylist_i1p_test module~wrapperfactory->program~wrapperfactorylist_i4p_test module~wrapperfactory->program~wrapperthewrapperfactorylist_test module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->program~wrapperfactorylist_i2p_test module~wrapperfactory->program~wrapperfactorylist_test module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper6d_l DimensionsWrapper6D_L module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~lwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d_l DimensionsWrapper4D_L module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~circlewrapper->module~circlewrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~wrapperfactorylistsingleton->module~parameterlist module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test module~wrapperfactorylistsingleton->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory var panmoduledimensionswrapperUsedByGraph = svgPanZoom('#moduledimensionswrapperUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper_t Derived Types type, public, abstract :: DimensionsWrapper_t Type-Bound Procedures procedure, public :: SetDimensions => DimensionsWrapper_SetDimensions procedure, public :: GetDimensions => DimensionsWrapper_GetDimensions procedure, public :: Print => DimensionsWrapper_Print procedure(DimensionsWrapper_isOfDataType), public :: isOfDataType procedure(DimensionsWrapper_DataSizeInBytes), public :: DataSizeInBytes procedure(DimensionsWrapper_Free), public :: Free procedure(DimensionsWrapper_GetShape), public :: GetShape procedure(DimensionsWrapper_toString), public :: toString","tags":"","loc":"module/dimensionswrapper.html","title":"DimensionsWrapper â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_I1P DimensionsWrapper1D_I1P DimensionsWrapper2D_I1P DimensionsWrapper3D_I1P DimensionsWrapper4D_I1P DimensionsWrapper5D_I1P DimensionsWrapper6D_I1P DimensionsWrapper7D_I1P module~~i1pwrapperfactory~~UsesGraph module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~dimensionswrapper5d_i1p->module~i1pwrapperfactory PENF PENF PENF->module~i1pwrapperfactory PENF->module~dimensionswrapper0d_i1p PENF->module~dimensionswrapper4d_i1p PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~i1pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p var panmodulei1pwrapperfactoryUsesGraph = svgPanZoom('#modulei1pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~i1pwrapperfactory~~UsedByGraph module~i1pwrapperfactory I1PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulei1pwrapperfactoryUsedByGraph = svgPanZoom('#modulei1pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryI1P Variables Type Visibility Attributes Name Initial type(I1PWrapperFactory_t), public :: WrapperFactoryI1P","tags":"","loc":"module/i1pwrapperfactory.html","title":"I1PWrapperFactory â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_R8P DimensionsWrapper1D_R8P DimensionsWrapper2D_R8P DimensionsWrapper3D_R8P DimensionsWrapper4D_R8P DimensionsWrapper5D_R8P DimensionsWrapper6D_R8P DimensionsWrapper7D_R8P module~~r8pwrapperfactory~~UsesGraph module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~dimensionswrapper5d_r8p->module~r8pwrapperfactory PENF PENF PENF->module~r8pwrapperfactory PENF->module~dimensionswrapper0d_r8p PENF->module~dimensionswrapper6d_r8p PENF->module~dimensionswrapper3d_r8p PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p var panmoduler8pwrapperfactoryUsesGraph = svgPanZoom('#moduler8pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~r8pwrapperfactory~~UsedByGraph module~r8pwrapperfactory R8PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduler8pwrapperfactoryUsedByGraph = svgPanZoom('#moduler8pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryR8P Variables Type Visibility Attributes Name Initial type(R8PWrapperFactory_t), public :: WrapperFactoryR8P","tags":"","loc":"module/r8pwrapperfactory.html","title":"R8PWrapperFactory â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_I8P DimensionsWrapper1D_I8P DimensionsWrapper2D_I8P DimensionsWrapper3D_I8P DimensionsWrapper4D_I8P DimensionsWrapper5D_I8P DimensionsWrapper6D_I8P DimensionsWrapper7D_I8P module~~i8pwrapperfactory~~UsesGraph module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d_i8p->module~i8pwrapperfactory PENF PENF PENF->module~i8pwrapperfactory PENF->module~dimensionswrapper5d_i8p PENF->module~dimensionswrapper1d_i8p PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p var panmodulei8pwrapperfactoryUsesGraph = svgPanZoom('#modulei8pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~i8pwrapperfactory~~UsedByGraph module~i8pwrapperfactory I8PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulei8pwrapperfactoryUsedByGraph = svgPanZoom('#modulei8pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryI8P Variables Type Visibility Attributes Name Initial type(I8PWrapperFactory_t), public :: WrapperFactoryI8P","tags":"","loc":"module/i8pwrapperfactory.html","title":"I8PWrapperFactory â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_I2P DimensionsWrapper1D_I2P DimensionsWrapper2D_I2P DimensionsWrapper3D_I2P DimensionsWrapper4D_I2P DimensionsWrapper5D_I2P DimensionsWrapper6D_I2P DimensionsWrapper7D_I2P module~~i2pwrapperfactory~~UsesGraph module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~dimensionswrapper5d_i2p->module~i2pwrapperfactory PENF PENF PENF->module~i2pwrapperfactory PENF->module~dimensionswrapper2d_i2p PENF->module~dimensionswrapper6d_i2p PENF->module~dimensionswrapper7d_i2p PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p var panmodulei2pwrapperfactoryUsesGraph = svgPanZoom('#modulei2pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~i2pwrapperfactory~~UsedByGraph module~i2pwrapperfactory I2PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulei2pwrapperfactoryUsedByGraph = svgPanZoom('#modulei2pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryI2P Variables Type Visibility Attributes Name Initial type(I2PWrapperFactory_t), public :: WrapperFactoryI2P","tags":"","loc":"module/i2pwrapperfactory.html","title":"I2PWrapperFactory â FPL"},{"text":"Uses: PENF WrapperFactory DimensionsWrapper DimensionsWrapper0D_L DimensionsWrapper1D_L DimensionsWrapper2D_L DimensionsWrapper3D_L DimensionsWrapper4D_L DimensionsWrapper5D_L DimensionsWrapper6D_L DimensionsWrapper7D_L module~~lwrapperfactory~~UsesGraph module~lwrapperfactory LWrapperFactory module~dimensionswrapper5d_l DimensionsWrapper5D_L module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l DimensionsWrapper2D_L module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l DimensionsWrapper7D_L module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l DimensionsWrapper6D_L module~dimensionswrapper6d_l->module~lwrapperfactory PENF PENF PENF->module~lwrapperfactory PENF->module~dimensionswrapper5d_l PENF->module~dimensionswrapper2d_l PENF->module~dimensionswrapper7d_l PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper4d_l->module~lwrapperfactory module~wrapperfactory->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~dimensionswrapper5d->module~dimensionswrapper5d_l iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper4d->module~dimensionswrapper4d_l var panmodulelwrapperfactoryUsesGraph = svgPanZoom('#modulelwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~lwrapperfactory~~UsedByGraph module~lwrapperfactory LWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulelwrapperfactoryUsedByGraph = svgPanZoom('#modulelwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryL Variables Type Visibility Attributes Name Initial type(LWrapperFactory_t), public :: WrapperFactoryL","tags":"","loc":"module/lwrapperfactory.html","title":"LWrapperFactory â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_I4P DimensionsWrapper1D_I4P DimensionsWrapper2D_I4P DimensionsWrapper3D_I4P DimensionsWrapper4D_I4P DimensionsWrapper5D_I4P DimensionsWrapper6D_I4P DimensionsWrapper7D_I4P module~~i4pwrapperfactory~~UsesGraph module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~dimensionswrapper1d_i4p->module~i4pwrapperfactory PENF PENF PENF->module~i4pwrapperfactory PENF->module~dimensionswrapper2d_i4p PENF->module~dimensionswrapper4d_i4p PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p var panmodulei4pwrapperfactoryUsesGraph = svgPanZoom('#modulei4pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~i4pwrapperfactory~~UsedByGraph module~i4pwrapperfactory I4PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulei4pwrapperfactoryUsedByGraph = svgPanZoom('#modulei4pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryI4P Variables Type Visibility Attributes Name Initial type(I4PWrapperFactory_t), public :: WrapperFactoryI4P","tags":"","loc":"module/i4pwrapperfactory.html","title":"I4PWrapperFactory â FPL"},{"text":"Uses: WrapperFactory PENF DimensionsWrapper DimensionsWrapper0D_R4P DimensionsWrapper1D_R4P DimensionsWrapper2D_R4P DimensionsWrapper3D_R4P DimensionsWrapper4D_R4P DimensionsWrapper5D_R4P DimensionsWrapper6D_R4P DimensionsWrapper7D_R4P module~~r4pwrapperfactory~~UsesGraph module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~dimensionswrapper6d_r4p->module~r4pwrapperfactory PENF PENF PENF->module~r4pwrapperfactory PENF->module~dimensionswrapper7d_r4p PENF->module~dimensionswrapper1d_r4p PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_r4p var panmoduler4pwrapperfactoryUsesGraph = svgPanZoom('#moduler4pwrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~r4pwrapperfactory~~UsedByGraph module~r4pwrapperfactory R4PWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduler4pwrapperfactoryUsedByGraph = svgPanZoom('#moduler4pwrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryR4P Variables Type Visibility Attributes Name Initial type(R4PWrapperFactory_t), public :: WrapperFactoryR4P","tags":"","loc":"module/r4pwrapperfactory.html","title":"R4PWrapperFactory â FPL"},{"text":"Uses: DimensionsWrapper module~~wrapperfactory~~UsesGraph module~wrapperfactory WrapperFactory module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~wrapperfactory PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~wrapperfactory~~UsedByGraph module~wrapperfactory WrapperFactory module~i8pwrapperfactory I8PWrapperFactory module~wrapperfactory->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~wrapperfactory->module~i4pwrapperfactory program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactory->program~wrapperthewrapperfactorylist_test module~i1pwrapperfactory I1PWrapperFactory module~wrapperfactory->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~wrapperfactory->module~r8pwrapperfactory program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactory->program~wrapperfactorylist_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactory->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactory->program~wrapperfactorylist_r4p_test module~lwrapperfactory LWrapperFactory module~wrapperfactory->module~lwrapperfactory program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactory->program~wrapperfactorylist_i1p_test module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory module~wrapperfactory->module~dlcawrapperfactory program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactory->program~wrapperfactorylist_i4p_test module~r4pwrapperfactory R4PWrapperFactory module~wrapperfactory->module~r4pwrapperfactory module~circlewrapperfactory CircleWrapperFactory module~wrapperfactory->module~circlewrapperfactory program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactory->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactory->program~wrapperfactorylist_r8p_test module~i2pwrapperfactory I2PWrapperFactory module~wrapperfactory->module~i2pwrapperfactory module~parameterlist ParameterList module~wrapperfactory->module~parameterlist module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~main main module~circlewrapperfactory->program~main module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~fpl FPL module~parameterlist->module~fpl module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test module~wrapperfactorylistsingleton->module~parameterlist module~wrapperfactorylistsingleton->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmodulewrapperfactoryUsedByGraph = svgPanZoom('#modulewrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types WrapperFactory_t Derived Types type, public, abstract :: WrapperFactory_t Type-Bound Procedures procedure(WrapperFactory_hasSameType), public :: hasSameType generic, public :: Wrap => Wrap0D, Wrap1D, Wrap2D, Wrap3D, Wrap4D, Wrap5D, Wrap6D, Wrap7D","tags":"","loc":"module/wrapperfactory.html","title":"WrapperFactory â FPL"},{"text":"Uses: PENF WrapperFactory DimensionsWrapper DimensionsWrapper0D_DLCA DimensionsWrapper1D_DLCA DimensionsWrapper2D_DLCA DimensionsWrapper3D_DLCA DimensionsWrapper4D_DLCA DimensionsWrapper5D_DLCA DimensionsWrapper6D_DLCA DimensionsWrapper7D_DLCA module~~dlcawrapperfactory~~UsesGraph module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~dimensionswrapper2d_dlca->module~dlcawrapperfactory PENF PENF PENF->module~dlcawrapperfactory PENF->module~dimensionswrapper3d_dlca PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~dlcawrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_dlca var panmoduledlcawrapperfactoryUsesGraph = svgPanZoom('#moduledlcawrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dlcawrapperfactory~~UsedByGraph module~dlcawrapperfactory DLCAWrapperFactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledlcawrapperfactoryUsedByGraph = svgPanZoom('#moduledlcawrapperfactoryUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryDLCA Variables Type Visibility Attributes Name Initial type(DLCAWrapperFactory_t), public :: WrapperFactoryDLCA","tags":"","loc":"module/dlcawrapperfactory.html","title":"DLCAWrapperFactory â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_i1p~~UsesGraph module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_i1p PENF PENF PENF->module~dimensionswrapper1d_i1p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_i1p~~UsedByGraph module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_I1P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I1P_Set procedure, public :: Get => DimensionsWrapper1D_I1P_Get procedure, public :: GetShape => DimensionsWrapper1D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_I1P_toString procedure, public :: Free => DimensionsWrapper1D_I1P_Free procedure, public :: Print => DimensionsWrapper1D_I1P_Print","tags":"","loc":"module/dimensionswrapper1d_i1p.html","title":"DimensionsWrapper1D_I1P â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_i2p~~UsesGraph module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_i2p PENF PENF PENF->module~dimensionswrapper1d_i2p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_i2p~~UsedByGraph module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_I2P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I2P_Set procedure, public :: Get => DimensionsWrapper1D_I2P_Get procedure, public :: GetShape => DimensionsWrapper1D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_I2P_toString procedure, public :: Free => DimensionsWrapper1D_I2P_Free procedure, public :: Print => DimensionsWrapper1D_I2P_Print","tags":"","loc":"module/dimensionswrapper1d_i2p.html","title":"DimensionsWrapper1D_I2P â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_i4p~~UsesGraph module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_i4p PENF PENF PENF->module~dimensionswrapper1d_i4p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_i4p~~UsedByGraph module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_I4P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I4P_Set procedure, public :: Get => DimensionsWrapper1D_I4P_Get procedure, public :: GetShape => DimensionsWrapper1D_I4P_GetShape procedure, public :: GetPolymorphic => DimensionsWrapper1D_I4P_GetPolymorphic procedure, public :: GetPointer => DimensionsWrapper1D_I4P_GetPointer procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_I4P_toString procedure, public :: Free => DimensionsWrapper1D_I4P_Free procedure, public :: Print => DimensionsWrapper1D_I4P_Print","tags":"","loc":"module/dimensionswrapper1d_i4p.html","title":"DimensionsWrapper1D_I4P â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_dlca~~UsesGraph module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_dlca PENF PENF PENF->module~dimensionswrapper1d_dlca PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_dlca~~UsedByGraph module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_DLCA_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_DLCA_Set procedure, public :: Get => DimensionsWrapper1D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper1D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper1D_DLCA_toString procedure, public :: Free => DimensionsWrapper1D_DLCA_Free procedure, public :: Print => DimensionsWrapper1D_DLCA_Print","tags":"","loc":"module/dimensionswrapper1d_dlca.html","title":"DimensionsWrapper1D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_r4p~~UsesGraph module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_r4p PENF PENF PENF->module~dimensionswrapper1d_r4p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_r4p~~UsedByGraph module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_R4P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_R4P_Set procedure, public :: Get => DimensionsWrapper1D_R4P_Get procedure, public :: GetShape => DimensionsWrapper1D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_R4P_toString procedure, public :: Free => DimensionsWrapper1D_R4P_Free procedure, public :: Print => DimensionsWrapper1D_R4P_Print","tags":"","loc":"module/dimensionswrapper1d_r4p.html","title":"DimensionsWrapper1D_R4P â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_r8p~~UsesGraph module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_r8p PENF PENF PENF->module~dimensionswrapper1d_r8p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_r8p~~UsedByGraph module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_R8P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_R8P_Set procedure, public :: Get => DimensionsWrapper1D_R8P_Get procedure, public :: GetShape => DimensionsWrapper1D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_R8P_toString procedure, public :: Free => DimensionsWrapper1D_R8P_Free procedure, public :: Print => DimensionsWrapper1D_R8P_Print","tags":"","loc":"module/dimensionswrapper1d_r8p.html","title":"DimensionsWrapper1D_R8P â FPL"},{"text":"Uses: DimensionsWrapper1D FPL_Utils PENF ErrorMessages module~~dimensionswrapper1d_l~~UsesGraph module~dimensionswrapper1d_l DimensionsWrapper1D_L module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_l PENF PENF PENF->module~dimensionswrapper1d_l module~errormessages ErrorMessages PENF->module~errormessages module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~errormessages->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper1d_l module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_l~~UsedByGraph module~dimensionswrapper1d_l DimensionsWrapper1D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper1d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_L_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_L_Set procedure, public :: Get => DimensionsWrapper1D_L_Get procedure, public :: GetShape => DimensionsWrapper1D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_L_GetPolymorphic procedure, public :: isOfDataType => DimensionsWrapper1D_L_isOfDataType procedure, public :: DataSizeInBytes => DimensionsWrapper1D_L_DataSizeInBytes procedure, public :: toString => DimensionsWrapper1D_L_toString procedure, public :: Free => DimensionsWrapper1D_L_Free procedure, public :: Print => DimensionsWrapper1D_L_Print","tags":"","loc":"module/dimensionswrapper1d_l.html","title":"DimensionsWrapper1D_L â FPL"},{"text":"Uses: DimensionsWrapper1D PENF ErrorMessages module~~dimensionswrapper1d_i8p~~UsesGraph module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper1d_i8p PENF PENF PENF->module~dimensionswrapper1d_i8p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper1d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d_i8p~~UsedByGraph module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper1d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper1d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_I8P_t Derived Types type, public, extends(DimensionsWrapper1D_t) :: DimensionsWrapper1D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:) Finalizations Procedures final :: DimensionsWrapper1D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper1D_I8P_Set procedure, public :: Get => DimensionsWrapper1D_I8P_Get procedure, public :: GetShape => DimensionsWrapper1D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper1D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper1D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper1D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper1D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper1D_I8P_toString procedure, public :: Print => DimensionsWrapper1D_I8P_Print procedure, public :: Free => DimensionsWrapper1D_I8P_Free","tags":"","loc":"module/dimensionswrapper1d_i8p.html","title":"DimensionsWrapper1D_I8P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper1d~~UsesGraph module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper1d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper1d~~UsedByGraph module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d_l DimensionsWrapper1D_L module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~parameterlist ParameterList module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper1d_l->module~lwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~fpl FPL module~parameterlist->module~fpl module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper1dUsedByGraph = svgPanZoom('#moduledimensionswrapper1dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper1D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper1D_t Type-Bound Procedures procedure(DimensionsWrapper1D_Set), public :: Set procedure(DimensionsWrapper1D_Get), public :: Get procedure(DimensionsWrapper1D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper1d.html","title":"DimensionsWrapper1D â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_r4p~~UsesGraph module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF PENF PENF->module~dimensionswrapper2d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_r4p~~UsedByGraph module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_R4P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_R4P_Set procedure, public :: Get => DimensionsWrapper2D_R4P_Get procedure, public :: GetShape => DimensionsWrapper2D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper2D_R4P_toString procedure, public :: Free => DimensionsWrapper2D_R4P_Free procedure, public :: Print => DimensionsWrapper2D_R4P_Print","tags":"","loc":"module/dimensionswrapper2d_r4p.html","title":"DimensionsWrapper2D_R4P â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_i8p~~UsesGraph module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF PENF PENF->module~dimensionswrapper2d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_i8p~~UsedByGraph module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_I8P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I8P_Set procedure, public :: Get => DimensionsWrapper2D_I8P_Get procedure, public :: GetShape => DimensionsWrapper2D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper2D_I8P_toString procedure, public :: Free => DimensionsWrapper2D_I8P_Free procedure, public :: Print => DimensionsWrapper2D_I8P_Print","tags":"","loc":"module/dimensionswrapper2d_i8p.html","title":"DimensionsWrapper2D_I8P â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_r8p~~UsesGraph module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF PENF PENF->module~dimensionswrapper2d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_r8p~~UsedByGraph module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_R8P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_R8P_Set procedure, public :: Get => DimensionsWrapper2D_R8P_Get procedure, public :: GetShape => DimensionsWrapper2D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper2D_R8P_toString procedure, public :: Free => DimensionsWrapper2D_R8P_Free procedure, public :: Print => DimensionsWrapper2D_R8P_Print","tags":"","loc":"module/dimensionswrapper2d_r8p.html","title":"DimensionsWrapper2D_R8P â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_i1p~~UsesGraph module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF PENF PENF->module~dimensionswrapper2d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_i1p~~UsedByGraph module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_I1P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I1P_Set procedure, public :: Get => DimensionsWrapper2D_I1P_Get procedure, public :: GetShape => DimensionsWrapper2D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper2D_I1P_toString procedure, public :: Free => DimensionsWrapper2D_I1P_Free procedure, public :: Print => DimensionsWrapper2D_I1P_Print","tags":"","loc":"module/dimensionswrapper2d_i1p.html","title":"DimensionsWrapper2D_I1P â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_dlca~~UsesGraph module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF PENF PENF->module~dimensionswrapper2d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_dlca~~UsedByGraph module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_DLCA_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_DLCA_Set procedure, public :: Get => DimensionsWrapper2D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper2D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper2D_DLCA_toString procedure, public :: Free => DimensionsWrapper2D_DLCA_Free procedure, public :: Print => DimensionsWrapper2D_DLCA_Print","tags":"","loc":"module/dimensionswrapper2d_dlca.html","title":"DimensionsWrapper2D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper2d~~UsesGraph module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper2d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d~~UsedByGraph module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d_l DimensionsWrapper2D_L module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~parameterlist ParameterList module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper2d_l->module~lwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper2dUsedByGraph = svgPanZoom('#moduledimensionswrapper2dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper2D_t Type-Bound Procedures procedure(DimensionsWrapper2D_Set), public :: Set procedure(DimensionsWrapper2D_Get), public :: Get procedure(DimensionsWrapper2D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper2d.html","title":"DimensionsWrapper2D â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_i4p~~UsesGraph module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF PENF PENF->module~dimensionswrapper2d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper2d_i4p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_i4p~~UsedByGraph module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_I4P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I4P_Set procedure, public :: Get => DimensionsWrapper2D_I4P_Get procedure, public :: GetShape => DimensionsWrapper2D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I4P_DataSizeInBytes procedure, public :: toString => DimensionsWrapper2D_I4P_toString procedure, public :: isOfDataType => DimensionsWrapper2D_I4P_isOfDataType procedure, public :: Free => DimensionsWrapper2D_I4P_Free procedure, public :: Print => DimensionsWrapper2D_I4P_Print","tags":"","loc":"module/dimensionswrapper2d_i4p.html","title":"DimensionsWrapper2D_I4P â FPL"},{"text":"Uses: DimensionsWrapper2D FPL_Utils PENF ErrorMessages module~~dimensionswrapper2d_l~~UsesGraph module~dimensionswrapper2d_l DimensionsWrapper2D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper2d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper2d_l module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_l PENF PENF PENF->module~dimensionswrapper2d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper2d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_l~~UsedByGraph module~dimensionswrapper2d_l DimensionsWrapper2D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper2d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_L_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_L_Set procedure, public :: Get => DimensionsWrapper2D_L_Get procedure, public :: GetShape => DimensionsWrapper2D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_L_isOfDataType procedure, public :: toString => DimensionsWrapper2D_L_toString procedure, public :: Free => DimensionsWrapper2D_L_Free procedure, public :: Print => DimensionsWrapper2D_L_Print","tags":"","loc":"module/dimensionswrapper2d_l.html","title":"DimensionsWrapper2D_L â FPL"},{"text":"Uses: DimensionsWrapper2D PENF ErrorMessages module~~dimensionswrapper2d_i2p~~UsesGraph module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF PENF PENF->module~dimensionswrapper2d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper2d_i2p module~dimensionswrapper->module~dimensionswrapper2d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper2d_i2p~~UsedByGraph module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper2d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper2d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper2D_I2P_t Derived Types type, public, extends(DimensionsWrapper2D_t) :: DimensionsWrapper2D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:) Finalizations Procedures final :: DimensionsWrapper2D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper2D_I2P_Set procedure, public :: Get => DimensionsWrapper2D_I2P_Get procedure, public :: GetShape => DimensionsWrapper2D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper2D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper2D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper2D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper2D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper2D_I2P_toString procedure, public :: Free => DimensionsWrapper2D_I2P_Free procedure, public :: Print => DimensionsWrapper2D_I2P_Print","tags":"","loc":"module/dimensionswrapper2d_i2p.html","title":"DimensionsWrapper2D_I2P â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_r8p~~UsesGraph module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF PENF PENF->module~dimensionswrapper5d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_r8p~~UsedByGraph module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_R8P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_R8P_Set procedure, public :: Get => DimensionsWrapper5D_R8P_Get procedure, public :: GetShape => DimensionsWrapper5D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_R8P_toString procedure, public :: Print => DimensionsWrapper5D_R8P_Print procedure, public :: Free => DimensionsWrapper5D_R8P_Free","tags":"","loc":"module/dimensionswrapper5d_r8p.html","title":"DimensionsWrapper5D_R8P â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_dlca~~UsesGraph module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF PENF PENF->module~dimensionswrapper5d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_dlca~~UsedByGraph module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_DLCA_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_DLCA_Set procedure, public :: Get => DimensionsWrapper5D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper5D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper5D_DLCA_toString procedure, public :: Print => DimensionsWrapper5D_DLCA_Print procedure, public :: Free => DimensionsWrapper5D_DLCA_Free","tags":"","loc":"module/dimensionswrapper5d_dlca.html","title":"DimensionsWrapper5D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_i2p~~UsesGraph module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF PENF PENF->module~dimensionswrapper5d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_i2p~~UsedByGraph module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_I2P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I2P_Set procedure, public :: Get => DimensionsWrapper5D_I2P_Get procedure, public :: GetShape => DimensionsWrapper5D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_I2P_toString procedure, public :: Print => DimensionsWrapper5D_I2P_Print procedure, public :: Free => DimensionsWrapper5D_I2P_Free","tags":"","loc":"module/dimensionswrapper5d_i2p.html","title":"DimensionsWrapper5D_I2P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper5d~~UsesGraph module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper5d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d~~UsedByGraph module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L module~dimensionswrapper5d->module~dimensionswrapper5d_l module~parameterlist ParameterList module~dimensionswrapper5d->module~parameterlist module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper5d_l->module~lwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper5dUsedByGraph = svgPanZoom('#moduledimensionswrapper5dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper5D_t Type-Bound Procedures procedure(DimensionsWrapper5D_Set), public :: Set procedure(DimensionsWrapper5D_Get), public :: Get procedure(DimensionsWrapper5D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper5d.html","title":"DimensionsWrapper5D â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_r4p~~UsesGraph module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF PENF PENF->module~dimensionswrapper5d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_r4p~~UsedByGraph module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_R4P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_R4P_Set procedure, public :: Get => DimensionsWrapper5D_R4P_Get procedure, public :: GetShape => DimensionsWrapper5D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_R4P_toString procedure, public :: Print => DimensionsWrapper5D_R4P_Print procedure, public :: Free => DimensionsWrapper5D_R4P_Free","tags":"","loc":"module/dimensionswrapper5d_r4p.html","title":"DimensionsWrapper5D_R4P â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_i1p~~UsesGraph module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF PENF PENF->module~dimensionswrapper5d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_i1p~~UsedByGraph module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_I1P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I1P_Set procedure, public :: Get => DimensionsWrapper5D_I1P_Get procedure, public :: GetShape => DimensionsWrapper5D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_I1P_toString procedure, public :: Print => DimensionsWrapper5D_I1P_Print procedure, public :: Free => DimensionsWrapper5D_I1P_Free","tags":"","loc":"module/dimensionswrapper5d_i1p.html","title":"DimensionsWrapper5D_I1P â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_i4p~~UsesGraph module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF PENF PENF->module~dimensionswrapper5d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_i4p~~UsedByGraph module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_I4P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I4P_Set procedure, public :: Get => DimensionsWrapper5D_I4P_Get procedure, public :: GetShape => DimensionsWrapper5D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_I4P_toString procedure, public :: Print => DimensionsWrapper5D_I4P_Print procedure, public :: Free => DimensionsWrapper5D_I4P_Free","tags":"","loc":"module/dimensionswrapper5d_i4p.html","title":"DimensionsWrapper5D_I4P â FPL"},{"text":"Uses: DimensionsWrapper5D FPL_Utils PENF ErrorMessages module~~dimensionswrapper5d_l~~UsesGraph module~dimensionswrapper5d_l DimensionsWrapper5D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper5d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper5d_l module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_l PENF PENF PENF->module~dimensionswrapper5d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper5d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_l~~UsedByGraph module~dimensionswrapper5d_l DimensionsWrapper5D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper5d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_L_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_L_Set procedure, public :: Get => DimensionsWrapper5D_L_Get procedure, public :: GetShape => DimensionsWrapper5D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_L_isOfDataType procedure, public :: toString => DimensionsWrapper5D_L_toString procedure, public :: Print => DimensionsWrapper5D_L_Print procedure, public :: Free => DimensionsWrapper5D_L_Free","tags":"","loc":"module/dimensionswrapper5d_l.html","title":"DimensionsWrapper5D_L â FPL"},{"text":"Uses: DimensionsWrapper5D PENF ErrorMessages module~~dimensionswrapper5d_i8p~~UsesGraph module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF PENF PENF->module~dimensionswrapper5d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper5d_i8p module~dimensionswrapper->module~dimensionswrapper5d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper5d_i8p~~UsedByGraph module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper5d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper5d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper5D_I8P_t Derived Types type, public, extends(DimensionsWrapper5D_t) :: DimensionsWrapper5D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper5D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper5D_I8P_Set procedure, public :: Get => DimensionsWrapper5D_I8P_Get procedure, public :: GetShape => DimensionsWrapper5D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper5D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper5D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper5D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper5D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper5D_I8P_toString procedure, public :: Print => DimensionsWrapper5D_I8P_Print procedure, public :: Free => DimensionsWrapper5D_I8P_Free","tags":"","loc":"module/dimensionswrapper5d_i8p.html","title":"DimensionsWrapper5D_I8P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper7d~~UsesGraph module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper7d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d~~UsedByGraph module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d_l DimensionsWrapper7D_L module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~parameterlist ParameterList module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper7d_l->module~lwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~fpl FPL module~parameterlist->module~fpl module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper7dUsedByGraph = svgPanZoom('#moduledimensionswrapper7dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper7D_t Type-Bound Procedures procedure(DimensionsWrapper7D_Set), public :: Set procedure(DimensionsWrapper7D_Get), public :: Get procedure(DimensionsWrapper7D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper7d.html","title":"DimensionsWrapper7D â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_dlca~~UsesGraph module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF PENF PENF->module~dimensionswrapper7d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_dlca~~UsedByGraph module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_DLCA_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_DLCA_Set procedure, public :: Get => DimensionsWrapper7D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper7D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper7D_DLCA_toString procedure, public :: Print => DimensionsWrapper7D_DLCA_Print procedure, public :: Free => DimensionsWrapper7D_DLCA_Free","tags":"","loc":"module/dimensionswrapper7d_dlca.html","title":"DimensionsWrapper7D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper7D FPL_Utils PENF ErrorMessages module~~dimensionswrapper7d_l~~UsesGraph module~dimensionswrapper7d_l DimensionsWrapper7D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper7d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper7d_l module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_l PENF PENF PENF->module~dimensionswrapper7d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper7d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_l~~UsedByGraph module~dimensionswrapper7d_l DimensionsWrapper7D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper7d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_L_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_L_Set procedure, public :: Get => DimensionsWrapper7D_L_Get procedure, public :: GetShape => DimensionsWrapper7D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_L_isOfDataType procedure, public :: toString => DimensionsWrapper7D_L_toString procedure, public :: Print => DimensionsWrapper7D_L_Print procedure, public :: Free => DimensionsWrapper7D_L_Free","tags":"","loc":"module/dimensionswrapper7d_l.html","title":"DimensionsWrapper7D_L â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_i8p~~UsesGraph module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF PENF PENF->module~dimensionswrapper7d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_i8p~~UsedByGraph module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_I8P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I8P_Set procedure, public :: Get => DimensionsWrapper7D_I8P_Get procedure, public :: GetShape => DimensionsWrapper7D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_I8P_toString procedure, public :: Print => DimensionsWrapper7D_I8P_Print procedure, public :: Free => DimensionsWrapper7D_I8P_Free","tags":"","loc":"module/dimensionswrapper7d_i8p.html","title":"DimensionsWrapper7D_I8P â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_i2p~~UsesGraph module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF PENF PENF->module~dimensionswrapper7d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_i2p~~UsedByGraph module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_I2P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I2P_Set procedure, public :: Get => DimensionsWrapper7D_I2P_Get procedure, public :: GetShape => DimensionsWrapper7D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_i2p_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_I2P_toString procedure, public :: Print => DimensionsWrapper7D_I2P_Print procedure, public :: Free => DimensionsWrapper7D_I2P_Free","tags":"","loc":"module/dimensionswrapper7d_i2p.html","title":"DimensionsWrapper7D_I2P â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_r8p~~UsesGraph module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF PENF PENF->module~dimensionswrapper7d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_r8p~~UsedByGraph module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_R8P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_R8P_Set procedure, public :: Get => DimensionsWrapper7D_R8P_Get procedure, public :: GetShape => DimensionsWrapper7D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_R8P_toString procedure, public :: Print => DimensionsWrapper7D_R8P_Print procedure, public :: Free => DimensionsWrapper7D_R8P_Free","tags":"","loc":"module/dimensionswrapper7d_r8p.html","title":"DimensionsWrapper7D_R8P â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_i4p~~UsesGraph module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF PENF PENF->module~dimensionswrapper7d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_i4p~~UsedByGraph module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_I4P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I4P_Set procedure, public :: Get => DimensionsWrapper7D_I4P_Get procedure, public :: GetShape => DimensionsWrapper7D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_I4P_toString procedure, public :: Print => DimensionsWrapper7D_I4P_Print procedure, public :: Free => DimensionsWrapper7D_I4P_Free","tags":"","loc":"module/dimensionswrapper7d_i4p.html","title":"DimensionsWrapper7D_I4P â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_r4p~~UsesGraph module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF PENF PENF->module~dimensionswrapper7d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper7d_r4p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_r4p~~UsedByGraph module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_R4P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_R4P_Set procedure, public :: Get => DimensionsWrapper7D_R4P_Get procedure, public :: GetShape => DimensionsWrapper7D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_R4P_toString procedure, public :: Print => DimensionsWrapper7D_R4P_Print procedure, public :: Free => DimensionsWrapper7D_R4P_Free","tags":"","loc":"module/dimensionswrapper7d_r4p.html","title":"DimensionsWrapper7D_R4P â FPL"},{"text":"Uses: DimensionsWrapper7D PENF ErrorMessages module~~dimensionswrapper7d_i1p~~UsesGraph module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF PENF PENF->module~dimensionswrapper7d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~dimensionswrapper->module~dimensionswrapper7d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper7d_i1p~~UsedByGraph module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper7d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper7d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper7D_I1P_t Derived Types type, public, extends(DimensionsWrapper7D_t) :: DimensionsWrapper7D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper7D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper7D_I1P_Set procedure, public :: Get => DimensionsWrapper7D_I1P_Get procedure, public :: GetShape => DimensionsWrapper7D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper7D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper7D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper7D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper7D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper7D_I1P_toString procedure, public :: Print => DimensionsWrapper7D_I1P_Print procedure, public :: Free => DimensionsWrapper7D_I1P_Free","tags":"","loc":"module/dimensionswrapper7d_i1p.html","title":"DimensionsWrapper7D_I1P â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_i8p~~UsesGraph module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_i8p PENF PENF PENF->module~dimensionswrapper0d_i8p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_i8p~~UsedByGraph module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_I8P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I8P_Set procedure, public :: Get => DimensionsWrapper0D_I8P_Get procedure, public :: GetShape => DimensionsWrapper0D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_I8P_toString procedure, public :: Free => DimensionsWrapper0D_I8P_Free procedure, public :: Print => DimensionsWrapper0D_I8P_Print","tags":"","loc":"module/dimensionswrapper0d_i8p.html","title":"DimensionsWrapper0D_I8P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper0d~~UsesGraph module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper0d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d~~UsedByGraph module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~circlewrapper CircleWrapper module~dimensionswrapper0d->module~circlewrapper module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~parameterlist ParameterList module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d_l DimensionsWrapper0D_L module~dimensionswrapper0d->module~dimensionswrapper0d_l module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~circlewrapperfactory CircleWrapperFactory module~circlewrapper->module~circlewrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~lwrapperfactory LWrapperFactory module~dimensionswrapper0d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~circlewrapperfactory->program~main module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper0dUsedByGraph = svgPanZoom('#moduledimensionswrapper0dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper0D_t Type-Bound Procedures procedure(DimensionsWrapper0D_Set), public :: Set procedure(DimensionsWrapper0D_Get), public :: Get procedure(DimensionsWrapper0D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper0d.html","title":"DimensionsWrapper0D â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_r8p~~UsesGraph module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_r8p PENF PENF PENF->module~dimensionswrapper0d_r8p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_r8p~~UsedByGraph module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_R8P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_R8P_Set procedure, public :: Get => DimensionsWrapper0D_R8P_Get procedure, public :: GetShape => DimensionsWrapper0D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_R8P_toString procedure, public :: Free => DimensionsWrapper0D_R8P_Free procedure, public :: Print => DimensionsWrapper0D_R8P_Print","tags":"","loc":"module/dimensionswrapper0d_r8p.html","title":"DimensionsWrapper0D_R8P â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_dlca~~UsesGraph module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_dlca PENF PENF PENF->module~dimensionswrapper0d_dlca PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_dlca~~UsedByGraph module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_DLCA_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_DLCA_Set procedure, public :: Get => DimensionsWrapper0D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper0D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper0D_DLCA_toString procedure, public :: Free => DimensionsWrapper0D_DLCA_Free procedure, public :: Print => DimensionsWrapper0D_DLCA_Print","tags":"","loc":"module/dimensionswrapper0d_dlca.html","title":"DimensionsWrapper0D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper0D FPL_Utils PENF ErrorMessages module~~dimensionswrapper0d_l~~UsesGraph module~dimensionswrapper0d_l DimensionsWrapper0D_L module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_l PENF PENF PENF->module~dimensionswrapper0d_l module~errormessages ErrorMessages PENF->module~errormessages module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~errormessages->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper0d_l module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_l~~UsedByGraph module~dimensionswrapper0d_l DimensionsWrapper0D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper0d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_L_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_L_Set procedure, public :: Get => DimensionsWrapper0D_L_Get procedure, public :: GetShape => DimensionsWrapper0D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_L_isOfDataType procedure, public :: toString => DimensionsWrapper0D_L_toString procedure, public :: Free => DimensionsWrapper0D_L_Free procedure, public :: Print => DimensionsWrapper0D_L_Print","tags":"","loc":"module/dimensionswrapper0d_l.html","title":"DimensionsWrapper0D_L â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_r4p~~UsesGraph module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_r4p PENF PENF PENF->module~dimensionswrapper0d_r4p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_r4p~~UsedByGraph module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_R4P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_R4P_Set procedure, public :: Get => DimensionsWrapper0D_R4P_Get procedure, public :: GetShape => DimensionsWrapper0D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_r4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_R4P_toString procedure, public :: Print => DimensionsWrapper0D_R4P_Print procedure, public :: Free => DimensionsWrapper0D_R4P_Free","tags":"","loc":"module/dimensionswrapper0d_r4p.html","title":"DimensionsWrapper0D_R4P â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_i4p~~UsesGraph module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_i4p PENF PENF PENF->module~dimensionswrapper0d_i4p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_i4p~~UsedByGraph module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_I4P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I4P_Set procedure, public :: Get => DimensionsWrapper0D_I4P_Get procedure, public :: GetShape => DimensionsWrapper0D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_I4P_toString procedure, public :: Free => DimensionsWrapper0D_I4P_Free procedure, public :: Print => DimensionsWrapper0D_I4P_Print","tags":"","loc":"module/dimensionswrapper0d_i4p.html","title":"DimensionsWrapper0D_I4P â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_i2p~~UsesGraph module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_i2p PENF PENF PENF->module~dimensionswrapper0d_i2p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_i2p~~UsedByGraph module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_I2P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I2P_Set procedure, public :: Get => DimensionsWrapper0D_I2P_Get procedure, public :: GetShape => DimensionsWrapper0D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_I2P_toString procedure, public :: Free => DimensionsWrapper0D_I2P_Free procedure, public :: Print => DimensionsWrapper0D_I2P_Print","tags":"","loc":"module/dimensionswrapper0d_i2p.html","title":"DimensionsWrapper0D_I2P â FPL"},{"text":"Uses: DimensionsWrapper0D PENF ErrorMessages module~~dimensionswrapper0d_i1p~~UsesGraph module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper0d_i1p PENF PENF PENF->module~dimensionswrapper0d_i1p PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper0d_i1p~~UsedByGraph module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper0d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper0d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper0D_I1P_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: DimensionsWrapper0D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value Finalizations Procedures final :: DimensionsWrapper0D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper0D_I1P_Set procedure, public :: Get => DimensionsWrapper0D_I1P_Get procedure, public :: GetShape => DimensionsWrapper0D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper0D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper0D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper0D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper0D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper0D_I1P_toString procedure, public :: Free => DimensionsWrapper0D_I1P_Free procedure, public :: Print => DimensionsWrapper0D_I1P_Print","tags":"","loc":"module/dimensionswrapper0d_i1p.html","title":"DimensionsWrapper0D_I1P â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_i2p~~UsesGraph module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF PENF PENF->module~dimensionswrapper4d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_i2p~~UsedByGraph module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_I2P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I2P_Set procedure, public :: Get => DimensionsWrapper4D_I2P_Get procedure, public :: GetShape => DimensionsWrapper4D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_I2P_toString procedure, public :: Print => DimensionsWrapper4D_I2P_Print procedure, public :: Free => DimensionsWrapper4D_I2P_Free","tags":"","loc":"module/dimensionswrapper4d_i2p.html","title":"DimensionsWrapper4D_I2P â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_r4p~~UsesGraph module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF PENF PENF->module~dimensionswrapper4d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_r4p~~UsedByGraph module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_R4P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_R4P_Set procedure, public :: Get => DimensionsWrapper4D_R4P_Get procedure, public :: GetShape => DimensionsWrapper4D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_R4P_toString procedure, public :: Free => DimensionsWrapper4D_R4P_Free procedure, public :: Print => DimensionsWrapper4D_R4P_Print","tags":"","loc":"module/dimensionswrapper4d_r4p.html","title":"DimensionsWrapper4D_R4P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper4d~~UsesGraph module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper4d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d~~UsedByGraph module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d_l DimensionsWrapper4D_L module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~parameterlist ParameterList module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper4d_l->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~fpl FPL module~parameterlist->module~fpl module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper4dUsedByGraph = svgPanZoom('#moduledimensionswrapper4dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper4D_t Type-Bound Procedures procedure(DimensionsWrapper4D_Set), public :: Set procedure(DimensionsWrapper4D_Get), public :: Get procedure(DimensionsWrapper4D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper4d.html","title":"DimensionsWrapper4D â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_i1p~~UsesGraph module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF PENF PENF->module~dimensionswrapper4d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_i1p~~UsedByGraph module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_I1P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I1P_Set procedure, public :: Get => DimensionsWrapper4D_I1P_Get procedure, public :: GetShape => DimensionsWrapper4D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_I1P_toString procedure, public :: Print => DimensionsWrapper4D_I1P_Print procedure, public :: Free => DimensionsWrapper4D_I1P_Free","tags":"","loc":"module/dimensionswrapper4d_i1p.html","title":"DimensionsWrapper4D_I1P â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_r8p~~UsesGraph module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF PENF PENF->module~dimensionswrapper4d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_r8p~~UsedByGraph module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_R8P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_R8P_Set procedure, public :: Get => DimensionsWrapper4D_R8P_Get procedure, public :: GetShape => DimensionsWrapper4D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_R8P_toString procedure, public :: Free => DimensionsWrapper4D_R8P_Free procedure, public :: Print => DimensionsWrapper4D_R8P_Print","tags":"","loc":"module/dimensionswrapper4d_r8p.html","title":"DimensionsWrapper4D_R8P â FPL"},{"text":"Uses: DimensionsWrapper4D FPL_Utils PENF ErrorMessages module~~dimensionswrapper4d_l~~UsesGraph module~dimensionswrapper4d_l DimensionsWrapper4D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper4d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper4d_l module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_l PENF PENF PENF->module~dimensionswrapper4d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper4d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_l~~UsedByGraph module~dimensionswrapper4d_l DimensionsWrapper4D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper4d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_L_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_L_Set procedure, public :: Get => DimensionsWrapper4D_L_Get procedure, public :: GetShape => DimensionsWrapper4D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_L_isOfDataType procedure, public :: toString => DimensionsWrapper4D_L_toString procedure, public :: Print => DimensionsWrapper4D_L_Print procedure, public :: Free => DimensionsWrapper4D_L_Free","tags":"","loc":"module/dimensionswrapper4d_l.html","title":"DimensionsWrapper4D_L â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_dlca~~UsesGraph module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF PENF PENF->module~dimensionswrapper4d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_dlca~~UsedByGraph module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_DLCA_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_DLCA_Set procedure, public :: Get => DimensionsWrapper4D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper4D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper4D_DLCA_toString procedure, public :: Print => DimensionsWrapper4D_DLCA_Print procedure, public :: Free => DimensionsWrapper4D_DLCA_Free","tags":"","loc":"module/dimensionswrapper4d_dlca.html","title":"DimensionsWrapper4D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_i8p~~UsesGraph module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF PENF PENF->module~dimensionswrapper4d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_i8p~~UsedByGraph module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_I8P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I8P_Set procedure, public :: Get => DimensionsWrapper4D_I8P_Get procedure, public :: GetShape => DimensionsWrapper4D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_I8P_toString procedure, public :: Print => DimensionsWrapper4D_I8P_Print procedure, public :: Free => DimensionsWrapper4D_I8P_Free","tags":"","loc":"module/dimensionswrapper4d_i8p.html","title":"DimensionsWrapper4D_I8P â FPL"},{"text":"Uses: DimensionsWrapper4D PENF ErrorMessages module~~dimensionswrapper4d_i4p~~UsesGraph module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF PENF PENF->module~dimensionswrapper4d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~dimensionswrapper->module~dimensionswrapper4d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper4d_i4p~~UsedByGraph module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper4d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper4d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper4D_I4P_t Derived Types type, public, extends(DimensionsWrapper4D_t) :: DimensionsWrapper4D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:) Finalizations Procedures final :: DimensionsWrapper4D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper4D_I4P_Set procedure, public :: Get => DimensionsWrapper4D_I4P_Get procedure, public :: GetShape => DimensionsWrapper4D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper4D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper4D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper4D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper4D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper4D_I4P_toString procedure, public :: Print => DimensionsWrapper4D_I4P_Print procedure, public :: Free => DimensionsWrapper4D_I4P_Free","tags":"","loc":"module/dimensionswrapper4d_i4p.html","title":"DimensionsWrapper4D_I4P â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_i4p~~UsesGraph module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF PENF PENF->module~dimensionswrapper6d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_i4p~~UsedByGraph module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_I4P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I4P_Set procedure, public :: Get => DimensionsWrapper6D_I4P_Get procedure, public :: GetShape => DimensionsWrapper6D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_I4P_toString procedure, public :: Print => DimensionsWrapper6D_I4P_Print procedure, public :: Free => DimensionsWrapper6D_I4P_Free","tags":"","loc":"module/dimensionswrapper6d_i4p.html","title":"DimensionsWrapper6D_I4P â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_r4p~~UsesGraph module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF PENF PENF->module~dimensionswrapper6d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_r4p~~UsedByGraph module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_R4P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_R4P_Set procedure, public :: Get => DimensionsWrapper6D_R4P_Get procedure, public :: GetShape => DimensionsWrapper6D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_R4P_toString procedure, public :: Print => DimensionsWrapper6D_R4P_Print procedure, public :: Free => DimensionsWrapper6D_R4P_Free","tags":"","loc":"module/dimensionswrapper6d_r4p.html","title":"DimensionsWrapper6D_R4P â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_i1p~~UsesGraph module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF PENF PENF->module~dimensionswrapper6d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_i1p~~UsedByGraph module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_I1P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I1P_Set procedure, public :: Get => DimensionsWrapper6D_I1P_Get procedure, public :: GetShape => DimensionsWrapper6D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_I1P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_I1P_toString procedure, public :: Print => DimensionsWrapper6D_I1P_Print procedure, public :: Free => DimensionsWrapper6D_I1P_Free","tags":"","loc":"module/dimensionswrapper6d_i1p.html","title":"DimensionsWrapper6D_I1P â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_i2p~~UsesGraph module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF PENF PENF->module~dimensionswrapper6d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_i2p~~UsedByGraph module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_I2P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I2P_Set procedure, public :: Get => DimensionsWrapper6D_I2P_Get procedure, public :: GetShape => DimensionsWrapper6D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_I2P_toString procedure, public :: Print => DimensionsWrapper6D_I2P_Print procedure, public :: Free => DimensionsWrapper6D_I2P_Free","tags":"","loc":"module/dimensionswrapper6d_i2p.html","title":"DimensionsWrapper6D_I2P â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper6d~~UsesGraph module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper6d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d~~UsedByGraph module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper6d_l DimensionsWrapper6D_L module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~parameterlist ParameterList module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper6d_l->module~lwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~lwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper6dUsedByGraph = svgPanZoom('#moduledimensionswrapper6dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper6D_t Type-Bound Procedures procedure(DimensionsWrapper6D_Set), public :: Set procedure(DimensionsWrapper6D_Get), public :: Get procedure(DimensionsWrapper6D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper6d.html","title":"DimensionsWrapper6D â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_r8p~~UsesGraph module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF PENF PENF->module~dimensionswrapper6d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_r8p~~UsedByGraph module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_R8P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_R8P_Set procedure, public :: Get => DimensionsWrapper6D_R8P_Get procedure, public :: GetShape => DimensionsWrapper6D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_R8P_toString procedure, public :: Print => DimensionsWrapper6D_R8P_Print procedure, public :: Free => DimensionsWrapper6D_R8P_Free","tags":"","loc":"module/dimensionswrapper6d_r8p.html","title":"DimensionsWrapper6D_R8P â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_dlca~~UsesGraph module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF PENF PENF->module~dimensionswrapper6d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_dlca~~UsedByGraph module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_DLCA_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_DLCA_Set procedure, public :: Get => DimensionsWrapper6D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper6D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper6D_DLCA_toString procedure, public :: Print => DimensionsWrapper6D_DLCA_Print procedure, public :: Free => DimensionsWrapper6D_DLCA_Free","tags":"","loc":"module/dimensionswrapper6d_dlca.html","title":"DimensionsWrapper6D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper6D FPL_Utils PENF ErrorMessages module~~dimensionswrapper6d_l~~UsesGraph module~dimensionswrapper6d_l DimensionsWrapper6D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper6d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper6d_l module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_l PENF PENF PENF->module~dimensionswrapper6d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper6d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_l~~UsedByGraph module~dimensionswrapper6d_l DimensionsWrapper6D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper6d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_L_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_L_Set procedure, public :: Get => DimensionsWrapper6D_L_Get procedure, public :: GetShape => DimensionsWrapper6D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_L_isOfDataType procedure, public :: toString => DimensionsWrapper6D_L_toString procedure, public :: Print => DimensionsWrapper6D_L_Print procedure, public :: Free => DimensionsWrapper6D_L_Free","tags":"","loc":"module/dimensionswrapper6d_l.html","title":"DimensionsWrapper6D_L â FPL"},{"text":"Uses: DimensionsWrapper6D PENF ErrorMessages module~~dimensionswrapper6d_i8p~~UsesGraph module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF PENF PENF->module~dimensionswrapper6d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~dimensionswrapper->module~dimensionswrapper6d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper6d_i8p~~UsedByGraph module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper6d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper6d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper6D_I8P_t Derived Types type, public, extends(DimensionsWrapper6D_t) :: DimensionsWrapper6D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:,:,:,:) Finalizations Procedures final :: DimensionsWrapper6D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper6D_I8P_Set procedure, public :: Get => DimensionsWrapper6D_I8P_Get procedure, public :: GetShape => DimensionsWrapper6D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper6D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper6D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper6D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper6D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper6D_I8P_toString procedure, public :: Print => DimensionsWrapper6D_I8P_Print procedure, public :: Free => DimensionsWrapper6D_I8P_Free","tags":"","loc":"module/dimensionswrapper6d_i8p.html","title":"DimensionsWrapper6D_I8P â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_r8p~~UsesGraph module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF PENF PENF->module~dimensionswrapper3d_r8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_r8p~~UsedByGraph module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_r8pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_r8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_R8P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_R8P_t Components Type Visibility Attributes Name Initial real(kind=R8P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_R8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_R8P_Set procedure, public :: Get => DimensionsWrapper3D_R8P_Get procedure, public :: GetShape => DimensionsWrapper3D_R8P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_R8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_R8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_R8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_R8P_isOfDataType procedure, public :: toString => DimensionsWrapper3D_R8P_toString procedure, public :: Free => DimensionsWrapper3D_R8P_Free procedure, public :: Print => DimensionsWrapper3D_R8P_Print","tags":"","loc":"module/dimensionswrapper3d_r8p.html","title":"DimensionsWrapper3D_R8P â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_dlca~~UsesGraph module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF PENF PENF->module~dimensionswrapper3d_dlca module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper3d_dlca module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_dlca~~UsedByGraph module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_dlcaUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_dlcaUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_DLCA_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_DLCA_t Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_DLCA_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_DLCA_Set procedure, public :: Get => DimensionsWrapper3D_DLCA_Get procedure, public :: GetShape => DimensionsWrapper3D_DLCA_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_DLCA_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_DLCA_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_DLCA_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_DLCA_isOfDataType procedure, public :: toString => DimensionsWrapper3D_DLCA_toString procedure, public :: Free => DimensionsWrapper3D_DLCA_Free procedure, public :: Print => DimensionsWrapper3D_DLCA_Print","tags":"","loc":"module/dimensionswrapper3d_dlca.html","title":"DimensionsWrapper3D_DLCA â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_i8p~~UsesGraph module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF PENF PENF->module~dimensionswrapper3d_i8p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_i8p~~UsedByGraph module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i8pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_i8pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_i8pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_I8P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I8P_t Components Type Visibility Attributes Name Initial integer(kind=I8P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_I8P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I8P_Set procedure, public :: Get => DimensionsWrapper3D_I8P_Get procedure, public :: GetShape => DimensionsWrapper3D_I8P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_I8P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_I8P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I8P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_I8P_isOfDataType procedure, public :: toString => DimensionsWrapper3D_I8P_toString procedure, public :: Free => DimensionsWrapper3D_I8P_Free procedure, public :: Print => DimensionsWrapper3D_I8P_Print","tags":"","loc":"module/dimensionswrapper3d_i8p.html","title":"DimensionsWrapper3D_I8P â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_r4p~~UsesGraph module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF PENF PENF->module~dimensionswrapper3d_r4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_r4p~~UsedByGraph module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_r4pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_r4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_R4P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_R4P_t Components Type Visibility Attributes Name Initial real(kind=R4P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_R4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_R4P_Set procedure, public :: Get => DimensionsWrapper3D_R4P_Get procedure, public :: GetShape => DimensionsWrapper3D_R4P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_R4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_R4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_R4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_R4P_isOfDataType procedure, public :: toString => DimensionsWrapper3D_R4P_toString procedure, public :: Free => DimensionsWrapper3D_R4P_Free procedure, public :: Print => DimensionsWrapper3D_R4P_Print","tags":"","loc":"module/dimensionswrapper3d_r4p.html","title":"DimensionsWrapper3D_R4P â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_i2p~~UsesGraph module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF PENF PENF->module~dimensionswrapper3d_i2p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_i2p~~UsedByGraph module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_i2pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_i2pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_I2P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I2P_t Components Type Visibility Attributes Name Initial integer(kind=I2P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_I2P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I2P_Set procedure, public :: Get => DimensionsWrapper3D_I2P_Get procedure, public :: GetShape => DimensionsWrapper3D_I2P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_I2P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_I2P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I2P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_I2P_isOfDataType procedure, public :: toString => DimensionsWrapper3D_I2P_toString procedure, public :: Free => DimensionsWrapper3D_I2P_Free procedure, public :: Print => DimensionsWrapper3D_I2P_Print","tags":"","loc":"module/dimensionswrapper3d_i2p.html","title":"DimensionsWrapper3D_I2P â FPL"},{"text":"Uses: DimensionsWrapper3D FPL_Utils PENF ErrorMessages module~~dimensionswrapper3d_l~~UsesGraph module~dimensionswrapper3d_l DimensionsWrapper3D_L module~fpl_utils FPL_Utils module~fpl_utils->module~dimensionswrapper3d_l module~errormessages ErrorMessages module~errormessages->module~dimensionswrapper3d_l module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_l PENF PENF PENF->module~dimensionswrapper3d_l PENF->module~fpl_utils PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages module~dimensionswrapper->module~dimensionswrapper3d Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_l~~UsedByGraph module~dimensionswrapper3d_l DimensionsWrapper3D_L module~lwrapperfactory LWrapperFactory module~dimensionswrapper3d_l->module~lwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~lwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_lUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_lUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_L_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_L_t Components Type Visibility Attributes Name Initial logical, public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_L_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_L_Set procedure, public :: Get => DimensionsWrapper3D_L_Get procedure, public :: GetShape => DimensionsWrapper3D_L_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_L_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_L_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_L_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_L_isOfDataType procedure, public :: toString => DimensionsWrapper3D_L_toString procedure, public :: Free => DimensionsWrapper3D_L_Free procedure, public :: Print => DimensionsWrapper3D_L_Print","tags":"","loc":"module/dimensionswrapper3d_l.html","title":"DimensionsWrapper3D_L â FPL"},{"text":"Uses: DimensionsWrapper module~~dimensionswrapper3d~~UsesGraph module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->module~dimensionswrapper3d PENF PENF PENF->module~dimensionswrapper Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d~~UsedByGraph module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d_l DimensionsWrapper3D_L module~dimensionswrapper3d->module~dimensionswrapper3d_l module~parameterlist ParameterList module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper3d_l->module~lwrapperfactory module~fpl FPL module~parameterlist->module~fpl module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton var panmoduledimensionswrapper3dUsedByGraph = svgPanZoom('#moduledimensionswrapper3dUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_t Derived Types type, public, abstract, extends(DimensionsWrapper_t) :: DimensionsWrapper3D_t Type-Bound Procedures procedure(DimensionsWrapper3D_Set), public :: Set procedure(DimensionsWrapper3D_Get), public :: Get procedure(DimensionsWrapper3D_GetPointer), public :: GetPointer","tags":"","loc":"module/dimensionswrapper3d.html","title":"DimensionsWrapper3D â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_i4p~~UsesGraph module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF PENF PENF->module~dimensionswrapper3d_i4p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_i4p~~UsedByGraph module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_i4pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_i4pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_I4P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I4P_t Components Type Visibility Attributes Name Initial integer(kind=I4P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_I4P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I4P_Set procedure, public :: Get => DimensionsWrapper3D_I4P_Get procedure, public :: GetShape => DimensionsWrapper3D_I4P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_I4P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_I4P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I4P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_I4P_isOfDataType procedure, public :: toString => DimensionsWrapper3D_I4P_toString procedure, public :: Free => DimensionsWrapper3D_I4P_Free procedure, public :: Print => DimensionsWrapper3D_I4P_Print","tags":"","loc":"module/dimensionswrapper3d_i4p.html","title":"DimensionsWrapper3D_I4P â FPL"},{"text":"Uses: DimensionsWrapper3D PENF ErrorMessages module~~dimensionswrapper3d_i1p~~UsesGraph module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF PENF PENF->module~dimensionswrapper3d_i1p module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~dimensionswrapper3d_i1p~~UsedByGraph module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~parameterlist ParameterList module~wrapperfactorylistsingleton->module~parameterlist program~wrapperfactorylist_test WrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_test program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~fpl FPL module~wrapperfactorylistsingleton->module~fpl program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~parameterlist->module~fpl program~fortranparameterlist_example FortranParameterList_Example module~fpl->program~fortranparameterlist_example program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~7 program~main main module~fpl->program~main program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~3 program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~10 program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~6 program~parameterlistentrycontainer_test ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~2 program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~8 program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~4 program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~5 program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test module~fpl->program~parameterlistentrycontainer_test~9 var panmoduledimensionswrapper3d_i1pUsedByGraph = svgPanZoom('#moduledimensionswrapper3d_i1pUsedByGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types DimensionsWrapper3D_I1P_t Derived Types type, public, extends(DimensionsWrapper3D_t) :: DimensionsWrapper3D_I1P_t Components Type Visibility Attributes Name Initial integer(kind=I1P), public, allocatable :: Value (:,:,:) Finalizations Procedures final :: DimensionsWrapper3D_I1P_Final Type-Bound Procedures procedure, public :: Set => DimensionsWrapper3D_I1P_Set procedure, public :: Get => DimensionsWrapper3D_I1P_Get procedure, public :: GetShape => DimensionsWrapper3D_I1P_GetShape procedure, public :: GetPointer => DimensionsWrapper3D_I1P_GetPointer procedure, public :: GetPolymorphic => DimensionsWrapper3D_I1P_GetPolymorphic procedure, public :: DataSizeInBytes => DimensionsWrapper3D_I1P_DataSizeInBytes procedure, public :: isOfDataType => DimensionsWrapper3D_I1P_isOfDataType procedure, public :: Free => DimensionsWrapper3D_I1P_Free procedure, public :: toString => DimensionsWrapper3D_I1P_toString procedure, public :: Print => DimensionsWrapper3D_I1P_Print","tags":"","loc":"module/dimensionswrapper3d_i1p.html","title":"DimensionsWrapper3D_I1P â FPL"},{"text":"Uses: Circle DimensionsWrapper0D ErrorMessages PENF module~~circlewrapper~~UsesGraph module~circlewrapper CircleWrapper module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper0d->module~circlewrapper PENF PENF PENF->module~circlewrapper module~errormessages ErrorMessages PENF->module~errormessages module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~circle Circle module~circle->module~circlewrapper module~errormessages->module~circlewrapper module~dimensionswrapper->module~dimensionswrapper0d iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. USE the data type to store\n USE the DimensionsWrapper0D abstract class\n USE the ErrorMessages for printing error messages\n USE I4P data type and str for string conversion Used By module~~circlewrapper~~UsedByGraph module~circlewrapper CircleWrapper module~circlewrapperfactory CircleWrapperFactory module~circlewrapper->module~circlewrapperfactory program~main main module~circlewrapperfactory->program~main Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types CircleWrapper_t Derived Types type, public, extends(DimensionsWrapper0D_t) :: CircleWrapper_t Extends from DimensionsWrapper0D_t (scalar value) Components Type Visibility Attributes Name Initial type(Circle_T), public, allocatable :: Value Value stores a copy of the input data by assignment Type-Bound Procedures procedure, public :: Set => CircleWrapper_Set Sets the Value into the Wrapper procedure, public :: Get => CircleWrapper_Get Gets the Value from the Wrapper procedure, public :: GetShape => CircleWrapper_GetShape Return the shape of the stored Value (0, scalar value) procedure, public :: GetPointer => CircleWrapper_GetPointer Return an unlimited polymorphic pointer to the Value procedure, public :: DataSizeInBytes => CircleWrapper_DataSizeInBytes Return the size of the stored data in bytes procedure, public :: isOfDataType => CircleWrapper_isOfDataType Check if the data type of a input Mold is Circle_t procedure, public :: toString => CircleWrapper_toString Return the value as a string procedure, public :: Free => CircleWrapper_Free Free the Wrapper procedure, public :: Print => CircleWrapper_Print Print the Wrapper content","tags":"","loc":"module/circlewrapper.html","title":"CircleWrapper â FPL"},{"text":"Used By module~~circle~~UsedByGraph module~circle Circle module~circlewrapperfactory CircleWrapperFactory module~circle->module~circlewrapperfactory module~circlewrapper CircleWrapper module~circle->module~circlewrapper program~main main module~circle->program~main module~circlewrapperfactory->program~main module~circlewrapper->module~circlewrapperfactory Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Derived Types Circle_t Derived Types type, public :: Circle_t Type-Bound Procedures procedure, public :: SetRadius => Circle_SetRadius procedure, public :: GetRadius => Circle_GetRadius procedure, public :: DataSizeInBytes => Circle_DataSizeInBytes generic, public :: assignment(=) => Circle_Assign","tags":"","loc":"module/circle.html","title":"Circle â FPL"},{"text":"Uses: Circle CircleWrapper DimensionsWrapper WrapperFactory ErrorMessages PENF module~~circlewrapperfactory~~UsesGraph module~circlewrapperfactory CircleWrapperFactory PENF PENF PENF->module~circlewrapperfactory module~circlewrapper CircleWrapper PENF->module~circlewrapper module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~errormessages ErrorMessages PENF->module~errormessages module~circlewrapper->module~circlewrapperfactory module~circle Circle module~circle->module~circlewrapperfactory module~circle->module~circlewrapper module~wrapperfactory WrapperFactory module~wrapperfactory->module~circlewrapperfactory module~dimensionswrapper->module~circlewrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~errormessages->module~circlewrapperfactory module~errormessages->module~circlewrapper module~dimensionswrapper0d->module~circlewrapper iso_fortran_env iso_fortran_env iso_fortran_env->module~errormessages var panmodulecirclewrapperfactoryUsesGraph = svgPanZoom('#modulecirclewrapperfactoryUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. USE the data type to store\n USE the corresponding Wrapper\n USE the DimensionsWrapper abstract class\n USE the WrapperFactory abstract class\n USE the ErrorMessages for printing error messages\n USE I1P data type Used By module~~circlewrapperfactory~~UsedByGraph module~circlewrapperfactory CircleWrapperFactory program~main main module~circlewrapperfactory->program~main Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables WrapperFactoryCircle Variables Type Visibility Attributes Name Initial type(CircleWrapperFactory_t), public :: WrapperFactoryCircle Public Wrapper Factory (singleton)","tags":"","loc":"module/circlewrapperfactory.html","title":"CircleWrapperFactory â FPL"},{"text":"Uses: penf iso_fortran_env program~~compact_real~~UsesGraph program~compact_real compact_real penf penf penf->program~compact_real iso_fortran_env iso_fortran_env iso_fortran_env->program~compact_real Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. PENF's testing program. Calls program~~compact_real~~CallsGraph program~compact_real compact_real str str program~compact_real->str penf_init penf_init program~compact_real->penf_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables test_passed Source Code compact_real Variables Type Attributes Name Initial logical :: test_passed (3) List of passed tests. Source Code program compact_real !----------------------------------------------------------------------------------------------------------------------------------- !< PENF's testing program. !----------------------------------------------------------------------------------------------------------------------------------- use penf use , intrinsic :: ISO_FORTRAN_ENV , only : stdout => OUTPUT_UNIT !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- implicit none logical :: test_passed ( 3 ) !< List of passed tests. !----------------------------------------------------------------------------------------------------------------------------------- !----------------------------------------------------------------------------------------------------------------------------------- call penf_init test_passed = . false . test_passed ( 1 ) = trim ( str ( n = 1._R8P , compact = . true .)) == '+0.1E+1' print \"(A,L1)\" , 'Compact 1.0: ' // trim ( str ( n = 1._R8P , compact = . true .)) // ', is correct? ' , test_passed ( 1 ) test_passed ( 2 ) = trim ( str ( n = 1._R4P / 3._R4P , compact = . true .)) == '+0.333333E+0' print \"(A,L1)\" , 'Compact 1.0/3.0: ' // trim ( str ( n = 1._R4P / 3._R4P , compact = . true .)) // ', is correct? ' , test_passed ( 2 ) test_passed ( 3 ) = trim ( str ( n = 1._R16P / 4._R16P , compact = . true .)) == '+0.25E+0' print \"(A,L1)\" , 'Compact 1.0/4.0: ' // trim ( str ( n = 1._R16P / 4._R16P , compact = . true .)) // ', is correct? ' , test_passed ( 3 ) write ( stdout , \"(A,L1)\" ) new_line ( 'a' ) // 'Are all tests passed? ' , all ( test_passed ) stop !----------------------------------------------------------------------------------------------------------------------------------- endprogram compact_real","tags":"","loc":"program/compact_real.html","title":"compact_real â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_i4p_test~~UsesGraph program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_i4p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_i4p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_i4p_test module~wrapperfactory->program~wrapperfactorylist_i4p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_i4p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_i4p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_i4p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_i4p_test~~CallsGraph program~wrapperfactorylist_i4p_test WrapperFactoryList_I4P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_i4p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D i Source Code WrapperFactoryList_I4P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper integer(kind=I4P) :: val0D = 9 integer(kind=I4P) :: val1D (-1:1) = (/1, 2, 3/) integer(kind=I4P) :: val2D (1,1) = 9 integer(kind=I4P) :: val3D (1,1,1) = 9 integer(kind=I4P) :: val4D (1,1,1,1) = 9 integer(kind=I4P) :: val5D (1,1,1,1,1) = 9 integer(kind=I4P) :: val6D (1,1,1,1,1,1) = 9 integer(kind=I4P) :: val7D (1,1,1,1,1,1,1) = 9 integer :: i Source Code program WrapperFactoryList_I4P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I4P ) :: val0D = 9 integer ( I4P ) :: val1D ( - 1 : 1 ) = ( / 1 , 2 , 3 / ) integer ( I4P ) :: val2D ( 1 , 1 ) = 9 integer ( I4P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I4P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I4P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer :: i call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I4P_Test","tags":"","loc":"program/wrapperfactorylist_i4p_test.html","title":"WrapperFactoryList_I4P_Test â FPL"},{"text":"Uses: iso_fortran_env WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_test~~UsesGraph program~wrapperfactorylist_test WrapperFactoryList_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactory->program~wrapperfactorylist_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_test PENF PENF PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_testUsesGraph = svgPanZoom('#programwrapperfactorylist_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_test~~CallsGraph program~wrapperfactorylist_test WrapperFactoryList_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper logical :: val0D = .true. logical :: val1D (1) = .true. logical :: val2D (1,1) = .true. logical :: val3D (1,1,1) = .true. logical :: val4D (1,1,1,1) = .true. logical :: val5D (1,1,1,1,1) = .true. logical :: val6D (1,1,1,1,1,1) = .true. logical :: val7D (1,1,1,1,1,1,1) = .true. Source Code program WrapperFactoryList_Test USE iso_fortran_env , only : OUTPUT_UNIT USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper logical :: val0D = . true . logical :: val1D ( 1 ) = . true . logical :: val2D ( 1 , 1 ) = . true . logical :: val3D ( 1 , 1 , 1 ) = . true . logical :: val4D ( 1 , 1 , 1 , 1 ) = . true . logical :: val5D ( 1 , 1 , 1 , 1 , 1 ) = . true . logical :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = . true . logical :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = . true . call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_Test","tags":"","loc":"program/wrapperfactorylist_test.html","title":"WrapperFactoryList_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~~UsesGraph program~parameterlistentrycontainer_test ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test PENF PENF PENF->program~parameterlistentrycontainer_test PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_testUsesGraph = svgPanZoom('#programparameterlistentrycontainer_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~~CallsGraph program~parameterlistentrycontainer_test ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test->proc~fpl_finalize str str program~parameterlistentrycontainer_test->str proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters array iter numiters loop Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I4P), allocatable :: array (:) integer :: iter integer :: numiters integer :: loop","tags":"","loc":"program/parameterlistentrycontainer_test.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperthewrapperfactorylist_test~~UsesGraph program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperthewrapperfactorylist_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperthewrapperfactorylist_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperthewrapperfactorylist_test module~wrapperfactory->program~wrapperthewrapperfactorylist_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperthewrapperfactorylist_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperthewrapperfactorylist_testUsesGraph = svgPanZoom('#programwrapperthewrapperfactorylist_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperthewrapperfactorylist_test~~CallsGraph program~wrapperthewrapperfactorylist_test WrapperTheWrapperFactoryList_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperthewrapperfactorylist_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperTheWrapperFactoryList_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper character(len=1) :: val0D = 'A' character(len=1) :: val1D (1) = 'A' character(len=1) :: val2D (1,1) = 'A' character(len=1) :: val3D (1,1,1) = 'A' character(len=1) :: val4D (1,1,1,1) = 'A' character(len=1) :: val5D (1,1,1,1,1) = 'A' character(len=1) :: val6D (1,1,1,1,1,1) = 'A' character(len=1) :: val7D (1,1,1,1,1,1,1) = 'A' Source Code program WrapperTheWrapperFactoryList_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper character ( len = 1 ) :: val0D = 'A' character ( len = 1 ) :: val1D ( 1 ) = 'A' character ( len = 1 ) :: val2D ( 1 , 1 ) = 'A' character ( len = 1 ) :: val3D ( 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val4D ( 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 'A' character ( len = 1 ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 'A' call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperTheWrapperFactoryList_Test","tags":"","loc":"program/wrapperthewrapperfactorylist_test.html","title":"WrapperTheWrapperFactoryList_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_r8p_test~~UsesGraph program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_r8p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_r8p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_r8p_test module~wrapperfactory->program~wrapperfactorylist_r8p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_r8p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_r8p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_r8p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_r8p_test~~CallsGraph program~wrapperfactorylist_r8p_test WrapperFactoryList_R8P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_r8p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_R8P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper real(kind=R8P) :: val0D = 9 real(kind=R8P) :: val1D (1) = 9 real(kind=R8P) :: val2D (1,1) = 9 real(kind=R8P) :: val3D (1,1,1) = 9 real(kind=R8P) :: val4D (1,1,1,1) = 9 real(kind=R8P) :: val5D (1,1,1,1,1) = 9 real(kind=R8P) :: val6D (1,1,1,1,1,1) = 9 real(kind=R8P) :: val7D (1,1,1,1,1,1,1) = 9 Source Code program WrapperFactoryList_R8P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : R8P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper real ( R8P ) :: val0D = 9 real ( R8P ) :: val1D ( 1 ) = 9 real ( R8P ) :: val2D ( 1 , 1 ) = 9 real ( R8P ) :: val3D ( 1 , 1 , 1 ) = 9 real ( R8P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 real ( R8P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_R8P_Test","tags":"","loc":"program/wrapperfactorylist_r8p_test.html","title":"WrapperFactoryList_R8P_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~2~~UsesGraph program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~2 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~2 PENF PENF PENF->program~parameterlistentrycontainer_test~2 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test2UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test2UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~2~~CallsGraph program~parameterlistentrycontainer_test~2 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~2->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~2->proc~fpl_finalize str str program~parameterlistentrycontainer_test~2->str proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters Iterator array shape iter numiters loop Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters type(ParameterListIterator_t) :: Iterator integer(kind=I4P), allocatable :: array (:) integer(kind=I4P), allocatable :: shape (:) integer :: iter integer :: numiters integer :: loop","tags":"","loc":"program/parameterlistentrycontainer_test~2.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_r4p_test~~UsesGraph program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_r4p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_r4p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_r4p_test module~wrapperfactory->program~wrapperfactorylist_r4p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_r4p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_r4p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_r4p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_r4p_test~~CallsGraph program~wrapperfactorylist_r4p_test WrapperFactoryList_R4P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_r4p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_R4P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper real(kind=R4P) :: val0D = 9 real(kind=R4P) :: val1D (1) = 9 real(kind=R4P) :: val2D (1,1) = 9 real(kind=R4P) :: val3D (1,1,1) = 9 real(kind=R4P) :: val4D (1,1,1,1) = 9 real(kind=R4P) :: val5D (1,1,1,1,1) = 9 real(kind=R4P) :: val6D (1,1,1,1,1,1) = 9 real(kind=R4P) :: val7D (1,1,1,1,1,1,1) = 9 Source Code program WrapperFactoryList_R4P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : R4P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper real ( R4P ) :: val0D = 9 real ( R4P ) :: val1D ( 1 ) = 9 real ( R4P ) :: val2D ( 1 , 1 ) = 9 real ( R4P ) :: val3D ( 1 , 1 , 1 ) = 9 real ( R4P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 real ( R4P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_R4P_Test","tags":"","loc":"program/wrapperfactorylist_r4p_test.html","title":"WrapperFactoryList_R4P_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_i1p_test~~UsesGraph program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_i1p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_i1p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_i1p_test module~wrapperfactory->program~wrapperfactorylist_i1p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_i1p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_i1p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_i1p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_i1p_test~~CallsGraph program~wrapperfactorylist_i1p_test WrapperFactoryList_I1P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_i1p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_I1P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper integer(kind=I1P) :: val0D = 9 integer(kind=I1P) :: val1D (1) = 9 integer(kind=I1P) :: val2D (1,1) = 9 integer(kind=I1P) :: val3D (1,1,1) = 9 integer(kind=I1P) :: val4D (1,1,1,1) = 9 integer(kind=I1P) :: val5D (1,1,1,1,1) = 9 integer(kind=I1P) :: val6D (1,1,1,1,1,1) = 9 integer(kind=I1P) :: val7D (1,1,1,1,1,1,1) = 9 Source Code program WrapperFactoryList_I1P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I1P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I1P ) :: val0D = 9 integer ( I1P ) :: val1D ( 1 ) = 9 integer ( I1P ) :: val2D ( 1 , 1 ) = 9 integer ( I1P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I1P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I1P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I1P_Test","tags":"","loc":"program/wrapperfactorylist_i1p_test.html","title":"WrapperFactoryList_I1P_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_i2p_test~~UsesGraph program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_i2p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_i2p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_i2p_test module~wrapperfactory->program~wrapperfactorylist_i2p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_i2p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_i2p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_i2p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_i2p_test~~CallsGraph program~wrapperfactorylist_i2p_test WrapperFactoryList_I2P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_i2p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_I2P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper integer(kind=I2P) :: val0D = 9 integer(kind=I2P) :: val1D (1) = 9 integer(kind=I2P) :: val2D (1,1) = 9 integer(kind=I2P) :: val3D (1,1,1) = 9 integer(kind=I2P) :: val4D (1,1,1,1) = 9 integer(kind=I2P) :: val5D (1,1,1,1,1) = 9 integer(kind=I2P) :: val6D (1,1,1,1,1,1) = 9 integer(kind=I2P) :: val7D (1,1,1,1,1,1,1) = 9 Source Code program WrapperFactoryList_I2P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I2P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I2P ) :: val0D = 9 integer ( I2P ) :: val1D ( 1 ) = 9 integer ( I2P ) :: val2D ( 1 , 1 ) = 9 integer ( I2P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I2P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I2P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I2P_Test","tags":"","loc":"program/wrapperfactorylist_i2p_test.html","title":"WrapperFactoryList_I2P_Test â FPL"},{"text":"Uses: iso_fortran_env PENF WrapperFactoryListSingleton WrapperFactory DimensionsWrapper program~~wrapperfactorylist_i8p_test~~UsesGraph program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test module~dimensionswrapper DimensionsWrapper module~dimensionswrapper->program~wrapperfactorylist_i8p_test module~wrapperfactory WrapperFactory module~dimensionswrapper->module~wrapperfactory module~i8pwrapperfactory I8PWrapperFactory module~dimensionswrapper->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory module~dimensionswrapper->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory module~dimensionswrapper->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory module~dimensionswrapper->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory module~dimensionswrapper->module~lwrapperfactory module~dlcawrapperfactory DLCAWrapperFactory module~dimensionswrapper->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory module~dimensionswrapper->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d iso_fortran_env iso_fortran_env iso_fortran_env->program~wrapperfactorylist_i8p_test module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->program~wrapperfactorylist_i8p_test module~wrapperfactory->program~wrapperfactorylist_i8p_test module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory PENF PENF PENF->program~wrapperfactorylist_i8p_test PENF->module~dimensionswrapper PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory var panprogramwrapperfactorylist_i8p_testUsesGraph = svgPanZoom('#programwrapperfactorylist_i8p_testUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~wrapperfactorylist_i8p_test~~CallsGraph program~wrapperfactorylist_i8p_test WrapperFactoryList_I8P_Test proc~thewrapperfactorylist_init TheWrapperFactoryList_Init program~wrapperfactorylist_i8p_test->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables factory wrapper val0D val1D val2D val3D val4D val5D val6D val7D Source Code WrapperFactoryList_I8P_Test Variables Type Attributes Name Initial class(WrapperFactory_t), pointer :: factory class(DimensionsWrapper_t), pointer :: wrapper integer(kind=I8P) :: val0D = 9 integer(kind=I8P) :: val1D (1) = 9 integer(kind=I8P) :: val2D (1,1) = 9 integer(kind=I8P) :: val3D (1,1,1) = 9 integer(kind=I8P) :: val4D (1,1,1,1) = 9 integer(kind=I8P) :: val5D (1,1,1,1,1) = 9 integer(kind=I8P) :: val6D (1,1,1,1,1,1) = 9 integer(kind=I8P) :: val7D (1,1,1,1,1,1,1) = 9 Source Code program WrapperFactoryList_I8P_Test USE iso_fortran_env , only : OUTPUT_UNIT USE PENF , only : I8P USE WrapperFactoryListSingleton USE WrapperFactory USE DimensionsWrapper implicit none class ( WrapperFactory_t ), pointer :: factory class ( DimensionsWrapper_t ), pointer :: wrapper integer ( I8P ) :: val0D = 9 integer ( I8P ) :: val1D ( 1 ) = 9 integer ( I8P ) :: val2D ( 1 , 1 ) = 9 integer ( I8P ) :: val3D ( 1 , 1 , 1 ) = 9 integer ( I8P ) :: val4D ( 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val5D ( 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val6D ( 1 , 1 , 1 , 1 , 1 , 1 ) = 9 integer ( I8P ) :: val7D ( 1 , 1 , 1 , 1 , 1 , 1 , 1 ) = 9 call TheWrapperFactoryList_Init () call TheWrapperFactoryList % Print ( unit = OUTPUT_UNIT ) factory => TheWrapperFactoryList % GetFactory ( Value = val0D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val0D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val1D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val1D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val2D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val2D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val3D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val3D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val4D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val4D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val5D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val5D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val6D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val6D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) factory => TheWrapperFactoryList % GetFactory ( Value = val7D ) if ( associated ( factory )) wrapper => factory % Wrap ( Value = val7D ) if ( associated ( wrapper )) call Wrapper % Print ( unit = OUTPUT_UNIT ) nullify ( factory ); call wrapper % Free (); deallocate ( wrapper ) call TheWrapperFactoryList % Free () end program WrapperFactoryList_I8P_Test","tags":"","loc":"program/wrapperfactorylist_i8p_test.html","title":"WrapperFactoryList_I8P_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~3~~UsesGraph program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~3 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~3 PENF PENF PENF->program~parameterlistentrycontainer_test~3 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test3UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test3UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~3~~CallsGraph program~parameterlistentrycontainer_test~3 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~3->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~3->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:,:,:) integer(kind=I2P), allocatable :: I2PArray (:,:,:,:) integer(kind=I4P), allocatable :: I4PArray (:,:,:,:) integer(kind=I8P), allocatable :: I8PArray (:,:,:,:) real(kind=R4P), allocatable :: R4PArray (:,:,:,:) real(kind=R8P), allocatable :: R8PArray (:,:,:,:) logical, allocatable :: LArray (:,:,:,:) character(len=:), allocatable :: DLCAarray (:,:,:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~3.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~4~~UsesGraph program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~4 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~4 PENF PENF PENF->program~parameterlistentrycontainer_test~4 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test4UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test4UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~4~~CallsGraph program~parameterlistentrycontainer_test~4 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~4->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~4->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:,:) integer(kind=I2P), allocatable :: I2PArray (:,:,:) integer(kind=I4P), allocatable :: I4PArray (:,:,:) integer(kind=I8P), allocatable :: I8PArray (:,:,:) real(kind=R4P), allocatable :: R4PArray (:,:,:) real(kind=R8P), allocatable :: R8PArray (:,:,:) logical, allocatable :: LArray (:,:,:) character(len=:), allocatable :: DLCAarray (:,:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~4.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~5~~UsesGraph program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~5 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~5 PENF PENF PENF->program~parameterlistentrycontainer_test~5 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test5UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test5UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~5~~CallsGraph program~parameterlistentrycontainer_test~5 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~5->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~5->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:) integer(kind=I2P), allocatable :: I2PArray (:) integer(kind=I4P), allocatable :: I4PArray (:) integer(kind=I8P), allocatable :: I8PArray (:) real(kind=R4P), allocatable :: R4PArray (:) real(kind=R8P), allocatable :: R8PArray (:) logical, allocatable :: LArray (:) character(len=:), allocatable :: DLCAarray (:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~5.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~6~~UsesGraph program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~6 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~6 PENF PENF PENF->program~parameterlistentrycontainer_test~6 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test6UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test6UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~6~~CallsGraph program~parameterlistentrycontainer_test~6 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~6->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~6->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray integer(kind=I2P), allocatable :: I2PArray integer(kind=I4P), allocatable :: I4PArray integer(kind=I8P), allocatable :: I8PArray real(kind=R4P), allocatable :: R4PArray real(kind=R8P), allocatable :: R8PArray logical, allocatable :: LArray character(len=:), allocatable :: DLCAarray integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~6.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~7~~UsesGraph program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~7 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~7 PENF PENF PENF->program~parameterlistentrycontainer_test~7 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test7UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test7UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~7~~CallsGraph program~parameterlistentrycontainer_test~7 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~7->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~7->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:) integer(kind=I2P), allocatable :: I2PArray (:,:) integer(kind=I4P), allocatable :: I4PArray (:,:) integer(kind=I8P), allocatable :: I8PArray (:,:) real(kind=R4P), allocatable :: R4PArray (:,:) real(kind=R8P), allocatable :: R8PArray (:,:) logical, allocatable :: LArray (:,:) character(len=:), allocatable :: DLCAarray (:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~7.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~8~~UsesGraph program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~8 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~8 PENF PENF PENF->program~parameterlistentrycontainer_test~8 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test8UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test8UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~8~~CallsGraph program~parameterlistentrycontainer_test~8 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~8->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~8->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:,:,:,:,:,:) integer(kind=I2P), allocatable :: I2PArray (:,:,:,:,:,:,:) integer(kind=I4P), allocatable :: I4PArray (:,:,:,:,:,:,:) integer(kind=I8P), allocatable :: I8PArray (:,:,:,:,:,:,:) real(kind=R4P), allocatable :: R4PArray (:,:,:,:,:,:,:) real(kind=R8P), allocatable :: R8PArray (:,:,:,:,:,:,:) logical, allocatable :: LArray (:,:,:,:,:,:,:) character(len=:), allocatable :: DLCAarray (:,:,:,:,:,:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~8.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~9~~UsesGraph program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~9 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~9 PENF PENF PENF->program~parameterlistentrycontainer_test~9 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test9UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test9UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~9~~CallsGraph program~parameterlistentrycontainer_test~9 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~9->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~9->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:,:,:,:) integer(kind=I2P), allocatable :: I2PArray (:,:,:,:,:) integer(kind=I4P), allocatable :: I4PArray (:,:,:,:,:) integer(kind=I8P), allocatable :: I8PArray (:,:,:,:,:) real(kind=R4P), allocatable :: R4PArray (:,:,:,:,:) real(kind=R8P), allocatable :: R8PArray (:,:,:,:,:) logical, allocatable :: LArray (:,:,:,:,:) character(len=:), allocatable :: DLCAarray (:,:,:,:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~9.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: iso_fortran_env PENF FPL program~~parameterlistentrycontainer_test~10~~UsesGraph program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test iso_fortran_env iso_fortran_env iso_fortran_env->program~parameterlistentrycontainer_test~10 module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~parameterlistentrycontainer_test~10 PENF PENF PENF->program~parameterlistentrycontainer_test~10 PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramparameterlistentrycontainer_test10UsesGraph = svgPanZoom('#programparameterlistentrycontainer_test10UsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~parameterlistentrycontainer_test~10~~CallsGraph program~parameterlistentrycontainer_test~10 ParameterListEntryContainer_Test proc~fpl_init FPL_Init program~parameterlistentrycontainer_test~10->proc~fpl_init proc~fpl_finalize FPL_Finalize program~parameterlistentrycontainer_test~10->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables Parameters I1PArray I2PArray I4PArray I8PArray R4PArray R8PArray LArray DLCAarray Shape Variables Type Attributes Name Initial type(ParameterList_t) :: Parameters integer(kind=I1P), allocatable :: I1PArray (:,:,:,:,:,:) integer(kind=I2P), allocatable :: I2PArray (:,:,:,:,:,:) integer(kind=I4P), allocatable :: I4PArray (:,:,:,:,:,:) integer(kind=I8P), allocatable :: I8PArray (:,:,:,:,:,:) real(kind=R4P), allocatable :: R4PArray (:,:,:,:,:,:) real(kind=R8P), allocatable :: R8PArray (:,:,:,:,:,:) logical, allocatable :: LArray (:,:,:,:,:,:) character(len=:), allocatable :: DLCAarray (:,:,:,:,:,:) integer(kind=I4P), allocatable :: Shape (:)","tags":"","loc":"program/parameterlistentrycontainer_test~10.html","title":"ParameterListEntryContainer_Test â FPL"},{"text":"Uses: FPL iso_fortran_env program~~fortranparameterlist_example~~UsesGraph program~fortranparameterlist_example FortranParameterList_Example iso_fortran_env iso_fortran_env iso_fortran_env->program~fortranparameterlist_example module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~fpl FPL module~fpl->program~fortranparameterlist_example module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory I8PWrapperFactory module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory I4PWrapperFactory module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory I1PWrapperFactory module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory R8PWrapperFactory module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory LWrapperFactory module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist WrapperFactoryList module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory DLCAWrapperFactory module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory R4PWrapperFactory module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory I2PWrapperFactory module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P module~dimensionswrapper7d_i8p->module~i8pwrapperfactory PENF PENF PENF->module~parameterlist PENF->module~i8pwrapperfactory PENF->module~i4pwrapperfactory PENF->module~i1pwrapperfactory PENF->module~r8pwrapperfactory PENF->module~lwrapperfactory PENF->module~wrapperfactorylist PENF->module~dlcawrapperfactory PENF->module~r4pwrapperfactory PENF->module~i2pwrapperfactory PENF->module~dimensionswrapper5d_i8p PENF->module~dimensionswrapper1d_i8p PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p PENF->module~errormessages module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogramfortranparameterlist_exampleUsesGraph = svgPanZoom('#programfortranparameterlist_exampleUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Example based on Teuchos::ParameterList documentation Setting parameters in My_List\n Create a 'Preconditioner' SubList of parameters\n Setting parameters in Prec_List\n Has a solver been chosen\n Has a preconditioner been chosen\n Has tolerance been chosen and is of the expected data type\n Get method thtat retrieves a parameter of a particular type Calls program~~fortranparameterlist_example~~CallsGraph program~fortranparameterlist_example FortranParameterList_Example proc~fpl_init FPL_Init program~fortranparameterlist_example->proc~fpl_init proc~fpl_finalize FPL_Finalize program~fortranparameterlist_example->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables My_List My_List_Iterator Prec_List Prec_List_Iterator FPLError solver_defined prec_defined has_same_type Tolerance String Variables Type Attributes Name Initial type(ParameterList_t) :: My_List type(ParameterListIterator_t) :: My_List_Iterator type(ParameterList_t), pointer :: Prec_List type(ParameterListIterator_t) :: Prec_List_Iterator integer :: FPLError logical :: solver_defined logical :: prec_defined logical :: has_same_type real(kind=REAL64) :: Tolerance character(len=:), allocatable :: String","tags":"","loc":"program/fortranparameterlist_example.html","title":"FortranParameterList_Example â FPL"},{"text":"Uses: FPL Circle CircleWrapperFactory iso_fortran_env program~~main~~UsesGraph program~main main module~circlewrapperfactory CircleWrapperFactory module~circlewrapperfactory->program~main iso_fortran_env iso_fortran_env iso_fortran_env->program~main module~errormessages ErrorMessages iso_fortran_env->module~errormessages module~parameterlist ParameterList iso_fortran_env->module~parameterlist module~fpl FPL module~fpl->program~main module~circle Circle module~circle->program~main module~circle->module~circlewrapperfactory module~circlewrapper CircleWrapper module~circle->module~circlewrapper PENF PENF PENF->module~circlewrapperfactory PENF->module~circlewrapper module~dimensionswrapper DimensionsWrapper PENF->module~dimensionswrapper PENF->module~errormessages PENF->module~parameterlist module~i8pwrapperfactory I8PWrapperFactory PENF->module~i8pwrapperfactory module~i4pwrapperfactory I4PWrapperFactory PENF->module~i4pwrapperfactory module~i1pwrapperfactory I1PWrapperFactory PENF->module~i1pwrapperfactory module~r8pwrapperfactory R8PWrapperFactory PENF->module~r8pwrapperfactory module~lwrapperfactory LWrapperFactory PENF->module~lwrapperfactory module~wrapperfactorylist WrapperFactoryList PENF->module~wrapperfactorylist module~dlcawrapperfactory DLCAWrapperFactory PENF->module~dlcawrapperfactory module~r4pwrapperfactory R4PWrapperFactory PENF->module~r4pwrapperfactory module~i2pwrapperfactory I2PWrapperFactory PENF->module~i2pwrapperfactory module~dimensionswrapper5d_i8p DimensionsWrapper5D_I8P PENF->module~dimensionswrapper5d_i8p module~dimensionswrapper1d_i8p DimensionsWrapper1D_I8P PENF->module~dimensionswrapper1d_i8p module~dimensionswrapper7d_i8p DimensionsWrapper7D_I8P PENF->module~dimensionswrapper7d_i8p module~dimensionswrapper6d_i8p DimensionsWrapper6D_I8P PENF->module~dimensionswrapper6d_i8p module~dimensionswrapper0d_i8p DimensionsWrapper0D_I8P PENF->module~dimensionswrapper0d_i8p module~dimensionswrapper4d_i8p DimensionsWrapper4D_I8P PENF->module~dimensionswrapper4d_i8p module~dimensionswrapper2d_i8p DimensionsWrapper2D_I8P PENF->module~dimensionswrapper2d_i8p module~dimensionswrapper3d_i8p DimensionsWrapper3D_I8P PENF->module~dimensionswrapper3d_i8p module~dimensionswrapper2d_i4p DimensionsWrapper2D_I4P PENF->module~dimensionswrapper2d_i4p module~dimensionswrapper4d_i4p DimensionsWrapper4D_I4P PENF->module~dimensionswrapper4d_i4p module~dimensionswrapper1d_i4p DimensionsWrapper1D_I4P PENF->module~dimensionswrapper1d_i4p module~dimensionswrapper5d_i4p DimensionsWrapper5D_I4P PENF->module~dimensionswrapper5d_i4p module~dimensionswrapper7d_i4p DimensionsWrapper7D_I4P PENF->module~dimensionswrapper7d_i4p module~dimensionswrapper0d_i4p DimensionsWrapper0D_I4P PENF->module~dimensionswrapper0d_i4p module~dimensionswrapper3d_i4p DimensionsWrapper3D_I4P PENF->module~dimensionswrapper3d_i4p module~dimensionswrapper6d_i4p DimensionsWrapper6D_I4P PENF->module~dimensionswrapper6d_i4p module~dimensionswrapper0d_i1p DimensionsWrapper0D_I1P PENF->module~dimensionswrapper0d_i1p module~dimensionswrapper4d_i1p DimensionsWrapper4D_I1P PENF->module~dimensionswrapper4d_i1p module~dimensionswrapper5d_i1p DimensionsWrapper5D_I1P PENF->module~dimensionswrapper5d_i1p module~dimensionswrapper6d_i1p DimensionsWrapper6D_I1P PENF->module~dimensionswrapper6d_i1p module~dimensionswrapper1d_i1p DimensionsWrapper1D_I1P PENF->module~dimensionswrapper1d_i1p module~dimensionswrapper7d_i1p DimensionsWrapper7D_I1P PENF->module~dimensionswrapper7d_i1p module~dimensionswrapper2d_i1p DimensionsWrapper2D_I1P PENF->module~dimensionswrapper2d_i1p module~dimensionswrapper3d_i1p DimensionsWrapper3D_I1P PENF->module~dimensionswrapper3d_i1p module~dimensionswrapper0d_r8p DimensionsWrapper0D_R8P PENF->module~dimensionswrapper0d_r8p module~dimensionswrapper6d_r8p DimensionsWrapper6D_R8P PENF->module~dimensionswrapper6d_r8p module~dimensionswrapper3d_r8p DimensionsWrapper3D_R8P PENF->module~dimensionswrapper3d_r8p module~dimensionswrapper5d_r8p DimensionsWrapper5D_R8P PENF->module~dimensionswrapper5d_r8p module~dimensionswrapper7d_r8p DimensionsWrapper7D_R8P PENF->module~dimensionswrapper7d_r8p module~dimensionswrapper2d_r8p DimensionsWrapper2D_R8P PENF->module~dimensionswrapper2d_r8p module~dimensionswrapper1d_r8p DimensionsWrapper1D_R8P PENF->module~dimensionswrapper1d_r8p module~dimensionswrapper4d_r8p DimensionsWrapper4D_R8P PENF->module~dimensionswrapper4d_r8p module~dimensionswrapper5d_l DimensionsWrapper5D_L PENF->module~dimensionswrapper5d_l module~dimensionswrapper2d_l DimensionsWrapper2D_L PENF->module~dimensionswrapper2d_l module~dimensionswrapper7d_l DimensionsWrapper7D_L PENF->module~dimensionswrapper7d_l module~dimensionswrapper6d_l DimensionsWrapper6D_L PENF->module~dimensionswrapper6d_l module~dimensionswrapper1d_l DimensionsWrapper1D_L PENF->module~dimensionswrapper1d_l module~dimensionswrapper0d_l DimensionsWrapper0D_L PENF->module~dimensionswrapper0d_l module~dimensionswrapper3d_l DimensionsWrapper3D_L PENF->module~dimensionswrapper3d_l module~dimensionswrapper4d_l DimensionsWrapper4D_L PENF->module~dimensionswrapper4d_l module~fpl_utils FPL_Utils PENF->module~fpl_utils module~dimensionswrapper3d_dlca DimensionsWrapper3D_DLCA PENF->module~dimensionswrapper3d_dlca module~dimensionswrapper2d_dlca DimensionsWrapper2D_DLCA PENF->module~dimensionswrapper2d_dlca module~dimensionswrapper4d_dlca DimensionsWrapper4D_DLCA PENF->module~dimensionswrapper4d_dlca module~dimensionswrapper5d_dlca DimensionsWrapper5D_DLCA PENF->module~dimensionswrapper5d_dlca module~dimensionswrapper0d_dlca DimensionsWrapper0D_DLCA PENF->module~dimensionswrapper0d_dlca module~dimensionswrapper1d_dlca DimensionsWrapper1D_DLCA PENF->module~dimensionswrapper1d_dlca module~dimensionswrapper7d_dlca DimensionsWrapper7D_DLCA PENF->module~dimensionswrapper7d_dlca module~dimensionswrapper6d_dlca DimensionsWrapper6D_DLCA PENF->module~dimensionswrapper6d_dlca module~dimensionswrapper7d_r4p DimensionsWrapper7D_R4P PENF->module~dimensionswrapper7d_r4p module~dimensionswrapper1d_r4p DimensionsWrapper1D_R4P PENF->module~dimensionswrapper1d_r4p module~dimensionswrapper6d_r4p DimensionsWrapper6D_R4P PENF->module~dimensionswrapper6d_r4p module~dimensionswrapper5d_r4p DimensionsWrapper5D_R4P PENF->module~dimensionswrapper5d_r4p module~dimensionswrapper3d_r4p DimensionsWrapper3D_R4P PENF->module~dimensionswrapper3d_r4p module~dimensionswrapper0d_r4p DimensionsWrapper0D_R4P PENF->module~dimensionswrapper0d_r4p module~dimensionswrapper4d_r4p DimensionsWrapper4D_R4P PENF->module~dimensionswrapper4d_r4p module~dimensionswrapper2d_r4p DimensionsWrapper2D_R4P PENF->module~dimensionswrapper2d_r4p module~dimensionswrapper2d_i2p DimensionsWrapper2D_I2P PENF->module~dimensionswrapper2d_i2p module~dimensionswrapper6d_i2p DimensionsWrapper6D_I2P PENF->module~dimensionswrapper6d_i2p module~dimensionswrapper7d_i2p DimensionsWrapper7D_I2P PENF->module~dimensionswrapper7d_i2p module~dimensionswrapper5d_i2p DimensionsWrapper5D_I2P PENF->module~dimensionswrapper5d_i2p module~dimensionswrapper3d_i2p DimensionsWrapper3D_I2P PENF->module~dimensionswrapper3d_i2p module~dimensionswrapper4d_i2p DimensionsWrapper4D_I2P PENF->module~dimensionswrapper4d_i2p module~dimensionswrapper1d_i2p DimensionsWrapper1D_I2P PENF->module~dimensionswrapper1d_i2p module~dimensionswrapper0d_i2p DimensionsWrapper0D_I2P PENF->module~dimensionswrapper0d_i2p module~parameterentrydictionary ParameterEntryDictionary PENF->module~parameterentrydictionary module~parameterrootentry ParameterRootEntry PENF->module~parameterrootentry module~parameterentry ParameterEntry PENF->module~parameterentry module~circlewrapper->module~circlewrapperfactory module~wrapperfactory WrapperFactory module~wrapperfactory->module~circlewrapperfactory module~wrapperfactory->module~parameterlist module~wrapperfactory->module~i8pwrapperfactory module~wrapperfactory->module~i4pwrapperfactory module~wrapperfactory->module~i1pwrapperfactory module~wrapperfactory->module~r8pwrapperfactory module~wrapperfactory->module~lwrapperfactory module~wrapperfactory->module~wrapperfactorylist module~wrapperfactory->module~dlcawrapperfactory module~wrapperfactory->module~r4pwrapperfactory module~wrapperfactory->module~i2pwrapperfactory module~dimensionswrapper->module~circlewrapperfactory module~dimensionswrapper->module~wrapperfactory module~dimensionswrapper0d DimensionsWrapper0D module~dimensionswrapper->module~dimensionswrapper0d module~dimensionswrapper->module~parameterlist module~dimensionswrapper->module~i8pwrapperfactory module~dimensionswrapper->module~i4pwrapperfactory module~dimensionswrapper->module~i1pwrapperfactory module~dimensionswrapper->module~r8pwrapperfactory module~dimensionswrapper->module~lwrapperfactory module~dimensionswrapper->module~dlcawrapperfactory module~dimensionswrapper->module~r4pwrapperfactory module~dimensionswrapper->module~i2pwrapperfactory module~dimensionswrapper5d DimensionsWrapper5D module~dimensionswrapper->module~dimensionswrapper5d module~dimensionswrapper1d DimensionsWrapper1D module~dimensionswrapper->module~dimensionswrapper1d module~dimensionswrapper7d DimensionsWrapper7D module~dimensionswrapper->module~dimensionswrapper7d module~dimensionswrapper6d DimensionsWrapper6D module~dimensionswrapper->module~dimensionswrapper6d module~dimensionswrapper4d DimensionsWrapper4D module~dimensionswrapper->module~dimensionswrapper4d module~dimensionswrapper2d DimensionsWrapper2D module~dimensionswrapper->module~dimensionswrapper2d module~dimensionswrapper3d DimensionsWrapper3D module~dimensionswrapper->module~dimensionswrapper3d module~dimensionswrapper->module~parameterentry module~errormessages->module~circlewrapperfactory module~errormessages->module~circlewrapper module~errormessages->module~parameterlist module~errormessages->module~dimensionswrapper5d_i8p module~errormessages->module~dimensionswrapper1d_i8p module~errormessages->module~dimensionswrapper7d_i8p module~errormessages->module~dimensionswrapper6d_i8p module~errormessages->module~dimensionswrapper0d_i8p module~errormessages->module~dimensionswrapper4d_i8p module~errormessages->module~dimensionswrapper2d_i8p module~errormessages->module~dimensionswrapper3d_i8p module~errormessages->module~dimensionswrapper2d_i4p module~errormessages->module~dimensionswrapper4d_i4p module~errormessages->module~dimensionswrapper1d_i4p module~errormessages->module~dimensionswrapper5d_i4p module~errormessages->module~dimensionswrapper7d_i4p module~errormessages->module~dimensionswrapper0d_i4p module~errormessages->module~dimensionswrapper3d_i4p module~errormessages->module~dimensionswrapper6d_i4p module~errormessages->module~dimensionswrapper0d_i1p module~errormessages->module~dimensionswrapper4d_i1p module~errormessages->module~dimensionswrapper5d_i1p module~errormessages->module~dimensionswrapper6d_i1p module~errormessages->module~dimensionswrapper1d_i1p module~errormessages->module~dimensionswrapper7d_i1p module~errormessages->module~dimensionswrapper2d_i1p module~errormessages->module~dimensionswrapper3d_i1p module~errormessages->module~dimensionswrapper0d_r8p module~errormessages->module~dimensionswrapper6d_r8p module~errormessages->module~dimensionswrapper3d_r8p module~errormessages->module~dimensionswrapper5d_r8p module~errormessages->module~dimensionswrapper7d_r8p module~errormessages->module~dimensionswrapper2d_r8p module~errormessages->module~dimensionswrapper1d_r8p module~errormessages->module~dimensionswrapper4d_r8p module~errormessages->module~dimensionswrapper5d_l module~errormessages->module~dimensionswrapper2d_l module~errormessages->module~dimensionswrapper7d_l module~errormessages->module~dimensionswrapper6d_l module~errormessages->module~dimensionswrapper1d_l module~errormessages->module~dimensionswrapper0d_l module~errormessages->module~dimensionswrapper3d_l module~errormessages->module~dimensionswrapper4d_l module~errormessages->module~dimensionswrapper3d_dlca module~errormessages->module~dimensionswrapper2d_dlca module~errormessages->module~dimensionswrapper4d_dlca module~errormessages->module~dimensionswrapper5d_dlca module~errormessages->module~dimensionswrapper0d_dlca module~errormessages->module~dimensionswrapper1d_dlca module~errormessages->module~dimensionswrapper7d_dlca module~errormessages->module~dimensionswrapper6d_dlca module~errormessages->module~dimensionswrapper7d_r4p module~errormessages->module~dimensionswrapper1d_r4p module~errormessages->module~dimensionswrapper6d_r4p module~errormessages->module~dimensionswrapper5d_r4p module~errormessages->module~dimensionswrapper3d_r4p module~errormessages->module~dimensionswrapper0d_r4p module~errormessages->module~dimensionswrapper4d_r4p module~errormessages->module~dimensionswrapper2d_r4p module~errormessages->module~dimensionswrapper2d_i2p module~errormessages->module~dimensionswrapper6d_i2p module~errormessages->module~dimensionswrapper7d_i2p module~errormessages->module~dimensionswrapper5d_i2p module~errormessages->module~dimensionswrapper3d_i2p module~errormessages->module~dimensionswrapper4d_i2p module~errormessages->module~dimensionswrapper1d_i2p module~errormessages->module~dimensionswrapper0d_i2p module~dimensionswrapper0d->module~circlewrapper module~dimensionswrapper0d->module~parameterlist module~dimensionswrapper0d->module~dimensionswrapper0d_i8p module~dimensionswrapper0d->module~dimensionswrapper0d_i4p module~dimensionswrapper0d->module~dimensionswrapper0d_i1p module~dimensionswrapper0d->module~dimensionswrapper0d_r8p module~dimensionswrapper0d->module~dimensionswrapper0d_l module~dimensionswrapper0d->module~dimensionswrapper0d_dlca module~dimensionswrapper0d->module~dimensionswrapper0d_r4p module~dimensionswrapper0d->module~dimensionswrapper0d_i2p module~wrapperfactorylistsingleton WrapperFactoryListSingleton module~wrapperfactorylistsingleton->module~fpl module~wrapperfactorylistsingleton->module~parameterlist module~parameterlist->module~fpl module~i8pwrapperfactory->module~wrapperfactorylistsingleton module~i4pwrapperfactory->module~wrapperfactorylistsingleton module~i1pwrapperfactory->module~wrapperfactorylistsingleton module~r8pwrapperfactory->module~wrapperfactorylistsingleton module~lwrapperfactory->module~wrapperfactorylistsingleton module~wrapperfactorylist->module~wrapperfactorylistsingleton module~dlcawrapperfactory->module~wrapperfactorylistsingleton module~r4pwrapperfactory->module~wrapperfactorylistsingleton module~i2pwrapperfactory->module~wrapperfactorylistsingleton module~dimensionswrapper5d_i8p->module~i8pwrapperfactory module~dimensionswrapper1d_i8p->module~i8pwrapperfactory module~dimensionswrapper7d_i8p->module~i8pwrapperfactory module~dimensionswrapper6d_i8p->module~i8pwrapperfactory module~dimensionswrapper0d_i8p->module~i8pwrapperfactory module~dimensionswrapper4d_i8p->module~i8pwrapperfactory module~dimensionswrapper2d_i8p->module~i8pwrapperfactory module~dimensionswrapper3d_i8p->module~i8pwrapperfactory module~dimensionswrapper5d->module~parameterlist module~dimensionswrapper5d->module~dimensionswrapper5d_i8p module~dimensionswrapper5d->module~dimensionswrapper5d_i4p module~dimensionswrapper5d->module~dimensionswrapper5d_i1p module~dimensionswrapper5d->module~dimensionswrapper5d_r8p module~dimensionswrapper5d->module~dimensionswrapper5d_l module~dimensionswrapper5d->module~dimensionswrapper5d_dlca module~dimensionswrapper5d->module~dimensionswrapper5d_r4p module~dimensionswrapper5d->module~dimensionswrapper5d_i2p module~dimensionswrapper1d->module~parameterlist module~dimensionswrapper1d->module~dimensionswrapper1d_i8p module~dimensionswrapper1d->module~dimensionswrapper1d_i4p module~dimensionswrapper1d->module~dimensionswrapper1d_i1p module~dimensionswrapper1d->module~dimensionswrapper1d_r8p module~dimensionswrapper1d->module~dimensionswrapper1d_l module~dimensionswrapper1d->module~dimensionswrapper1d_dlca module~dimensionswrapper1d->module~dimensionswrapper1d_r4p module~dimensionswrapper1d->module~dimensionswrapper1d_i2p module~dimensionswrapper7d->module~parameterlist module~dimensionswrapper7d->module~dimensionswrapper7d_i8p module~dimensionswrapper7d->module~dimensionswrapper7d_i4p module~dimensionswrapper7d->module~dimensionswrapper7d_i1p module~dimensionswrapper7d->module~dimensionswrapper7d_r8p module~dimensionswrapper7d->module~dimensionswrapper7d_l module~dimensionswrapper7d->module~dimensionswrapper7d_dlca module~dimensionswrapper7d->module~dimensionswrapper7d_r4p module~dimensionswrapper7d->module~dimensionswrapper7d_i2p module~dimensionswrapper6d->module~parameterlist module~dimensionswrapper6d->module~dimensionswrapper6d_i8p module~dimensionswrapper6d->module~dimensionswrapper6d_i4p module~dimensionswrapper6d->module~dimensionswrapper6d_i1p module~dimensionswrapper6d->module~dimensionswrapper6d_r8p module~dimensionswrapper6d->module~dimensionswrapper6d_l module~dimensionswrapper6d->module~dimensionswrapper6d_dlca module~dimensionswrapper6d->module~dimensionswrapper6d_r4p module~dimensionswrapper6d->module~dimensionswrapper6d_i2p module~dimensionswrapper4d->module~parameterlist module~dimensionswrapper4d->module~dimensionswrapper4d_i8p module~dimensionswrapper4d->module~dimensionswrapper4d_i4p module~dimensionswrapper4d->module~dimensionswrapper4d_i1p module~dimensionswrapper4d->module~dimensionswrapper4d_r8p module~dimensionswrapper4d->module~dimensionswrapper4d_l module~dimensionswrapper4d->module~dimensionswrapper4d_dlca module~dimensionswrapper4d->module~dimensionswrapper4d_r4p module~dimensionswrapper4d->module~dimensionswrapper4d_i2p module~dimensionswrapper2d->module~parameterlist module~dimensionswrapper2d->module~dimensionswrapper2d_i8p module~dimensionswrapper2d->module~dimensionswrapper2d_i4p module~dimensionswrapper2d->module~dimensionswrapper2d_i1p module~dimensionswrapper2d->module~dimensionswrapper2d_r8p module~dimensionswrapper2d->module~dimensionswrapper2d_l module~dimensionswrapper2d->module~dimensionswrapper2d_dlca module~dimensionswrapper2d->module~dimensionswrapper2d_r4p module~dimensionswrapper2d->module~dimensionswrapper2d_i2p module~dimensionswrapper3d->module~parameterlist module~dimensionswrapper3d->module~dimensionswrapper3d_i8p module~dimensionswrapper3d->module~dimensionswrapper3d_i4p module~dimensionswrapper3d->module~dimensionswrapper3d_i1p module~dimensionswrapper3d->module~dimensionswrapper3d_r8p module~dimensionswrapper3d->module~dimensionswrapper3d_l module~dimensionswrapper3d->module~dimensionswrapper3d_dlca module~dimensionswrapper3d->module~dimensionswrapper3d_r4p module~dimensionswrapper3d->module~dimensionswrapper3d_i2p module~dimensionswrapper2d_i4p->module~i4pwrapperfactory module~dimensionswrapper4d_i4p->module~i4pwrapperfactory module~dimensionswrapper1d_i4p->module~i4pwrapperfactory module~dimensionswrapper5d_i4p->module~i4pwrapperfactory module~dimensionswrapper7d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i4p->module~i4pwrapperfactory module~dimensionswrapper3d_i4p->module~i4pwrapperfactory module~dimensionswrapper6d_i4p->module~i4pwrapperfactory module~dimensionswrapper0d_i1p->module~i1pwrapperfactory module~dimensionswrapper4d_i1p->module~i1pwrapperfactory module~dimensionswrapper5d_i1p->module~i1pwrapperfactory module~dimensionswrapper6d_i1p->module~i1pwrapperfactory module~dimensionswrapper1d_i1p->module~i1pwrapperfactory module~dimensionswrapper7d_i1p->module~i1pwrapperfactory module~dimensionswrapper2d_i1p->module~i1pwrapperfactory module~dimensionswrapper3d_i1p->module~i1pwrapperfactory module~dimensionswrapper0d_r8p->module~r8pwrapperfactory module~dimensionswrapper6d_r8p->module~r8pwrapperfactory module~dimensionswrapper3d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_r8p->module~r8pwrapperfactory module~dimensionswrapper7d_r8p->module~r8pwrapperfactory module~dimensionswrapper2d_r8p->module~r8pwrapperfactory module~dimensionswrapper1d_r8p->module~r8pwrapperfactory module~dimensionswrapper4d_r8p->module~r8pwrapperfactory module~dimensionswrapper5d_l->module~lwrapperfactory module~dimensionswrapper2d_l->module~lwrapperfactory module~dimensionswrapper7d_l->module~lwrapperfactory module~dimensionswrapper6d_l->module~lwrapperfactory module~dimensionswrapper1d_l->module~lwrapperfactory module~dimensionswrapper0d_l->module~lwrapperfactory module~dimensionswrapper3d_l->module~lwrapperfactory module~dimensionswrapper4d_l->module~lwrapperfactory module~fpl_utils->module~dimensionswrapper5d_l module~fpl_utils->module~dimensionswrapper2d_l module~fpl_utils->module~dimensionswrapper7d_l module~fpl_utils->module~dimensionswrapper6d_l module~fpl_utils->module~dimensionswrapper1d_l module~fpl_utils->module~dimensionswrapper0d_l module~fpl_utils->module~dimensionswrapper3d_l module~fpl_utils->module~dimensionswrapper4d_l module~dimensionswrapper3d_dlca->module~dlcawrapperfactory module~dimensionswrapper2d_dlca->module~dlcawrapperfactory module~dimensionswrapper4d_dlca->module~dlcawrapperfactory module~dimensionswrapper5d_dlca->module~dlcawrapperfactory module~dimensionswrapper0d_dlca->module~dlcawrapperfactory module~dimensionswrapper1d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_dlca->module~dlcawrapperfactory module~dimensionswrapper6d_dlca->module~dlcawrapperfactory module~dimensionswrapper7d_r4p->module~r4pwrapperfactory module~dimensionswrapper1d_r4p->module~r4pwrapperfactory module~dimensionswrapper6d_r4p->module~r4pwrapperfactory module~dimensionswrapper5d_r4p->module~r4pwrapperfactory module~dimensionswrapper3d_r4p->module~r4pwrapperfactory module~dimensionswrapper0d_r4p->module~r4pwrapperfactory module~dimensionswrapper4d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_r4p->module~r4pwrapperfactory module~dimensionswrapper2d_i2p->module~i2pwrapperfactory module~dimensionswrapper6d_i2p->module~i2pwrapperfactory module~dimensionswrapper7d_i2p->module~i2pwrapperfactory module~dimensionswrapper5d_i2p->module~i2pwrapperfactory module~dimensionswrapper3d_i2p->module~i2pwrapperfactory module~dimensionswrapper4d_i2p->module~i2pwrapperfactory module~dimensionswrapper1d_i2p->module~i2pwrapperfactory module~dimensionswrapper0d_i2p->module~i2pwrapperfactory module~parameterentrydictionary->module~parameterlist module~parameterrootentry->module~parameterlist module~parameterrootentry->module~parameterentrydictionary module~parameterentry->module~parameterlist module~parameterentry->module~parameterentrydictionary module~parameterentry->module~parameterrootentry var panprogrammainUsesGraph = svgPanZoom('#programmainUsesGraph', {\n                    zoomEnabled: true,\n                    controlIconsEnabled: true,\n                    fit: true,\n                    center: true,}); Help Ã Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Add the new WrapperFactory to the list of factories\n Sets the default size of the Dictionary\n Add parameters to the list\n Add a SubList to the list\n Add parameters to the Cicles SubList\n Print the content of MyList (Recursive)\n Free MyList\n Finalize FPL and free TheWrapperFactoryList Calls program~~main~~CallsGraph program~main main proc~fpl_init FPL_Init program~main->proc~fpl_init proc~fpl_finalize FPL_Finalize program~main->proc~fpl_finalize proc~thewrapperfactorylist_init TheWrapperFactoryList_Init proc~fpl_init->proc~thewrapperfactorylist_init Help Ã Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables MyCircle MyList CircleList FPLError String Variables Type Attributes Name Initial type(Circle_t) :: MyCircle type(ParameterList_t) :: MyList type(ParameterList_t), pointer :: CircleList integer :: FPLError character(len=:), allocatable :: String Initialize FPL with the default WrapperFactories","tags":"","loc":"program/main.html","title":"main â FPL"}]}